{"version":3,"sources":["webpack:///src/lib/system/src/components/health-check/health-check.component.html","webpack:///src/lib/system/src/components/health-check/health-check.component.ts","webpack:///src/lib/system/src/components/job-state-label/job-state-label.component.html","webpack:///src/lib/system/src/components/job-state-label/job-state-label.component.ts","webpack:///src/lib/system/src/components/job-list/job-list.component.html","webpack:///src/lib/system/src/components/job-list/job-list.component.ts","webpack:///src/lib/system/src/system.routes.ts","webpack:///src/lib/system/src/system.module.ts"],"names":["HealthCheckComponent","healthCheckService","this","job","state","COMPLETED","FAILED","CANCELLED","PENDING","RETRYING","RUNNING","dataService","modalService","notificationService","router","route","super","liveUpdate","hideSettled","queueFilter","settings","getAllJobs","data","jobs","skip","take","value","queueName","eq","options","filter","isSettled","sort","createdAt","DESC","timer","pipe","takeUntil","destroy$","subscribe","refresh","queues$","getJobQueues","mapStream","res","jobQueues","map","queues","name","running","result","Object","keys","length","id","cancelJob","setPageNumber","setItemsPerPage","systemRoutes","path","component","breadcrumb","SystemModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\n            <div class=\"status-icon\">\n                <clr-icon\n                    [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\n                    [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\n                    size=\"48\"\n                ></clr-icon>\n            </div>\n            <div class=\"status-detail\">\n                <ng-container *ngIf=\"status === 'ok'; else error\">\n                    {{ 'system.health-all-systems-up' | translate }}\n                </ng-container>\n                <ng-template #error>\n                    {{ 'system.health-error' | translate }}\n                </ng-template>\n                <div class=\"last-checked\">\n                    {{ 'system.health-last-checked' | translate }}:\n                    {{ healthCheckService.lastCheck$ | async | localeDate: 'mediumTime' }}\n                </div>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\n        <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\n            <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th class=\"left\">\n                {{ 'common.name' | translate }}\n            </th>\n            <th class=\"left\">\n                {{ 'system.health-status' | translate }}\n            </th>\n            <th class=\"left\">\n                {{ 'system.health-message' | translate }}\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let row of healthCheckService.details$ | async\">\n            <td class=\"align-middle left\">{{ row.key }}</td>\n            <td class=\"align-middle left\">\n                <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\n                    <ng-container *ngIf=\"row.result.status === 'up'; else down\">\n                        <clr-icon shape=\"check-circle\"></clr-icon>\n                        {{ 'system.health-status-up' | translate }}\n                    </ng-container>\n                    <ng-template #down>\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\n                        {{ 'system.health-status-down' | translate }}\n                    </ng-template>\n                </vdr-chip>\n            </td>\n            <td class=\"align-middle left\">{{ row.result.message }}</td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { HealthCheckService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-health-check',\n    templateUrl: './health-check.component.html',\n    styleUrls: ['./health-check.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HealthCheckComponent {\n    constructor(public healthCheckService: HealthCheckService) {}\n}\n","<vdr-chip [colorType]=\"colorType\">\n    <clr-icon [attr.shape]=\"iconShape\"></clr-icon>\n    {{ job.state | titlecase }}\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\n        {{ (job.progress / 100) | percent }}\n    </span>\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JobInfoFragment, JobState } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-job-state-label',\n    templateUrl: './job-state-label.component.html',\n    styleUrls: ['./job-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobStateLabelComponent {\n    @Input()\n    job: JobInfoFragment;\n\n    get iconShape(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'check-circle';\n            case JobState.FAILED:\n                return 'exclamation-circle';\n            case JobState.CANCELLED:\n                return 'ban';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return 'hourglass';\n            case JobState.RUNNING:\n                return 'sync';\n        }\n    }\n\n    get colorType(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'success';\n            case JobState.FAILED:\n            case JobState.CANCELLED:\n                return 'error';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return '';\n            case JobState.RUNNING:\n                return 'warning';\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <clr-checkbox-container>\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\"/>\n                <label>{{ 'common.live-update' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <clr-checkbox-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrCheckbox\n                    [formControl]=\"hideSettled\"\n                    name=\"hide-settled\"\n                    (change)=\"refresh()\"\n                />\n                <label>{{ 'system.hide-settled-jobs' | translate }}</label>\n            </clr-checkbox-wrapper>\n        </clr-checkbox-container>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <ng-select\n            [addTag]=\"false\"\n            [items]=\"queues$ | async\"\n            [hideSelected]=\"true\"\n            [multiple]=\"false\"\n            [markFirst]=\"false\"\n            [clearable]=\"false\"\n            [searchable]=\"false\"\n            bindValue=\"name\"\n            [formControl]=\"queueFilter\"\n            (change)=\"refresh()\"\n        >\n            <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\n                <ng-container *ngIf=\"item.name === 'all'; else others\">\n                    {{ 'system.all-job-queues' | translate }}\n                </ng-container>\n                <ng-template #others>\n                    <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\n                </ng-template>\n            </ng-template>\n        </ng-select>\n        <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-queue-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.created-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-state' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-duration' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'system.job-result' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-job=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-entity-info [entity]=\"job\"></vdr-entity-info>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-dropdown *ngIf=\"job.data\">\n                <button\n                    class=\"btn btn-link btn-icon\"\n                    vdrDropdownTrigger\n                    [title]=\"'system.job-data' | translate\"\n                >\n                    <clr-icon shape=\"details\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\n        </td>\n\n        <td class=\"left align-middle\">{{ job.createdAt | timeAgo }}</td>\n        <td class=\"left align-middle\">\n            <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\n        </td>\n        <td class=\"left align-middle\">{{ job.duration | duration }}</td>\n        <td class=\"left align-middle\">\n            <vdr-dropdown *ngIf=\"hasResult(job)\">\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"details\"></clr-icon>\n                    {{ 'system.job-result' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-dropdown *ngIf=\"job.error\">\n                <button class=\"btn btn-link btn-sm details-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"exclamation-circle\"></clr-icon>\n                    {{ 'system.job-error' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class=\"result-detail\">\n                        {{ job.error }}\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\n                <button class=\"icon-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"cancelJob(job.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.cancel' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    BaseListComponent,\n    DataService,\n    GetAllJobs,\n    GetFacetList,\n    GetJobQueueList,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { Observable, timer } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-job-list',\n    templateUrl: './job-list.component.html',\n    styleUrls: ['./job-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobListComponent\n    extends BaseListComponent<GetAllJobs.Query, GetAllJobs.Items>\n    implements OnInit {\n    queues$: Observable<GetJobQueueList.JobQueues[]>;\n    liveUpdate = new FormControl(true);\n    hideSettled = new FormControl(true);\n    queueFilter = new FormControl('all');\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getAllJobs(...args),\n            data => data.jobs,\n            (skip, take) => {\n                const queueFilter =\n                    this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\n                const hideSettled = this.hideSettled.value;\n                return {\n                    options: {\n                        skip,\n                        take,\n                        filter: {\n                            ...queueFilter,\n                            ...(hideSettled ? { isSettled: { eq: false } } : {}),\n                        },\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    },\n                };\n            },\n        );\n    }\n\n    ngOnInit(): void {\n        super.ngOnInit();\n        timer(5000, 2000)\n            .pipe(\n                takeUntil(this.destroy$),\n                filter(() => this.liveUpdate.value),\n            )\n            .subscribe(() => {\n                this.refresh();\n            });\n        this.queues$ = this.dataService.settings\n            .getJobQueues()\n            .mapStream(res => res.jobQueues)\n            .pipe(\n                map(queues => {\n                    return [{ name: 'all', running: true }, ...queues];\n                }),\n            );\n    }\n\n    hasResult(job: GetAllJobs.Items): boolean {\n        const result = job.result;\n        if (result == null) {\n            return false;\n        }\n        if (typeof result === 'object') {\n            return Object.keys(result).length > 0;\n        }\n        return true;\n    }\n\n    cancelJob(id: string) {\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\n\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\nimport { JobListComponent } from './components/job-list/job-list.component';\n\nexport const systemRoutes: Route[] = [\n    {\n        path: 'jobs',\n        component: JobListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.job-queue'),\n        },\n    },\n    {\n        path: 'system-status',\n        component: HealthCheckComponent,\n        data: {\n            breadcrumb: _('breadcrumb.system-status'),\n        },\n    },\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\nimport { JobListComponent } from './components/job-list/job-list.component';\nimport { JobStateLabelComponent } from './components/job-state-label/job-state-label.component';\nimport { systemRoutes } from './system.routes';\n\n@NgModule({\n    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\n    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\n})\nexport class SystemModule {}\n"]}