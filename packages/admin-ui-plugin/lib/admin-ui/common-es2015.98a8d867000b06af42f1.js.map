{"version":3,"sources":["webpack:///common/src/normalize-string.ts","webpack:///common/src/unique.ts"],"names":["input","spaceReplacer","normalize","replace","toLowerCase","arr","byKey","filter","item","index","self","findIndex","i","undefined"],"mappings":"qKAKA,2BAAgCA,EAAeC,EAAgB,KAC3D,OAAQD,GAAS,IACZE,UAAU,OACVC,QAAQ,mBAAoB,IAC5BC,cACAD,QAAQ,yDAA0C,IAClDA,QAAQ,OAAQF,K,mGCNzB,kBAA0BI,EAAUC,GAChC,OAAOD,EAAIE,OAAO,CAACC,EAAMC,EAAOC,IAExBD,IACAC,EAAKC,UAAUC,QACGC,IAAVP,EACOM,IAAMJ,EAENI,EAAEN,KAAWE,EAAKF","file":"x","sourcesContent":["/**\n * Normalizes a string to replace non-alphanumeric and diacritical marks with\n * plain equivalents.\n * Based on https://stackoverflow.com/a/37511463/772859\n */\nexport function normalizeString(input: string, spaceReplacer = ' '): string {\n    return (input || '')\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .replace(/[!\"£$%^&*()+[\\]{};:@#~?\\\\/,|><`¬'=‘’]/g, '')\n        .replace(/\\s+/g, spaceReplacer);\n}\n","/**\n * Returns an array with only unique values. Objects are compared by reference,\n * unless the `byKey` argument is supplied, in which case matching properties will\n * be used to check duplicates\n */\nexport function unique<T>(arr: T[], byKey?: keyof T): T[] {\n    return arr.filter((item, index, self) => {\n        return (\n            index ===\n            self.findIndex(i => {\n                if (byKey === undefined) {\n                    return i === item;\n                } else {\n                    return i[byKey] === item[byKey];\n                }\n            })\n        );\n    });\n}\n"]}