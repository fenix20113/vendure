{"version":3,"sources":["webpack:///src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.html","webpack:///src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.html","webpack:///src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.html","webpack:///src/lib/settings/src/components/permission-grid/permission-grid.component.ts","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.html","webpack:///src/lib/settings/src/components/admin-detail/admin-detail.component.ts","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.html","webpack:///src/lib/settings/src/components/administrator-list/administrator-list.component.ts","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.html","webpack:///src/lib/settings/src/components/channel-detail/channel-detail.component.ts","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.html","webpack:///src/lib/settings/src/components/channel-list/channel-list.component.ts","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.html","webpack:///src/lib/settings/src/components/country-detail/country-detail.component.ts","webpack:///src/lib/settings/src/components/country-list/country-list.component.html","webpack:///src/lib/settings/src/components/country-list/country-list.component.ts","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.html","webpack:///src/lib/settings/src/components/global-settings/global-settings.component.ts","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.html","webpack:///src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.html","webpack:///src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","webpack:///src/lib/settings/src/components/profile/profile.component.html","webpack:///src/lib/settings/src/components/profile/profile.component.ts","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.html","webpack:///src/lib/settings/src/components/role-detail/role-detail.component.ts","webpack:///src/lib/settings/src/components/role-list/role-list.component.html","webpack:///src/lib/settings/src/components/role-list/role-list.component.ts","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.html","webpack:///src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.html","webpack:///src/lib/settings/src/components/test-address-form/test-address-form.component.ts","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.html","webpack:///src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.html","webpack:///src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.html","webpack:///src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.html","webpack:///src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.html","webpack:///src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.html","webpack:///src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.html","webpack:///src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.html","webpack:///src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.html","webpack:///src/lib/settings/src/components/zone-list/zone-list.component.ts","webpack:///src/lib/settings/src/providers/routing/administrator-resolver.ts","webpack:///src/lib/settings/src/providers/routing/channel-resolver.ts","webpack:///src/lib/settings/src/providers/routing/country-resolver.ts","webpack:///src/lib/settings/src/providers/routing/global-settings-resolver.ts","webpack:///src/lib/settings/src/providers/routing/payment-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/profile-resolver.ts","webpack:///src/lib/settings/src/providers/routing/role-resolver.ts","webpack:///src/lib/settings/src/providers/routing/shipping-method-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-category-resolver.ts","webpack:///src/lib/settings/src/providers/routing/tax-rate-resolver.ts","webpack:///src/lib/settings/src/settings.routes.ts","webpack:///src/lib/settings/src/settings.module.ts"],"names":["ZoneMemberControlsDirective","templateRef","ZoneMemberListHeaderDirective","members","selectedMemberIds","selectionChange","filterTerm","isMemberSelected","member","this","indexOf","id","term","toLocaleLowerCase","filter","m","name","includes","code","length","areAllSelected","emit","map","v","toggleSelectMember","toggleSelectAll","dataService","currentMembers","currentMemberIds","availableCountries$","settings","getCountries","mapStream","data","countries","items","pipe","c","resolveWith","readonly","permissionChange","buildGrid","permission","value","defs","some","d","activePermissions","def","crudGroups","Map","nonCrud","crudRe","permissionDefinitions","test","groupName","match","existing","get","push","set","assignable","gridData","label","description","permissions","Array","from","entries","extractCrudDescription","replace","router","route","serverConfigService","changeDetector","formBuilder","notificationService","super","selectedRoles","selectedRolePermissions","selectedChannelId","customFields","getCustomFieldConfig","detailForm","group","emailAddress","required","firstName","lastName","password","roles","reduce","hash","field","Object","values","init","administrator$","entity$","allRoles$","administrator","getRoles","item","i","CUSTOMER_ROLE_CODE","client","userStatus","single$","subscribe","UpdateAdministrator","rolesSelect","disable","getPermissionDefinitions","destroy","buildPermissionsMap","getActivePermissions","input","active","channels","channelId","formValue","roleIds","role","createAdministrator","success","entity","markAsPristine","markForCheck","navigate","relativeTo","err","error","take","mergeMap","updateAdministrator","languageCode","patchValue","user","customFieldsGroup","fieldDef","key","control","passwordControl","setValidators","permissionsControl","channelIdPermissionsMap","channelIdCodeMap","channel","permissionSet","Set","forEach","p","add","keys","permissionsHash","has","channelCode","rolesChanged","modalService","setQueryFn","args","getAdministrators","administrators","dialog","title","body","buttons","type","returnValue","switchMap","res","deleteAdministrator","refresh","setPageNumber","setItemsPerPage","currencyCodes","updatePermission","SuperAdmin","UpdateChannel","CreateChannel","token","pricesIncludeTax","currencyCode","defaultShippingZoneId","defaultLanguageCode","defaultTaxZoneId","zones$","getZones","mapSingle","zones","availableLanguageCodes$","getAvailableLanguages","dirty","valid","createChannel","auth","currentUser","me","updateUserChannels","__typename","message","updateChannel","generateToken","defaultShippingZone","defaultTaxZone","DEFAULT_CHANNEL_CODE","codeControl","randomString","Math","random","toString","substr","refresh$","Subject","channels$","startWith","getChannels","response","deleteChannel","next","UpdateSettings","UpdateCountry","enabled","country$","combineLatest","languageCode$","country","translatable","updatedFields","defaultTranslation","createCountry","updateCountry","currentTranslation","setLanguage","searchTerm","destroy$","countries$","valueChanges","stream$","tap","countriesWithZones$","z","find","complete","countryId","deleteCountry","result","DELETED","hasOwnProperty","languageCodes","UpdateGlobalSettings","availableLanguages","trackInventory","outOfStockThreshold","languagesSelect","updateGlobalSettings","refreshGlobalSettings","checkers","handlers","UpdatePaymentMethod","checker","handler","getPaymentMethodOperations","paymentMethodEligibilityCheckers","paymentMethodHandlers","selectedCheckerDefinition","selectedHandlerDefinition","currentCode","nameValue","pristine","setValue","normalizeString","configArgsGroup","controls","selectedChecker","formControl","clearValidators","updateValueAndValidity","onlySelf","markAsDirty","selectedHandler","createPaymentMethod","updatePaymentMethod","paymentMethod","a","getPaymentMethods","refetchOnChannelChange","paymentMethods","paymentMethodId","showModalAndDelete","r","deletePaymentMethod","updateActiveAdministrator","save","channelIds","role$","change","currentPermissions","newValue","unique","createRole","updateRole","detectChanges","updateCode","setPermission","initialLimit","displayLimit","ngOnInit","visibleRoles$","items$","SUPER_ADMIN_ROLE_CODE","deleteRole","okToRun","testDataUpdated","runTest","localStorageService","orderLinesChange","lines","sum","l","unitPriceWithTax","quantity","loadFromLocalStorage","getActiveChannel","activeChannel","addToLines","productVariantId","productVariantName","preview","productAsset","sku","priceWithTax","persistToLocalStorage","line","setForCurrentLocation","getForCurrentLocation","selectResult","addressChange","getAvailableCountries","storedValue","initialValue","city","countryCode","postalCode","province","form","subscription","unsubscribe","calculators","fulfillmentHandlers","UpdateShippingMethod","fetchTestResult$","fulfillmentHandler","calculator","shippingMethod","getShippingMethodOperations","shippingEligibilityCheckers","shippingCalculators","selectedCalculatorDefinition","activeChannel$","testResult$","address","selectedCalculator","of","undefined","shippingAddress","streetLine1","testShippingMethod","merge","takeUntil","getUpdatedShippingMethod","createShippingMethod","updateShippingMethod","event","testOrderLines","testAddress","formGroup","customFieldConfig","fulfillmentHandlerCode","getShippingMethods","shippingMethods","testEligibleShippingMethods","deleteShippingMethod","UpdateTaxCategory","isDefault","taxCategory$","createTaxCategory","taxCategory","updateTaxCategory","queryResult","getTaxCategories","taxCategories$","taxCategories","deleteTaxCategory","ref","refetch","UpdateTaxRate","taxCategoryId","zoneId","customerGroupId","categoryId","createTaxRate","taxRate","updateTaxRate","category","zone","customerGroup","getTaxRates","taxRates","deleteTaxRate","ZoneDetailDialogComponent","activeZoneId$","paramMap","pm","distinctUntilChanged","activeZone$","activeZoneId","fromComponent","locals","createZone","memberIds","deleteZone","errorMessage","updateZone","params","snapshot","contents","queryParamsHandling","zoneName","size","addMembersToZone","mapTo","countryCount","removeMembersFromZone","createdAt","updatedAt","getAdministrator","USD","getChannel","translations","getCountry","getGlobalSettings","globalSettings","getPaymentMethod","getActiveAdministrator","activeAdministrator","getRole","getShippingMethod","getTaxCategory","getTaxRate","settingsRoutes","path","component","resolve","canDeactivate","breadcrumb","administratorBreadcrumb","channelBreadcrumb","roleBreadcrumb","taxCategoryBreadcrumb","taxRateBreadcrumb","countryBreadcrumb","shippingMethodBreadcrumb","paymentMethodBreadcrumb","breadcrumbKey","getName","admin","promotion","method","SettingsModule","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberControls]',\n})\nexport class ZoneMemberControlsDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberListHeader]',\n})\nexport class ZoneMemberListHeaderDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","<div class=\"members-header\">\n    <ng-container *ngIf=\"headerTemplate\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate.templateRef\"></ng-container>\n    </ng-container>\n    <input\n        type=\"text\"\n        [placeholder]=\"'settings.filter-by-member-name' | translate\"\n        [(ngModel)]=\"filterTerm\"\n    />\n</div>\n<vdr-data-table\n    [items]=\"filteredMembers()\"\n    [allSelected]=\"areAllSelected()\"\n    [isRowSelectedFn]=\"(['UpdateSettings', 'UpdateZone'] | hasPermission) && isMemberSelected\"\n    (rowSelectChange)=\"toggleSelectMember($event)\"\n    (allSelectChange)=\"toggleSelectAll()\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-member=\"item\">\n        <td class=\"left align-middle\">{{ member.code }}</td>\n        <td class=\"left align-middle\">{{ member.name }}</td>\n        <td class=\"left align-middle\">\n            <clr-icon\n                [class.is-success]=\"member.enabled\"\n                [attr.shape]=\"member.enabled ? 'check' : 'times'\"\n            ></clr-icon>\n        </td>\n        <td class=\"right align-middle\">\n            <ng-container *ngIf=\"controlsTemplate\">\n                <ng-container\n                    *ngTemplateOutlet=\"controlsTemplate.templateRef; context: { member: member }\"\n                ></ng-container>\n            </ng-container>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\nimport { GetZones } from '@vendure/admin-ui/core';\n\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\n\nexport type ZoneMember = { id: string; name: string; code: string };\n\n@Component({\n    selector: 'vdr-zone-member-list',\n    templateUrl: './zone-member-list.component.html',\n    styleUrls: ['./zone-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneMemberListComponent {\n    @Input() members: ZoneMember[] = [];\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\n    filterTerm = '';\n\n    filteredMembers(): ZoneMember[] {\n        if (this.filterTerm !== '') {\n            const term = this.filterTerm.toLocaleLowerCase();\n            return this.members.filter(\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\n            );\n        } else {\n            return this.members;\n        }\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map(v => v.id));\n        }\n    }\n\n    toggleSelectMember(member: ZoneMember) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\n\n<vdr-zone-member-list\n    [members]=\"availableCountries$ | async\"\n    [selectedMemberIds]=\"selectedMemberIds\"\n    (selectionChange)=\"selectedMemberIds = $event\"\n>\n</vdr-zone-member-list>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-add-country-to-zone-dialog',\n    templateUrl: './add-country-to-zone-dialog.component.html',\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    zoneName: string;\n    currentMembers: GetZones.Members[] = [];\n    availableCountries$: Observable<GetCountryList.Items[]>;\n    selectedMemberIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        const currentMemberIds = this.currentMembers.map(m => m.id);\n        this.availableCountries$ = this.dataService.settings\n            .getCountries(999)\n            .mapStream(data => data.countries.items)\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedMemberIds);\n    }\n}\n","<table class=\"table\">\n    <tbody>\n        <tr *ngFor=\"let section of gridData\">\n            <td class=\"permission-group left\">\n                <div><strong>{{ section.label | translate }}</strong></div>\n                <small>{{ section.description | translate }}</small><br>\n                <button *ngIf=\"1 < section.permissions.length && !readonly\" class=\"btn btn-sm btn-link\" (click)=\"toggleAll(section.permissions)\">\n                    {{ 'common.toggle-all' | translate }}\n                </button>\n            </td>\n            <td *ngFor=\"let permission of section.permissions\" [attr.colspan]=\"section.permissions.length === 1 ? 4 : 1\">\n                <vdr-select-toggle\n                    size=\"small\"\n                    [title]=\"permission.description\"\n                    [label]=\"permission.name\"\n                    [disabled]=\"readonly\"\n                    [selected]=\"activePermissions?.includes(permission.name)\"\n                    (selectedChange)=\"setPermission(permission.name, $event)\"\n                ></vdr-select-toggle>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n        <input\n            id=\"emailAddress\"\n            type=\"text\"\n            formControlName=\"emailAddress\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n        <input\n            id=\"firstName\"\n            type=\"text\"\n            formControlName=\"firstName\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n        <input\n            id=\"lastName\"\n            type=\"text\"\n            formControlName=\"lastName\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <vdr-form-field\n        *ngIf=\"!(isNew$ | async) && ('UpdateAdministrator' | hasPermission)\"\n        [label]=\"'settings.password' | translate\"\n        for=\"password\"\n        [readOnlyToggle]=\"true\"\n    >\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"Administrator\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n    <label class=\"clr-control-label\">{{ 'settings.roles' | translate }}</label>\n    <ng-select\n        [items]=\"allRoles$ | async\"\n        [multiple]=\"true\"\n        [hideSelected]=\"true\"\n        formControlName=\"roles\"\n        (change)=\"rolesChanged($event)\"\n        bindLabel=\"description\"\n    ></ng-select>\n\n    <ul class=\"nav\" role=\"tablist\">\n        <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\n            <button\n                [id]=\"channel.channelId\"\n                (click)=\"selectedChannelId = channel.channelId\"\n                class=\"btn btn-link nav-link\"\n                [class.active]=\"selectedChannelId === channel.channelId\"\n                [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\n                type=\"button\"\n            >\n                {{ channel.channelCode | channelCodeToLabel | translate }}\n            </button>\n        </li>\n    </ul>\n    <vdr-permission-grid\n        [activePermissions]=\"getPermissionsForSelectedChannel()\"\n        [permissionDefinitions]=\"permissionDefinitions\"\n        [readonly]=\"true\"\n    ></vdr-permission-grid>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\nimport {\n    Administrator,\n    CreateAdministratorInput,\n    GetAdministrator,\n    LanguageCode,\n    Permission,\n    Role,\n    RoleFragment,\n    UpdateAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport interface PermissionsByChannel {\n    channelId: string;\n    channelCode: string;\n    permissions: { [K in Permission]: boolean };\n}\n\n@Component({\n    selector: 'vdr-admin-detail',\n    templateUrl: './admin-detail.component.html',\n    styleUrls: ['./admin-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminDetailComponent\n    extends BaseDetailComponent<GetAdministrator.Administrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    administrator$: Observable<GetAdministrator.Administrator>;\n    permissionDefinitions: PermissionDefinition[];\n    allRoles$: Observable<Role.Fragment[]>;\n    selectedRoles: Role.Fragment[] = [];\n    detailForm: FormGroup;\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\n    selectedChannelId: string | null = null;\n\n    getAvailableChannels(): PermissionsByChannel[] {\n        return Object.values(this.selectedRolePermissions);\n    }\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            roles: [[]],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.administrator$ = this.entity$;\n        this.allRoles$ = this.dataService.administrator\n            .getRoles(999)\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\n                const rolesSelect = this.detailForm.get('roles');\n                if (rolesSelect) {\n                    rolesSelect.disable();\n                }\n            }\n        });\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    rolesChanged(roles: Role[]) {\n        this.buildPermissionsMap();\n    }\n\n    getPermissionsForSelectedChannel(): string[] {\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\n            return Object.entries(input)\n                .filter(([permission, active]) => active)\n                .map(([permission, active]) => permission);\n        }\n        if (this.selectedChannelId) {\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\n            if (selectedChannel) {\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\n                return getActivePermissions(permissionMap);\n            }\n        }\n        const channels = Object.values(this.selectedRolePermissions);\n        if (0 < channels.length) {\n            this.selectedChannelId = channels[0].channelId;\n            return getActivePermissions(channels[0].permissions);\n        }\n        return [];\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const administrator: CreateAdministratorInput = {\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            password: formValue.password,\n            customFields: formValue.customFields,\n            roleIds: formValue.roles.map(role => role.id),\n        };\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Administrator',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Administrator',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.administrator$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateAdministratorInput = {\n                        id,\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                        roleIds: formValue.roles.map(role => role.id),\n                    };\n                    return this.dataService.administrator.updateAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n            roles: administrator.user.roles,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        const passwordControl = this.detailForm.get('password');\n        if (passwordControl) {\n            if (!administrator.id) {\n                passwordControl.setValidators([Validators.required]);\n            } else {\n                passwordControl.setValidators([]);\n            }\n        }\n        this.buildPermissionsMap();\n    }\n\n    private buildPermissionsMap() {\n        const permissionsControl = this.detailForm.get('roles');\n        if (permissionsControl) {\n            const roles: RoleFragment[] = permissionsControl.value;\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\n            const channelIdCodeMap = new Map<string, string>();\n\n            for (const role of roles) {\n                for (const channel of role.channels) {\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\n                    const permissionSet = channelPermissions || new Set<Permission>();\n\n                    role.permissions.forEach(p => permissionSet.add(p));\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\n                    channelIdCodeMap.set(channel.id, channel.code);\n                }\n            }\n\n            this.selectedRolePermissions = {} as any;\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\n                // tslint:disable-next-line:no-non-null-assertion\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\n                }\n                this.selectedRolePermissions[channelId] = {\n                    // tslint:disable:no-non-null-assertion\n                    channelId,\n                    channelCode: channelIdCodeMap.get(channelId)!,\n                    permissions: permissionsHash,\n                    // tslint:enable:no-non-null-assertion\n                };\n            }\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'admin.create-new-administrator' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'settings.first-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.last-name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.email-address' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-administrator=\"item\">\n        <td class=\"left align-middle\">{{ administrator.firstName }}</td>\n        <td class=\"left align-middle\">{{ administrator.lastName }}</td>\n        <td class=\"left align-middle\">{{ administrator.emailAddress }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', administrator.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteAdministrator(administrator)\"\n                        [disabled]=\"!('DeleteAdministrator' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetAdministrators,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-administrator-list',\n    templateUrl: './administrator-list.component.html',\n    styleUrls: ['./administrator-list.component.scss'],\n})\nexport class AdministratorListComponent extends BaseListComponent<\n    GetAdministrators.Query,\n    GetAdministrators.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\n            (data) => data.administrators,\n        );\n    }\n\n    deleteAdministrator(administrator: GetAdministrators.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-administrator'),\n                body: `${administrator.firstName} ${administrator.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((res) =>\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.refresh();\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"channel-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"['SuperAdmin', 'UpdateChannel']\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n        <input id=\"code\" type=\"text\" [readonly]=\"!(updatePermission | hasPermission)\" formControlName=\"code\" />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.channel-token' | translate\" for=\"token\">\n        <input id=\"token\" type=\"text\" [readonly]=\"!(updatePermission | hasPermission)\" formControlName=\"token\" />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.currency' | translate\" for=\"defaultTaxZoneId\">\n        <select\n            clrSelect\n            name=\"currencyCode\"\n            formControlName=\"currencyCode\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let code of currencyCodes\" [value]=\"code\">{{ code | localeCurrencyName }}</option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.default-language' | translate\" for=\"defaultLanguage\">\n        <select\n            clrSelect\n            name=\"defaultLanguageCode\"\n            formControlName=\"defaultLanguageCode\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let languageCode of availableLanguageCodes$ | async\" [value]=\"languageCode\">\n                {{ 'lang.' + languageCode | translate }} ({{ languageCode | uppercase }})\n            </option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.prices-include-tax' | translate\" for=\"pricesIncludeTax\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"pricesIncludeTax\"\n                formControlName=\"pricesIncludeTax\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.default-tax-zone' | translate\" for=\"defaultTaxZoneId\">\n        <select\n            clrSelect\n            name=\"defaultTaxZoneId\"\n            formControlName=\"defaultTaxZoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n    <clr-alert\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultTaxZoneId\"\n        clrAlertType=\"danger\"\n        [clrAlertClosable]=\"false\"\n    >\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'error.no-default-tax-zone-set' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <vdr-form-field [label]=\"'settings.default-shipping-zone' | translate\" for=\"defaultShippingZoneId\">\n        <select\n            clrSelect\n            name=\"defaultShippingZoneId\"\n            formControlName=\"defaultShippingZoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n    <clr-alert\n        *ngIf=\"detailForm.value.code && !detailForm.value.defaultShippingZoneId\"\n        clrAlertType=\"warning\"\n        [clrAlertClosable]=\"false\"\n    >\n        <clr-alert-item>\n            <span class=\"alert-text\">\n                {{ 'error.no-default-shipping-zone-set' | translate }}\n            </span>\n        </clr-alert-item>\n    </clr-alert>\n\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"Channel\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\nimport {\n    Channel,\n    CreateChannelInput,\n    CurrencyCode,\n    GetZones,\n    LanguageCode,\n    UpdateChannelInput,\n} from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\n@Component({\n    selector: 'vdr-channel-detail',\n    templateUrl: './channel-detail.component.html',\n    styleUrls: ['./channel-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelDetailComponent\n    extends BaseDetailComponent<Channel.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    zones$: Observable<GetZones.Zones[]>;\n    detailForm: FormGroup;\n    currencyCodes = Object.values(CurrencyCode);\n    availableLanguageCodes$: Observable<LanguageCode[]>;\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        protected serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Channel');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            token: ['', Validators.required],\n            pricesIncludeTax: [false],\n            currencyCode: [''],\n            defaultShippingZoneId: ['', Validators.required],\n            defaultLanguageCode: [],\n            defaultTaxZoneId: ['', Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input: CreateChannelInput = {\n            code: formValue.code,\n            token: formValue.token,\n            defaultLanguageCode: formValue.defaultLanguageCode,\n            pricesIncludeTax: formValue.pricesIncludeTax,\n            currencyCode: formValue.currencyCode,\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\n            customFields: formValue.customFields,\n        };\n        this.dataService.settings\n            .createChannel(input)\n            .pipe(\n                mergeMap(({ createChannel }) =>\n                    this.dataService.auth.currentUser().single$.pipe(\n                        map(({ me }) => ({\n                            me,\n                            createChannel,\n                        })),\n                    ),\n                ),\n                mergeMap(({ me, createChannel }) =>\n                    // tslint:disable-next-line:no-non-null-assertion\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\n                ),\n            )\n            .subscribe(data => {\n                switch (data.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(data.message);\n                        break;\n                }\n            });\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(channel => {\n                    const input = {\n                        id: channel.id,\n                        code: formValue.code,\n                        pricesIncludeTax: formValue.pricesIncludeTax,\n                        currencyCode: formValue.currencyCode,\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\n                        defaultLanguageCode: formValue.defaultLanguageCode,\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\n                        customFields: formValue.customFields,\n                    } as UpdateChannelInput;\n                    return this.dataService.settings.updateChannel(input);\n                }),\n            )\n            .subscribe(({ updateChannel }) => {\n                switch (updateChannel.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-update-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(updateChannel.message);\n                }\n            });\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            code: entity.code,\n            token: entity.token || this.generateToken(),\n            pricesIncludeTax: entity.pricesIncludeTax,\n            currencyCode: entity.currencyCode,\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\n            defaultLanguageCode: entity.defaultLanguageCode,\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\n            const codeControl = this.detailForm.get('code');\n            if (codeControl) {\n                codeControl.disable();\n            }\n        }\n    }\n\n    private generateToken(): string {\n        const randomString = () => Math.random().toString(36).substr(3, 10);\n        return `${randomString()}${randomString()}`;\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"channel-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'SuperAdmin'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-channel' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table [items]=\"channels$ | async\">\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-channel=\"item\">\n        <td class=\"left align-middle\">\n            <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n            {{ channel.code | channelCodeToLabel | translate }}\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', channel.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultChannel(channel.code)\">\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteChannel(channel.id)\"\n                        [disabled]=\"!(['SuperAdmin', 'DeleteChannel'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\n\nimport { Channel } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-channel-list',\n    templateUrl: './channel-list.component.html',\n    styleUrls: ['./channel-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelListComponent {\n    channels$: Observable<Channel.Fragment[]>;\n    private refresh$ = new Subject();\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        this.channels$ = this.refresh$.pipe(\n            startWith(1),\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    deleteChannel(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\n                mergeMap(() => this.dataService.auth.currentUser().single$),\n                // tslint:disable-next-line:no-non-null-assertion\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Channel',\n                    });\n                    this.refresh$.next(1);\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Channel',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"country-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                *vdrIfPermissions=\"updatePermission\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                formControlName=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n</form>\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    Country,\n    CreateCountryInput,\n    createUpdatedTranslatable,\n    DataService,\n    findTranslation,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCountryInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-detail',\n    templateUrl: './country-detail.component.html',\n    styleUrls: ['./country-detail.component.scss'],\n})\nexport class CountryDetailComponent\n    extends BaseDetailComponent<Country.Fragment>\n    implements OnInit, OnDestroy {\n    country$: Observable<Country.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            enabled: [true],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.country$ = this.entity$;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.createCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.updateCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(country, languageCode);\n\n        this.detailForm.patchValue({\n            code: country.code,\n            name: currentTranslation ? currentTranslation.name : '',\n            enabled: country.enabled,\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <input\n            type=\"text\"\n            name=\"searchTerm\"\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\n            class=\"search-input\"\n        />\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-country' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"countriesWithZones$ | async\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-country=\"item\">\n        <td class=\"left align-middle\">{{ country.code }}</td>\n        <td class=\"left align-middle\">{{ country.name }}</td>\n        <td class=\"left align-middle\">\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\n            <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\n            </a>\n        </td>\n        <td class=\"left align-middle\">\n            <clr-icon\n                [class.is-success]=\"country.enabled\"\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\n            ></clr-icon>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', country.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteCountry(country.id)\"\n                        vdrDropdownItem\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCountryList,\n    GetZones,\n    ModalService,\n    NotificationService,\n    Zone,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-list',\n    templateUrl: './country-list.component.html',\n    styleUrls: ['./country-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountryListComponent implements OnInit, OnDestroy {\n    searchTerm = new FormControl('');\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\n    zones$: Observable<GetZones.Zones[]>;\n\n    private countries: GetCountryList.Items[] = [];\n    private destroy$ = new Subject();\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        const countries$ = this.searchTerm.valueChanges.pipe(\n            startWith(null),\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).stream$),\n            tap(data => (this.countries = data.countries.items)),\n            map(data => data.countries.items),\n        );\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\n            map(([countries, zones]) => {\n                return countries.map(country => ({\n                    ...country,\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\n                }));\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    deleteCountry(countryId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-country'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\n                ),\n            )\n            .subscribe(\n                response => {\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Country',\n                        });\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\n                    } else {\n                        this.notificationService.error(response.deleteCountry.message || '');\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\n        return input.hasOwnProperty('id');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"global-settings-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            *vdrIfPermissions=\"updatePermission\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.available-languages' | translate\" for=\"availableLanguages\">\n        <ng-select\n            [items]=\"languageCodes\"\n            [addTag]=\"false\"\n            [hideSelected]=\"true\"\n            multiple=\"true\"\n            appendTo=\"body\"\n            formControlName=\"availableLanguages\"\n        >\n            <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                <span class=\"ng-value-icon left\" (click)=\"clear.call(null, item)\" aria-hidden=\"true\">\n                    ×\n                </span>\n                <span class=\"ng-value-label\">{{ 'lang.' + item | translate }} ({{ item }})</span>\n            </ng-template>\n            <ng-template ng-option-tmp let-item=\"item\">\n                {{ 'lang.' + item | translate }} ({{ item }})\n            </ng-template>\n        </ng-select>\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.global-out-of-stock-threshold' | translate\"\n        for=\"outOfStockThreshold\"\n        [tooltip]=\"'settings.global-out-of-stock-threshold-tooltip' | translate\"\n    >\n        <input\n            id=\"outOfStockThreshold\"\n            type=\"number\"\n            formControlName=\"outOfStockThreshold\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'settings.track-inventory-default' | translate\"\n        for=\"enabled\"\n        [tooltip]=\"'catalog.track-inventory-tooltip' | translate\"\n    >\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                name=\"enabled\"\n                formControlName=\"trackInventory\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"GlobalSettings\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent } from '@vendure/admin-ui/core';\nimport { CustomFieldConfig, GlobalSettings, LanguageCode, Permission } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-global-settings',\n    templateUrl: './global-settings.component.html',\n    styleUrls: ['./global-settings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    languageCodes = Object.values(LanguageCode);\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\n        this.detailForm = this.formBuilder.group({\n            availableLanguages: [''],\n            trackInventory: false,\n            outOfStockThreshold: [0, Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\n                const languagesSelect = this.detailForm.get('availableLanguages');\n                if (languagesSelect) {\n                    languagesSelect.disable();\n                }\n            }\n        });\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n\n        this.dataService.settings\n            .updateGlobalSettings(this.detailForm.value)\n            .pipe(\n                tap(({ updateGlobalSettings }) => {\n                    switch (updateGlobalSettings.__typename) {\n                        case 'GlobalSettings':\n                            this.detailForm.markAsPristine();\n                            this.changeDetector.markForCheck();\n                            this.notificationService.success(_('common.notify-update-success'), {\n                                entity: 'Settings',\n                            });\n                            break;\n                        case 'ChannelDefaultLanguageError':\n                            this.notificationService.error(updateGlobalSettings.message);\n                    }\n                }),\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\n            )\n            .subscribe();\n    }\n\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            availableLanguages: entity.availableLanguages,\n            trackInventory: entity.trackInventory,\n            outOfStockThreshold: entity.outOfStockThreshold,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"payment-method-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            [disabled]=\"detailForm.pristine || detailForm.invalid\"\n            (click)=\"create()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedHandler\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as paymentMethod\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            (input)=\"updateCode(paymentMethod.code, $event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-rich-text-editor\n        formControlName=\"description\"\n        [readonly]=\"!(updatePermission | hasPermission)\"\n        [label]=\"'common.description' | translate\"\n    ></vdr-rich-text-editor>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"description\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"enabled\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n\n    <div class=\"clr-row mt4\">\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.payment-eligibility-checker' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                [operation]=\"selectedChecker\"\n                [operationDefinition]=\"selectedCheckerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"removeChecker()\"\n                formControlName=\"checker\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let checker of checkers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectChecker(checker)\"\n                        >\n                            {{ checker.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.payment-handler' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedHandler && selectedHandlerDefinition\"\n                [operation]=\"selectedHandler\"\n                [operationDefinition]=\"selectedHandlerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"removeHandler()\"\n                formControlName=\"handler\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedHandler || !selectedHandlerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let handler of handlers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectHandler(handler)\"\n                        >\n                            {{ handler.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    ConfigArgDefinition,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreatePaymentMethodInput,\n    DataService,\n    encodeConfigArgValue,\n    getConfigArgValue,\n    NotificationService,\n    PaymentMethod,\n    Permission,\n    ServerConfigService,\n    toConfigurableOperationInput,\n    UpdatePaymentMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-detail',\n    templateUrl: './payment-method-detail.component.html',\n    styleUrls: ['./payment-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodDetailComponent\n    extends BaseDetailComponent<PaymentMethod.Fragment>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    checkers: ConfigurableOperationDefinition[] = [];\n    handlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedHandler?: ConfigurableOperation | null;\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            enabled: [true, Validators.required],\n            checker: {},\n            handler: {},\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.settings.getPaymentMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.paymentMethodEligibilityCheckers;\n            this.handlers = data.paymentMethodHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\n                c => c.code === (entity.handler && entity.handler.code),\n            );\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    configArgsIsPopulated(): boolean {\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\n        if (!configArgsGroup) {\n            return false;\n        }\n        return 0 < Object.keys(configArgsGroup.controls).length;\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectHandler(handler: ConfigurableOperationDefinition) {\n        this.selectedHandlerDefinition = handler;\n        this.selectedHandler = configurableDefinitionToInstance(handler);\n        const formControl = this.detailForm.get('handler');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedHandler);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    removeChecker() {\n        this.selectedChecker = null;\n        this.detailForm.markAsDirty();\n    }\n\n    removeHandler() {\n        this.selectedHandler = null;\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreatePaymentMethodInput = {\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                    };\n                    return this.dataService.settings.createPaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdatePaymentMethodInput = {\n                        id,\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                    };\n                    return this.dataService.settings.updatePaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\n        this.detailForm.patchValue({\n            name: paymentMethod.name,\n            code: paymentMethod.code,\n            description: paymentMethod.description,\n            enabled: paymentMethod.enabled,\n            checker: paymentMethod.checker || {},\n            handler: paymentMethod.handler || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = paymentMethod.checker && {\n                code: paymentMethod.checker.code,\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedHandler) {\n            this.selectedHandler = paymentMethod.handler && {\n                code: paymentMethod.handler.code,\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"payment-method-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreatePaymentMethod']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-payment-method' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-paymentMethod=\"item\">\n        <td class=\"left align-middle\">{{ paymentMethod.code }}</td>\n        <td class=\"left align-middle\">{{ paymentMethod.enabled }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', paymentMethod.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deletePaymentMethod(paymentMethod.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeletePaymentMethod'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetPaymentMethodList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-list',\n    templateUrl: './payment-method-list.component.html',\n    styleUrls: ['./payment-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodListComponent extends BaseListComponent<\n    GetPaymentMethodList.Query,\n    GetPaymentMethodList.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\n            data => data.paymentMethods,\n        );\n    }\n\n    deletePaymentMethod(paymentMethodId: string) {\n        this.showModalAndDelete(paymentMethodId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-payment-method'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res =>\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\n                ),\n                map(res => res.deletePaymentMethod),\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'settings.email-address' | translate\" for=\"emailAddress\">\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n    </vdr-form-field>\n    <vdr-form-field *ngIf=\"isNew$ | async\" [label]=\"'settings.password' | translate\" for=\"password\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.password' | translate\" for=\"password\" [readOnlyToggle]=\"true\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"Administrator\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    GetActiveAdministrator,\n    LanguageCode,\n    NotificationService,\n    ServerConfigService,\n    UpdateActiveAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateActiveAdministratorInput = {\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"role-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdateAdministrator'\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\">\n        <input\n            id=\"description\"\n            type=\"text\"\n            formControlName=\"description\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n            (input)=\"updateCode($event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"'UpdateAdministrator' | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.channel' | translate\">\n        <vdr-channel-assignment-control\n            formControlName=\"channelIds\"\n            [vdrDisabled]=\"!('UpdateAdministrator' | hasPermission)\"\n        ></vdr-channel-assignment-control>\n    </vdr-form-field>\n    <label>{{ 'settings.permissions' | translate }}</label>\n    <vdr-permission-grid\n        [permissionDefinitions]=\"permissionDefinitions\"\n        [activePermissions]=\"detailForm.get('permissions')?.value\"\n        (permissionChange)=\"setPermission($event)\"\n        [readonly]=\"!('UpdateAdministrator' | hasPermission)\"\n    ></vdr-permission-grid>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"role-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateAdministrator'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-role' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"visibleRoles$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.description' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.channel' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.permissions' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-role=\"item\">\n        <td class=\"left align-middle\">{{ role.description }}</td>\n        <td class=\"left align-middle\"><span *ngIf=\"!isDefaultRole(role)\">{{ role.code }}</span></td>\n        <td class=\"left align-middle\">\n            <ng-container *ngIf=\"!isDefaultRole(role)\">\n                <vdr-chip *ngFor=\"let channel of role.channels\">\n                    <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                    {{ channel.code | channelCodeToLabel | translate }}\n                </vdr-chip>\n            </ng-container>\n        </td>\n        <td class=\"left align-middle\">\n            <ng-container *ngIf=\"!isDefaultRole(role); else defaultRole\">\n                <vdr-chip *ngFor=\"let permission of role.permissions |  slice: 0:displayLimit[role.id] || 3\">{{ permission }}</vdr-chip>\n                <button\n                    class=\"btn btn-sm btn-secondary btn-icon\"\n                    *ngIf=\"role.permissions.length > initialLimit\"\n                    (click)=\"toggleDisplayLimit(role)\"\n                >\n                    <ng-container *ngIf=\"(displayLimit[role.id] || 0) < role.permissions.length; else collapse\">\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ role.permissions.length - initialLimit }}\n                    </ng-container>\n                    <ng-template #collapse>\n                        <clr-icon shape=\"minus\"></clr-icon>\n                    </ng-template>\n                </button>\n            </ng-container>\n            <ng-template #defaultRole>\n                <span class=\"default-role-label\">{{ 'settings.default-role-label' | translate }}</span>\n            </ng-template>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                *ngIf=\"!isDefaultRole(role)\"\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', role.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger [disabled]=\"isDefaultRole(role)\">\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteRole(role.id)\"\n                        [disabled]=\"!('SuperAdmin' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-list',\n    templateUrl: './role-list.component.html',\n    styleUrls: ['./role-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    visibleRoles$: Observable<GetRoles.Items[]>;\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\n            data => data.roles,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.visibleRoles$ = this.items$.pipe(\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\n        );\n    }\n\n    toggleDisplayLimit(role: GetRoles.Items) {\n        if (this.displayLimit[role.id] === role.permissions.length) {\n            this.displayLimit[role.id] = this.initialLimit;\n        } else {\n            this.displayLimit[role.id] = role.permissions.length;\n        }\n    }\n\n    isDefaultRole(role: Role): boolean {\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\n    }\n\n    deleteRole(id: string) {\n        this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-role'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Role',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n}\n","<div class=\"test-result card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\" *ngFor=\"let quote of testResult\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.shipping-method' | translate\">\n                {{ quote.name }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data [label]=\"'common.price' | translate\">\n                    {{ quote.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data [label]=\"'common.price-with-tax' | translate\">\n                    {{ quote.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree *ngIf=\"quote.metadata\" [value]=\"quote.metadata\"></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-block\" *ngIf=\"testResult?.length === 0\">\n        <clr-icon shape=\"ban\" class=\"is-solid error\"></clr-icon>\n        {{ 'settings.no-eligible-shipping-methods' | translate }}\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-methods' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-eligibility-test-result',\n    templateUrl: './shipping-eligibility-test-result.component.html',\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingEligibilityTestResultComponent {\n    @Input() testResult: ShippingMethodQuote[];\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-order' | translate }}\n    </div>\n    <table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>{{ 'order.product-name' | translate }}</th>\n                <th>{{ 'order.product-sku' | translate }}</th>\n                <th>{{ 'order.unit-price' | translate }}</th>\n                <th>{{ 'order.quantity' | translate }}</th>\n                <th>{{ 'order.total' | translate }}</th>\n            </tr>\n        </thead>\n        <tr *ngFor=\"let line of lines\" class=\"order-line\">\n            <td class=\"align-middle thumb\">\n                <img [src]=\"line.preview + '?preset=tiny'\" />\n            </td>\n            <td class=\"align-middle name\">{{ line.name }}</td>\n            <td class=\"align-middle sku\">{{ line.sku }}</td>\n            <td class=\"align-middle unit-price\">\n                {{ line.unitPriceWithTax | localeCurrency: currencyCode }}\n            </td>\n            <td class=\"align-middle quantity\">\n                <input\n                    [(ngModel)]=\"line.quantity\"\n                    (change)=\"updateQuantity()\"\n                    type=\"number\"\n                    max=\"9999\"\n                    min=\"1\"\n                />\n                <button class=\"icon-button\" (click)=\"removeLine(line)\">\n                    <clr-icon shape=\"trash\"></clr-icon>\n                </button>\n            </td>\n            <td class=\"align-middle total\">\n                {{ (line.unitPriceWithTax * line.quantity) | localeCurrency: currencyCode }}\n            </td>\n        </tr>\n        <tr class=\"sub-total\">\n            <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>{{ subTotal | localeCurrency: currencyCode }}</td>\n        </tr>\n    </table>\n\n    <ng-template #emptyPlaceholder>\n        <div class=\"card-block empty-placeholder\">\n            <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\n            <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\n        </div>\n    </ng-template>\n    <div class=\"card-block\">\n        <vdr-product-selector (productSelected)=\"selectResult($event)\"> </vdr-product-selector>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n    CurrencyCode,\n    DataService,\n    LocalStorageService,\n    ProductSelectorSearch,\n} from '@vendure/admin-ui/core';\n\nexport interface TestOrderLine {\n    id: string;\n    name: string;\n    preview: string;\n    sku: string;\n    unitPriceWithTax: number;\n    quantity: number;\n}\n\n@Component({\n    selector: 'vdr-test-order-builder',\n    templateUrl: './test-order-builder.component.html',\n    styleUrls: ['./test-order-builder.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestOrderBuilderComponent implements OnInit {\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\n    lines: TestOrderLine[] = [];\n    currencyCode: CurrencyCode;\n    get subTotal(): number {\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\n    }\n\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\n\n    ngOnInit() {\n        this.lines = this.loadFromLocalStorage();\n        if (this.lines) {\n            this.orderLinesChange.emit(this.lines);\n        }\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\n            this.currencyCode = result.activeChannel.currencyCode;\n        });\n    }\n\n    selectResult(result: ProductSelectorSearch.Items) {\n        if (result) {\n            this.addToLines(result);\n        }\n    }\n\n    private addToLines(result: ProductSelectorSearch.Items) {\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\n            this.lines.push({\n                id: result.productVariantId,\n                name: result.productVariantName,\n                preview: result.productAsset?.preview ?? '',\n                quantity: 1,\n                sku: result.sku,\n                unitPriceWithTax:\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\n            });\n            this.persistToLocalStorage();\n            this.orderLinesChange.emit(this.lines);\n        }\n    }\n\n    updateQuantity() {\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    removeLine(line: TestOrderLine) {\n        this.lines = this.lines.filter(l => l.id !== line.id);\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    private persistToLocalStorage() {\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\n    }\n\n    private loadFromLocalStorage(): TestOrderLine[] {\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        {{ 'settings.test-address' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <form [formGroup]=\"form\">\n            <clr-input-container>\n                <label>{{ 'customer.city' | translate }}</label>\n                <input formControlName=\"city\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.province' | translate }}</label>\n                <input formControlName=\"province\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.postal-code' | translate }}</label>\n                <input formControlName=\"postalCode\" type=\"text\" clrInput />\n            </clr-input-container>\n            <clr-input-container>\n                <label>{{ 'customer.country' | translate }}</label>\n                <select name=\"countryCode\" formControlName=\"countryCode\" clrInput clrSelect>\n                    <option *ngFor=\"let country of availableCountries$ | async\" [value]=\"country.code\">\n                        {{ country.name }}\n                    </option>\n                </select>\n            </clr-input-container>\n        </form>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\nimport { Observable, Subscription } from 'rxjs';\n\nexport interface TestAddress {\n    city: string;\n    province: string;\n    postalCode: string;\n    countryCode: string;\n}\n\n@Component({\n    selector: 'vdr-test-address-form',\n    templateUrl: './test-address-form.component.html',\n    styleUrls: ['./test-address-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\n    @Output() addressChange = new EventEmitter<TestAddress>();\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    form: FormGroup;\n    private subscription: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n    ) {}\n\n    ngOnInit() {\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items);\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\n        const initialValue: TestAddress = storedValue\n            ? storedValue\n            : {\n                  city: '',\n                  countryCode: '',\n                  postalCode: '',\n                  province: '',\n              };\n        this.addressChange.emit(initialValue);\n\n        this.form = this.formBuilder.group(initialValue);\n        this.subscription = this.form.valueChanges.subscribe(value => {\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\n            this.addressChange.emit(value);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n","<div\n    class=\"test-result card\"\n    [ngClass]=\"{\n        success: testResult?.eligible === true,\n        error: testResult?.eligible === false,\n        unknown: !testResult\n    }\"\n>\n    <div class=\"card-header\">\n        {{ 'settings.test-result' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"result-details\" [class.stale]=\"testDataUpdated\">\n            <vdr-labeled-data [label]=\"'settings.eligible' | translate\">\n                <div class=\"eligible-icon\">\n                    <clr-icon\n                        shape=\"success-standard\"\n                        class=\"is-solid success\"\n                        *ngIf=\"testResult?.eligible\"\n                    ></clr-icon>\n                    <clr-icon\n                        shape=\"ban\"\n                        class=\"is-solid error\"\n                        *ngIf=\"testResult?.eligible === false\"\n                    ></clr-icon>\n                    <clr-icon shape=\"unknown-status\" *ngIf=\"!testResult\"></clr-icon>\n                </div>\n                {{ testResult?.eligible }}\n            </vdr-labeled-data>\n            <div class=\"price-row\">\n                <vdr-labeled-data\n                    [label]=\"'common.price' | translate\"\n                    *ngIf=\"testResult?.quote?.price != null\"\n                >\n                    {{ testResult.quote?.price | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n                <vdr-labeled-data\n                    [label]=\"'common.price-with-tax' | translate\"\n                    *ngIf=\"testResult?.quote?.priceWithTax != null\"\n                >\n                    {{ testResult.quote?.priceWithTax | localeCurrency: currencyCode }}\n                </vdr-labeled-data>\n            </div>\n            <vdr-object-tree\n                *ngIf=\"testResult?.quote?.metadata\"\n                [value]=\"testResult?.quote?.metadata\"\n            ></vdr-object-tree>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-secondary\" (click)=\"runTest.emit()\" [disabled]=\"!okToRun\">\n            {{ 'settings.test-shipping-method' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-method-test-result',\n    templateUrl: './shipping-method-test-result.component.html',\n    styleUrls: ['./shipping-method-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodTestResultComponent {\n    @Input() testResult: TestShippingMethodResult;\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"updatePermission\"\n                [disabled]=\"\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as shippingMethod\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n            (input)=\"updateCode(shippingMethod.code, $event.target.value)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'common.code' | translate\"\n        for=\"code\"\n        [readOnlyToggle]=\"updatePermission | hasPermission\"\n    >\n        <input\n            id=\"code\"\n            type=\"text\"\n            formControlName=\"code\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-rich-text-editor\n        formControlName=\"description\"\n        [readonly]=\"!(updatePermission | hasPermission)\"\n        [label]=\"'common.description' | translate\"\n    ></vdr-rich-text-editor>\n    <vdr-form-field [label]=\"'settings.fulfillment-handler' | translate\" for=\"fulfillmentHandler\" class=\"mb2\">\n        <select\n            name=\"fulfillmentHandler\"\n            formControlName=\"fulfillmentHandler\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\n                {{ handler.code }}: {{ handler.description }}\n            </option>\n        </select>\n    </vdr-form-field>\n\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"ShippingMethod\"\n                [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n\n    <div class=\"clr-row mt4\">\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.shipping-eligibility-checker' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedChecker && selectedCheckerDefinition\"\n                [operation]=\"selectedChecker\"\n                [operationDefinition]=\"selectedCheckerDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"selectedChecker = null\"\n                formControlName=\"checker\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let checker of checkers\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectChecker(checker)\"\n                        >\n                            {{ checker.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <label class=\"clr-control-label\">{{ 'settings.shipping-calculator' | translate }}</label>\n            <vdr-configurable-input\n                *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\n                [operation]=\"selectedCalculator\"\n                [operationDefinition]=\"selectedCalculatorDefinition\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (remove)=\"selectedCalculator = null\"\n                formControlName=\"calculator\"\n            ></vdr-configurable-input>\n            <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'common.select' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let calculator of calculators\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"selectCalculator(calculator)\"\n                        >\n                            {{ calculator.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n<div class=\"testing-tool\">\n    <clr-accordion>\n        <clr-accordion-panel>\n            <clr-accordion-title>{{ 'settings.test-shipping-method' | translate }}</clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <vdr-test-order-builder\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\n                        ></vdr-test-order-builder>\n                    </div>\n                    <div class=\"clr-col\">\n                        <vdr-test-address-form\n                            (addressChange)=\"setTestAddress($event)\"\n                        ></vdr-test-address-form>\n                        <vdr-shipping-method-test-result\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                            [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\n                            [testDataUpdated]=\"testDataUpdated\"\n                            [testResult]=\"testResult$ | async\"\n                            (runTest)=\"runTest()\"\n                        ></vdr-shipping-method-test-result>\n                    </div>\n                </div>\n            </clr-accordion-content>\n        </clr-accordion-panel>\n    </clr-accordion>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreateShippingMethodInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    findTranslation,\n    GetActiveChannel,\n    getConfigArgValue,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    ShippingMethod,\n    TestShippingMethodInput,\n    TestShippingMethodResult,\n    toConfigurableOperationInput,\n    UpdateShippingMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-detail',\n    templateUrl: './shipping-method-detail.component.html',\n    styleUrls: ['./shipping-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodDetailComponent\n    extends BaseDetailComponent<ShippingMethod.Fragment>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    checkers: ConfigurableOperationDefinition[] = [];\n    calculators: ConfigurableOperationDefinition[] = [];\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedCalculator?: ConfigurableOperation | null;\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<TestShippingMethodResult | undefined>;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            fulfillmentHandler: ['', Validators.required],\n            checker: {},\n            calculator: {},\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.shippingEligibilityCheckers;\n            this.calculators = data.shippingCalculators;\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\n                c => c.code === (entity.calculator && entity.calculator.code),\n            );\n        });\n\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                if (!this.selectedChecker || !this.selectedCalculator) {\n                    return of(undefined);\n                }\n                const formValue = this.detailForm.value;\n                const input: TestShippingMethodInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\n                };\n                return this.dataService.shippingMethod\n                    .testShippingMethod(input)\n                    .mapSingle(result => result.testShippingMethod);\n            }),\n        );\n\n        // tslint:disable:no-non-null-assertion\n        merge(\n            this.detailForm.get(['checker'])!.valueChanges,\n            this.detailForm.get(['calculator'])!.valueChanges,\n        )\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => (this.testDataUpdated = true));\n        // tslint:enable:no-non-null-assertion\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\n        this.selectedCalculatorDefinition = calculator;\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\n        const formControl = this.detailForm.get('calculator');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedCalculator);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as CreateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.createShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as UpdateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(\n            this.testAddress &&\n            this.testOrderLines &&\n            this.testOrderLines.length &&\n            this.selectedChecker &&\n            this.selectedCalculator\n        );\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n\n    /**\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\n     * can then be persisted to the API.\n     */\n    private getUpdatedShippingMethod(\n        shippingMethod: ShippingMethod.Fragment,\n        formGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\n        const formValue = formGroup.value;\n        const input = createUpdatedTranslatable({\n            translatable: shippingMethod,\n            updatedFields: formValue,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: shippingMethod.name || '',\n                description: shippingMethod.description || '',\n            },\n        });\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\n    }\n\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\n        this.detailForm.patchValue({\n            name: currentTranslation?.name ?? '',\n            description: currentTranslation?.description ?? '',\n            code: shippingMethod.code,\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\n            checker: shippingMethod.checker || {},\n            calculator: shippingMethod.calculator || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = shippingMethod.checker && {\n                code: shippingMethod.checker.code,\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedCalculator) {\n            this.selectedCalculator = shippingMethod.calculator && {\n                code: shippingMethod.calculator?.code,\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (shippingMethod as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"shipping-method-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateShippingMethod']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-shipping-method' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-shippingMethod=\"item\">\n        <td class=\"left align-middle\">{{ shippingMethod.code }}</td>\n        <td class=\"left align-middle\">{{ shippingMethod.name }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', shippingMethod.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteShippingMethod(shippingMethod.id)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteShippingMethod'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n\n<div class=\"testing-tool\">\n    <clr-accordion>\n        <clr-accordion-panel>\n            <clr-accordion-title>{{ 'settings.test-shipping-methods' | translate }}</clr-accordion-title>\n            <clr-accordion-content *clrIfExpanded>\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <vdr-test-order-builder\n                            (orderLinesChange)=\"setTestOrderLines($event)\"\n                        ></vdr-test-order-builder>\n                    </div>\n                    <div class=\"clr-col\">\n                        <vdr-test-address-form\n                            (addressChange)=\"setTestAddress($event)\"\n                        ></vdr-test-address-form>\n                        <vdr-shipping-eligibility-test-result\n                            [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\n                            [okToRun]=\"allTestDataPresent()\"\n                            [testDataUpdated]=\"testDataUpdated\"\n                            [testResult]=\"testResult$ | async\"\n                            (runTest)=\"runTest()\"\n                        ></vdr-shipping-eligibility-test-result>\n                    </div>\n                </div>\n            </clr-accordion-content>\n        </clr-accordion-panel>\n    </clr-accordion>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport {\n    GetActiveChannel,\n    GetShippingMethodList,\n    ShippingMethodQuote,\n    TestEligibleShippingMethodsInput,\n    TestShippingMethodInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY, Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-list',\n    templateUrl: './shipping-method-list.component.html',\n    styleUrls: ['./shipping-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodListComponent\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\n    implements OnInit {\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\n            data => data.shippingMethods,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                const input: TestEligibleShippingMethodsInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                };\n                return this.dataService.shippingMethod\n                    .testEligibleShippingMethods(input)\n                    .mapSingle(result => result.testEligibleShippingMethods);\n            }),\n        );\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n    }\n\n    deleteShippingMethod(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-shipping-method'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-category-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"!saveButtonEnabled()\"\n                *vdrIfPermissions=\"updatePermission\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.default-tax-category' | translate\" for=\"isDefault\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"isDefault\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"isDefault\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, Permission } from '@vendure/admin-ui/core';\nimport {\n    ConfigurableOperation,\n    CreateTaxCategoryInput,\n    LanguageCode,\n    TaxCategory,\n    UpdateTaxCategoryInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-detail',\n    templateUrl: './tax-category-detail.component.html',\n    styleUrls: ['./tax-category-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryDetailComponent\n    extends BaseDetailComponent<TaxCategory.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategory$: Observable<TaxCategory.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\n\n    private taxCondition: ConfigurableOperation;\n    private taxAction: ConfigurableOperation;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            isDefault: false,\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategory$ = this.entity$;\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = { name: formValue.name, isDefault: formValue.isDefault } as CreateTaxCategoryInput;\n        this.dataService.settings.createTaxCategory(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxCategory',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxCategory',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.taxCategory$\n            .pipe(\n                take(1),\n                mergeMap(taxCategory => {\n                    const input = {\n                        id: taxCategory.id,\n                        name: formValue.name,\n                        isDefault: formValue.isDefault,\n                    } as UpdateTaxCategoryInput;\n                    return this.dataService.settings.updateTaxCategory(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxCategory',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxCategory',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            isDefault: entity.isDefault,\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-category-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxCategory']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-tax-category' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table [items]=\"taxCategories$ | async\">\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-taxCategory=\"item\">\n        <td class=\"left align-middle\">{{ taxCategory.name }}</td>\n        <td class=\"left align-middle\">\n            <vdr-chip *ngIf=\"taxCategory.isDefault\">{{ 'common.default-tax-category' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', taxCategory.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteTaxCategory(taxCategory)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxCategory'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { QueryResult } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-list',\n    templateUrl: './tax-category-list.component.html',\n    styleUrls: ['./tax-category-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryListComponent {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    private queryResult: QueryResult<GetTaxCategories.Query>;\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        this.queryResult = this.dataService.settings.getTaxCategories();\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\n    }\n\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-category'),\n                body: taxCategory.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\n                map(res => res.deleteTaxCategory),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.queryResult.ref.refetch();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-rate-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"!saveButtonEnabled()\"\n                *vdrIfPermissions=\"updatePermission\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            type=\"text\"\n            formControlName=\"name\"\n            [readonly]=\"!(updatePermission | hasPermission)\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'common.enabled' | translate\" for=\"enabled\">\n        <clr-toggle-wrapper>\n            <input\n                type=\"checkbox\"\n                clrToggle\n                id=\"enabled\"\n                formControlName=\"enabled\"\n                [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n            />\n        </clr-toggle-wrapper>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.rate' | translate\" for=\"value\">\n        <vdr-affixed-input suffix=\"%\">\n            <input\n                id=\"value\"\n                type=\"number\"\n                step=\"0.1\"\n                formControlName=\"value\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n            />\n        </vdr-affixed-input>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.tax-category' | translate\" for=\"taxCategoryId\">\n        <select\n            clrSelect\n            name=\"taxCategoryId\"\n            formControlName=\"taxCategoryId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let taxCategory of taxCategories$ | async\" [value]=\"taxCategory.id\">\n                {{ taxCategory.name }}\n            </option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'settings.zone' | translate\" for=\"zoneId\">\n        <select\n            clrSelect\n            name=\"zoneId\"\n            formControlName=\"zoneId\"\n            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n        >\n            <option *ngFor=\"let zone of zones$ | async\" [value]=\"zone.id\">{{ zone.name }}</option>\n        </select>\n    </vdr-form-field>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateTaxRateInput,\n    CustomerGroup,\n    DataService,\n    GetZones,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    TaxCategory,\n    TaxRate,\n    UpdateTaxRateInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-rate-detail',\n    templateUrl: './tax-rate-detail.component.html',\n    styleUrls: ['./tax-rate-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateDetailComponent\n    extends BaseDetailComponent<TaxRate.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    zones$: Observable<GetZones.Zones[]>;\n    groups$: Observable<CustomerGroup[]>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: [true],\n            value: [0, Validators.required],\n            taxCategoryId: [''],\n            zoneId: [''],\n            customerGroupId: [''],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategories$ = this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories);\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            enabled: formValue.enabled,\n            value: formValue.value,\n            categoryId: formValue.taxCategoryId,\n            zoneId: formValue.zoneId,\n            customerGroupId: formValue.customerGroupId,\n        } as CreateTaxRateInput;\n        this.dataService.settings.createTaxRate(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxRate',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxRate',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(taxRate => {\n                    const input = {\n                        id: taxRate.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        value: formValue.value,\n                        categoryId: formValue.taxCategoryId,\n                        zoneId: formValue.zoneId,\n                        customerGroupId: formValue.customerGroupId,\n                    } as UpdateTaxRateInput;\n                    return this.dataService.settings.updateTaxRate(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxRate',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            value: entity.value,\n            taxCategoryId: entity.category ? entity.category.id : '',\n            zoneId: entity.zone ? entity.zone.id : '',\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"tax-rate-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateTaxRate']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-tax-rate' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.tax-category' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.tax-rate' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-taxRate=\"item\">\n        <td class=\"left align-middle\">{{ taxRate.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\n        <td class=\"left align-middle\">{{ taxRate.value }}%</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', taxRate.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteTaxRate(taxRate)\"\n                        [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-rate-list',\n    templateUrl: './tax-rate-list.component.html',\n    styleUrls: ['./tax-rate-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\n            data => data.taxRates,\n        );\n    }\n\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-rate'),\n                body: taxRate.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\n                map(res => res.deleteTaxRate),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.refresh();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","<ng-template vdrDialogTitle>\n    <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\n    <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\n</ng-template>\n\n<vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n    <input id=\"name\" type=\"text\" [(ngModel)]=\"zone.name\" [readonly]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\" />\n</vdr-form-field>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!zone.name\" class=\"btn btn-primary\">\n        <span *ngIf=\"zone.id\">{{ 'settings.update-zone' | translate }}</span>\n        <span *ngIf=\"!zone.id\">{{ 'settings.create-zone' | translate }}</span>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-zone-detail-dialog',\n    templateUrl: './zone-detail-dialog.component.html',\n    styleUrls: ['./zone-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneDetailDialogComponent implements Dialog<string> {\n    zone: { id?: string; name: string };\n    resolveWith: (result?: string) => void;\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.zone.name);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left> </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"zone-list\"></vdr-action-bar-items>\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"['CreateSettings', 'CreateZone']\" (click)=\"create()\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-zone' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"zone-wrapper\">\n    <table class=\"table zone-list\">\n        <tbody>\n            <tr *ngFor=\"let zone of zones$ | async\" [class.active]=\"zone.id === (activeZone$ | async)?.id\">\n                <td class=\"left align-middle\"><vdr-entity-info [entity]=\"zone\"></vdr-entity-info></td>\n                <td class=\"left align-middle\"><vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip></td>\n                <td class=\"text-right align-middle\">\n                    <a\n                        class=\"btn btn-link btn-sm\"\n                        [routerLink]=\"['./', { contents: zone.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <clr-icon shape=\"view-list\"></clr-icon>\n                        {{ 'settings.view-zone-members' | translate }}\n                    </a>\n                </td>\n                <td class=\"align-middle\">\n                    <button class=\"btn btn-link btn-sm\" (click)=\"update(zone)\">\n                        <clr-icon shape=\"edit\"></clr-icon>\n                        {{ 'common.edit' | translate }}\n                    </button>\n                </td>\n                <td class=\"align-middle\">\n                    <vdr-dropdown>\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                            {{ 'common.actions' | translate }}\n                            <clr-icon shape=\"caret down\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"delete(zone.id)\"\n                                [disabled]=\"!(['DeleteSettings', 'DeleteZone'] | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"zone-members\" [class.expanded]=\"activeZone$ | async\">\n        <ng-container *ngIf=\"activeZone$ | async as activeZone\">\n            <vdr-zone-member-list\n                [members]=\"activeZone.members\"\n                [selectedMemberIds]=\"selectedMemberIds\"\n                (selectionChange)=\"selectedMemberIds = $event\"\n            >\n                <div *vdrZoneMemberListHeader>\n                    <div class=\"flex\">\n                        <div class=\"header-title-row\">\n                            {{ activeZone.name }} ({{ activeZone.members.length }})\n                        </div>\n                        <div class=\"flex-spacer\"></div>\n                        <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\n                            <clr-icon shape=\"close\"></clr-icon>\n                        </button>\n                    </div>\n                    <div class=\"controls\">\n                        <vdr-dropdown>\n                            <button\n                                type=\"button\"\n                                class=\"btn btn-secondary btn-sm\"\n                                vdrDropdownTrigger\n                                [disabled]=\"selectedMemberIds.length === 0\"\n                            >\n                                {{ 'common.with-selected' | translate }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    type=\"button\"\n                                    class=\"delete-button\"\n                                    (click)=\"removeFromZone(activeZone, selectedMemberIds)\"\n                                    vdrDropdownItem\n                                    [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'settings.remove-from-zone' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                        <button class=\"btn btn-secondary btn-sm\" (click)=\"addToZone(activeZone)\">\n                            {{ 'settings.add-countries-to-zone' | translate: { zoneName: activeZone.name } }}\n                        </button>\n                    </div>\n                </div>\n                <div *vdrZoneMemberControls=\"let member = member\">\n                    <vdr-dropdown>\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                            {{ 'common.actions' | translate }}\n                            <clr-icon shape=\"caret down\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <a\n                                type=\"button\"\n                                [routerLink]=\"['/settings', 'countries', member.id]\"\n                                vdrDropdownItem\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </a>\n                            <button\n                                type=\"button\"\n                                class=\"delete-button\"\n                                (click)=\"removeFromZone(activeZone, [member.id])\"\n                                vdrDropdownItem\n                                [disabled]=\"!(['UpdateSettings', 'UpdateZone'] | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'settings.remove-from-zone' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </vdr-zone-member-list>\n        </ng-container>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Country,\n    DataService,\n    DeletionResult,\n    GetZones,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-zone-list',\n    templateUrl: './zone-list.component.html',\n    styleUrls: ['./zone-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneListComponent implements OnInit {\n    activeZone$: Observable<GetZones.Zones | undefined>;\n    zones$: Observable<GetZones.Zones[]>;\n    members$: Observable<GetZones.Members[]>;\n    selectedMemberIds: string[] = [];\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit(): void {\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\n        const activeZoneId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedMemberIds = [])),\n        );\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\n            map(([zones, activeZoneId]) => {\n                if (activeZoneId) {\n                    return zones.find(z => z.id === activeZoneId);\n                }\n            }),\n        );\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\n            .pipe(\n                switchMap(name =>\n                    name ? this.dataService.settings.createZone({ name, memberIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.settings.getZones().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    delete(zoneId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-zone'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\n\n                switchMap(result => {\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.settings\n                            .getZones()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteZone.message });\n                    }\n                }),\n            )\n            .subscribe(\n                result => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Zone',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    update(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\n            .pipe(\n                switchMap(name =>\n                    name ? this.dataService.settings.updateZone({ id: zone.id, name }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToZone(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(AddCountryToZoneDialogComponent, {\n                locals: {\n                    zoneName: zone.name,\n                    currentMembers: zone.members,\n                },\n                size: 'md',\n            })\n            .pipe(\n                switchMap(memberIds =>\n                    memberIds\n                        ? this.dataService.settings\n                              .addMembersToZone(zone.id, memberIds)\n                              .pipe(mapTo(memberIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: result => {\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\n                        countryCount: result.length,\n                        zoneName: zone.name,\n                    });\n                },\n                error: err => {\n                    this.notificationService.error(err);\n                },\n            });\n    }\n\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\n                    countryCount: memberIds.length,\n                    zoneName: zone.name,\n                });\n            },\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Channel',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                token: '',\n                pricesIncludeTax: false,\n                currencyCode: CurrencyCode.USD,\n                defaultLanguageCode: getDefaultUiLanguage(),\n                defaultShippingZone: {} as any,\n                defaultTaxZone: {} as any,\n            },\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Country } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Country',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                name: '',\n                enabled: false,\n                translations: [],\n            },\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the global settings.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\n            {} as any,\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { PaymentMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'PaymentMethod',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                code: '',\n                description: '',\n                enabled: true,\n                checker: undefined as any,\n                handler: undefined as any,\n            },\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id =>\n                dataService.administrator\n                    .getActiveAdministrator()\n                    .mapStream(data => data.activeAdministrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Role' as 'Role',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                description: '',\n                permissions: [],\n                channels: [],\n            },\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ShippingMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'ShippingMethod',\n                createdAt: '',\n                updatedAt: '',\n                id: '',\n                code: '',\n                name: '',\n                description: '',\n                fulfillmentHandlerCode: undefined as any,\n                checker: undefined as any,\n                calculator: undefined as any,\n                translations: [],\n            },\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxCategory',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                isDefault: false,\n            },\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxRate',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                value: 0,\n                enabled: true,\n                category: {} as any,\n                zone: {} as any,\n                customerGroup: null,\n            },\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    CanDeactivateDetailGuard,\n    Channel,\n    Country,\n    createResolveData,\n    detailBreadcrumb,\n    Role,\n    ShippingMethod,\n    TaxCategory,\n    TaxRate,\n} from '@vendure/admin-ui/core';\n\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\nimport { ChannelResolver } from './providers/routing/channel-resolver';\nimport { CountryResolver } from './providers/routing/country-resolver';\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\nimport { ProfileResolver } from './providers/routing/profile-resolver';\nimport { RoleResolver } from './providers/routing/role-resolver';\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\n\nexport const settingsRoutes: Route[] = [\n    {\n        path: 'profile',\n        component: ProfileComponent,\n        resolve: createResolveData(ProfileResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.profile'),\n        },\n    },\n    {\n        path: 'administrators',\n        component: AdministratorListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.administrators'),\n        },\n    },\n    {\n        path: 'administrators/:id',\n        component: AdminDetailComponent,\n        resolve: createResolveData(AdministratorResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: administratorBreadcrumb },\n    },\n    {\n        path: 'channels',\n        component: ChannelListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.channels'),\n        },\n    },\n    {\n        path: 'channels/:id',\n        component: ChannelDetailComponent,\n        resolve: createResolveData(ChannelResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: channelBreadcrumb },\n    },\n    {\n        path: 'roles',\n        component: RoleListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.roles'),\n        },\n    },\n    {\n        path: 'roles/:id',\n        component: RoleDetailComponent,\n        resolve: createResolveData(RoleResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: roleBreadcrumb },\n    },\n    {\n        path: 'tax-categories',\n        component: TaxCategoryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-categories'),\n        },\n    },\n    {\n        path: 'tax-categories/:id',\n        component: TaxCategoryDetailComponent,\n        resolve: createResolveData(TaxCategoryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxCategoryBreadcrumb,\n        },\n    },\n    {\n        path: 'tax-rates',\n        component: TaxRateListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-rates'),\n        },\n    },\n    {\n        path: 'tax-rates/:id',\n        component: TaxRateDetailComponent,\n        resolve: createResolveData(TaxRateResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxRateBreadcrumb,\n        },\n    },\n    {\n        path: 'countries',\n        component: CountryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.countries'),\n        },\n    },\n    {\n        path: 'countries/:id',\n        component: CountryDetailComponent,\n        resolve: createResolveData(CountryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: countryBreadcrumb,\n        },\n    },\n    {\n        path: 'zones',\n        component: ZoneListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.zones'),\n        },\n    },\n    {\n        path: 'shipping-methods',\n        component: ShippingMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.shipping-methods'),\n        },\n    },\n    {\n        path: 'shipping-methods/:id',\n        component: ShippingMethodDetailComponent,\n        resolve: createResolveData(ShippingMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: shippingMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'payment-methods',\n        component: PaymentMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.payment-methods'),\n        },\n    },\n    {\n        path: 'payment-methods/:id',\n        component: PaymentMethodDetailComponent,\n        resolve: createResolveData(PaymentMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: paymentMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'global-settings',\n        component: GlobalSettingsComponent,\n        resolve: createResolveData(GlobalSettingsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.global-settings'),\n        },\n    },\n];\n\nexport function administratorBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Administrator>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.administrators',\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\n        route: 'administrators',\n    });\n}\n\nexport function channelBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Channel>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.channels',\n        getName: channel => channel.code,\n        route: 'channels',\n    });\n}\n\nexport function roleBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Role>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.roles',\n        getName: role => role.description,\n        route: 'roles',\n    });\n}\n\nexport function taxCategoryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxCategory.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-categories',\n        getName: category => category.name,\n        route: 'tax-categories',\n    });\n}\n\nexport function taxRateBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxRate.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-rates',\n        getName: category => category.name,\n        route: 'tax-rates',\n    });\n}\n\nexport function countryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Country.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.countries',\n        getName: promotion => promotion.name,\n        route: 'countries',\n    });\n}\n\nexport function shippingMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.shipping-methods',\n        getName: method => method.name,\n        route: 'shipping-methods',\n    });\n}\n\nexport function paymentMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.payment-methods',\n        getName: method => method.code,\n        route: 'payment-methods',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\nimport { settingsRoutes } from './settings.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\n    declarations: [\n        TaxCategoryListComponent,\n        TaxCategoryDetailComponent,\n        AdministratorListComponent,\n        RoleListComponent,\n        RoleDetailComponent,\n        AdminDetailComponent,\n        PermissionGridComponent,\n        CountryListComponent,\n        CountryDetailComponent,\n        TaxRateListComponent,\n        TaxRateDetailComponent,\n        ChannelListComponent,\n        ChannelDetailComponent,\n        ShippingMethodListComponent,\n        ShippingMethodDetailComponent,\n        PaymentMethodListComponent,\n        PaymentMethodDetailComponent,\n        GlobalSettingsComponent,\n        TestOrderBuilderComponent,\n        TestAddressFormComponent,\n        ShippingMethodTestResultComponent,\n        ShippingEligibilityTestResultComponent,\n        ZoneListComponent,\n        AddCountryToZoneDialogComponent,\n        ZoneMemberListComponent,\n        ZoneMemberListHeaderDirective,\n        ZoneMemberControlsDirective,\n        ZoneDetailDialogComponent,\n        ProfileComponent,\n    ],\n})\nexport class SettingsModule {}\n"]}