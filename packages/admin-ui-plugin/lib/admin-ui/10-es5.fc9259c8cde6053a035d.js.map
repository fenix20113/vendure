{"version":3,"sources":["webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.html","webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.ts","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.html","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.ts","webpack:///src/lib/marketing/src/providers/routing/promotion-resolver.ts","webpack:///src/lib/marketing/src/marketing.routes.ts","webpack:///src/lib/marketing/src/marketing.module.ts"],"names":["router","route","serverConfigService","changeDetector","dataService","formBuilder","notificationService","super","conditions","actions","allConditions","allActions","this","detailForm","group","name","required","enabled","couponCode","perCustomerUsageLimit","startsAt","endsAt","array","init","promotion$","entity$","promotion","getPromotionActionsAndConditions","single$","subscribe","data","promotionActions","promotionConditions","markForCheck","destroy","filter","o","find","c","code","condition","a","action","dirty","valid","length","value","addOperation","markAsDirty","removeOperation","key","get","formValue","input","mapOperationsToInputs","createPromotion","__typename","success","entity","markAsPristine","navigate","id","relativeTo","error","message","err","pipe","take","mergeMap","updatePromotion","languageCode","patchValue","forEach","operations","formValueOperations","map","i","arguments","Object","values","args","j","operation","operationsArray","formArrayOf","collection","findIndex","argsHash","reduce","output","arg","getDefaultArgValue","push","control","argName","def","argDef","Error","index","removeAt","splice","modalService","getPromotions","refetchOnChannelChange","promotions","promotionId","dialog","title","buttons","type","label","returnValue","switchMap","response","deletePromotion","refresh","setPageNumber","setItemsPerPage","createdAt","updatedAt","getPromotion","mapStream","marketingRoutes","path","component","breadcrumb","resolve","canDeactivate","promotionBreadcrumb","params","breadcrumbKey","getName","MarketingModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <clr-toggle-wrapper *vdrIfPermissions=\"'UpdatePromotion'\">\n                <input type=\"checkbox\" clrToggle name=\"enabled\" [formControl]=\"detailForm.get(['enabled'])\" />\n                <label>{{ 'common.enabled' | translate }}</label>\n            </clr-toggle-wrapper>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"promotion-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!saveButtonEnabled()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                *vdrIfPermissions=\"'UpdatePromotion'\"\n                [disabled]=\"!saveButtonEnabled()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n        <input\n            id=\"name\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"text\"\n            formControlName=\"name\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.starts-at' | translate\" for=\"startsAt\">\n        <vdr-datetime-picker formControlName=\"startsAt\"></vdr-datetime-picker>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.ends-at' | translate\" for=\"endsAt\">\n        <vdr-datetime-picker formControlName=\"endsAt\"></vdr-datetime-picker>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.coupon-code' | translate\" for=\"couponCode\">\n        <input\n            id=\"couponCode\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"text\"\n            formControlName=\"couponCode\"\n        />\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'marketing.per-customer-limit' | translate\" for=\"perCustomerUsageLimit\">\n        <input\n            id=\"perCustomerUsageLimit\"\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n            type=\"number\"\n            min=\"1\"\n            max=\"999\"\n            formControlName=\"perCustomerUsageLimit\"\n        />\n    </vdr-form-field>\n\n    <div class=\"clr-row\">\n        <div class=\"clr-col\" formArrayName=\"conditions\">\n            <label class=\"clr-control-label\">{{ 'marketing.conditions' | translate }}</label>\n            <ng-container *ngFor=\"let condition of conditions; index as i\">\n                <vdr-configurable-input\n                    (remove)=\"removeCondition($event)\"\n                    [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                    [operation]=\"condition\"\n                    [operationDefinition]=\"getConditionDefinition(condition)\"\n                    [formControlName]=\"i\"\n                ></vdr-configurable-input>\n            </ng-container>\n\n            <div>\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-condition' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let condition of getAvailableConditions()\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"addCondition(condition)\"\n                        >\n                            {{ condition.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\" formArrayName=\"actions\">\n            <label class=\"clr-control-label\">{{ 'marketing.actions' | translate }}</label>\n            <vdr-configurable-input\n                *ngFor=\"let action of actions; index as i\"\n                (remove)=\"removeAction($event)\"\n                [operation]=\"action\"\n                [readonly]=\"!('UpdatePromotion' | hasPermission)\"\n                [operationDefinition]=\"getActionDefinition(action)\"\n                [formControlName]=\"i\"\n            ></vdr-configurable-input>\n            <div>\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-action' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let action of getAvailableActions()\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"addAction(action)\"\n                        >\n                            {{ action.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n    </div>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreatePromotionInput,\n    DataService,\n    encodeConfigArgValue,\n    getConfigArgValue,\n    getDefaultConfigArgValue,\n    LanguageCode,\n    NotificationService,\n    Promotion,\n    ServerConfigService,\n    UpdatePromotionInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-promotion-detail',\n    templateUrl: './promotion-detail.component.html',\n    styleUrls: ['./promotion-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionDetailComponent extends BaseDetailComponent<Promotion.Fragment>\n    implements OnInit, OnDestroy {\n    promotion$: Observable<Promotion.Fragment>;\n    detailForm: FormGroup;\n    conditions: ConfigurableOperation[] = [];\n    actions: ConfigurableOperation[] = [];\n\n    private allConditions: ConfigurableOperationDefinition[] = [];\n    private allActions: ConfigurableOperationDefinition[] = [];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: true,\n            couponCode: null,\n            perCustomerUsageLimit: null,\n            startsAt: null,\n            endsAt: null,\n            conditions: this.formBuilder.array([]),\n            actions: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.promotion$ = this.entity$;\n        this.dataService.promotion.getPromotionActionsAndConditions().single$.subscribe(data => {\n            this.allActions = data.promotionActions;\n            this.allConditions = data.promotionConditions;\n            this.changeDetector.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getAvailableConditions(): ConfigurableOperationDefinition[] {\n        return this.allConditions.filter(o => !this.conditions.find(c => c.code === o.code));\n    }\n\n    getConditionDefinition(condition: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allConditions.find(c => c.code === condition.code);\n    }\n\n    getAvailableActions(): ConfigurableOperationDefinition[] {\n        return this.allActions.filter(o => !this.actions.find(a => a.code === o.code));\n    }\n\n    getActionDefinition(action: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allActions.find(c => c.code === action.code);\n    }\n\n    saveButtonEnabled(): boolean {\n        return (\n            this.detailForm.dirty &&\n            this.detailForm.valid &&\n            (this.conditions.length !== 0 || this.detailForm.value.couponCode) &&\n            this.actions.length !== 0\n        );\n    }\n\n    addCondition(condition: ConfigurableOperation) {\n        this.addOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    addAction(action: ConfigurableOperation) {\n        this.addOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    removeCondition(condition: ConfigurableOperation) {\n        this.removeOperation('conditions', condition);\n        this.detailForm.markAsDirty();\n    }\n\n    removeAction(action: ConfigurableOperation) {\n        this.removeOperation('actions', action);\n        this.detailForm.markAsDirty();\n    }\n\n    formArrayOf(key: 'conditions' | 'actions'): FormArray {\n        return this.detailForm.get(key) as FormArray;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input: CreatePromotionInput = {\n            name: formValue.name,\n            enabled: true,\n            couponCode: formValue.couponCode,\n            perCustomerUsageLimit: formValue.perCustomerUsageLimit,\n            startsAt: formValue.startsAt,\n            endsAt: formValue.endsAt,\n            conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\n            actions: this.mapOperationsToInputs(this.actions, formValue.actions),\n        };\n        this.dataService.promotion.createPromotion(input).subscribe(\n            ({ createPromotion }) => {\n                switch (createPromotion.__typename) {\n                    case 'Promotion':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Promotion',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createPromotion.id], { relativeTo: this.route });\n                        break;\n                    case 'MissingConditionsError':\n                        this.notificationService.error(createPromotion.message);\n                        break;\n                }\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Promotion',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.promotion$\n            .pipe(\n                take(1),\n                mergeMap(promotion => {\n                    const input: UpdatePromotionInput = {\n                        id: promotion.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        couponCode: formValue.couponCode,\n                        perCustomerUsageLimit: formValue.perCustomerUsageLimit,\n                        startsAt: formValue.startsAt,\n                        endsAt: formValue.endsAt,\n                        conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\n                        actions: this.mapOperationsToInputs(this.actions, formValue.actions),\n                    };\n                    return this.dataService.promotion.updatePromotion(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Promotion',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Promotion',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: Promotion.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            couponCode: entity.couponCode,\n            perCustomerUsageLimit: entity.perCustomerUsageLimit,\n            startsAt: entity.startsAt,\n            endsAt: entity.endsAt,\n        });\n        entity.conditions.forEach(o => {\n            this.addOperation('conditions', o);\n        });\n        entity.actions.forEach(o => this.addOperation('actions', o));\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values<any>(formValueOperations[i].args).map((value, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n\n    /**\n     * Adds a new condition or action to the promotion.\n     */\n    private addOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index === -1) {\n            const argsHash = operation.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]:\n                        getConfigArgValue(arg.value) ?? this.getDefaultArgValue(key, operation, arg.name),\n                }),\n                {},\n            );\n            operationsArray.push(\n                this.formBuilder.control({\n                    code: operation.code,\n                    args: argsHash,\n                }),\n            );\n            collection.push({\n                code: operation.code,\n                args: operation.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    private getDefaultArgValue(\n        key: 'conditions' | 'actions',\n        operation: ConfigurableOperation,\n        argName: string,\n    ) {\n        const def =\n            key === 'conditions'\n                ? this.allConditions.find(c => c.code === operation.code)\n                : this.allActions.find(a => a.code === operation.code);\n        if (def) {\n            const argDef = def.args.find(a => a.name === argName);\n            if (argDef) {\n                return getDefaultConfigArgValue(argDef);\n            }\n        }\n        throw new Error(`Could not determine default value for \"argName\"`);\n    }\n\n    /**\n     * Removes a condition or action from the promotion.\n     */\n    private removeOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\n        const operationsArray = this.formArrayOf(key);\n        const collection = key === 'conditions' ? this.conditions : this.actions;\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\n        if (index !== -1) {\n            operationsArray.removeAt(index);\n            collection.splice(index, 1);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"promotion-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\"\n           *vdrIfPermissions=\"'CreatePromotion'\"\n           [routerLink]=\"['./create']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'marketing.create-new-promotion' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.coupon-code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.starts-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'marketing.ends-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-promotion=\"item\">\n        <td class=\"left align-middle\">{{ promotion.name }}</td>\n        <td class=\"left align-middle\">\n            <vdr-chip *ngIf=\"promotion.couponCode\">\n                {{ promotion.couponCode }}\n            </vdr-chip>\n        </td>\n        <td class=\"left align-middle\">{{ promotion.startsAt | localeDate: 'longDate' }}</td>\n        <td class=\"left align-middle\">{{ promotion.endsAt | localeDate: 'longDate' }}</td>\n        <td class=\"align-middle\">\n            <vdr-chip *ngIf=\"!promotion.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', promotion.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deletePromotion(promotion.id)\"\n                        [disabled]=\"!('DeletePromotion' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetPromotionList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-promotion-list',\n    templateUrl: './promotion-list.component.html',\n    styleUrls: ['./promotion-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionListComponent extends BaseListComponent<\n    GetPromotionList.Query,\n    GetPromotionList.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.promotion.getPromotions(...args).refetchOnChannelChange(),\n            data => data.promotions,\n        );\n    }\n\n    deletePromotion(promotionId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-promotion'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.promotion.deletePromotion(promotionId) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Promotion',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Promotion',\n                    });\n                },\n            );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, Promotion } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class PromotionResolver extends BaseEntityResolver<Promotion.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Promotion',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                enabled: false,\n                conditions: [],\n                actions: [],\n            },\n            id => dataService.promotion.getPromotion(id).mapStream(data => data.promotion),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { CanDeactivateDetailGuard, createResolveData, detailBreadcrumb, Promotion } from '@vendure/admin-ui/core';\n\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\nimport { PromotionResolver } from './providers/routing/promotion-resolver';\n\nexport const marketingRoutes: Route[] = [\n    {\n        path: 'promotions',\n        component: PromotionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.promotions'),\n        },\n    },\n    {\n        path: 'promotions/:id',\n        component: PromotionDetailComponent,\n        resolve: createResolveData(PromotionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: promotionBreadcrumb,\n        },\n    },\n];\n\nexport function promotionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Promotion.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.promotions',\n        getName: promotion => promotion.name,\n        route: 'promotions',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\nimport { marketingRoutes } from './marketing.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(marketingRoutes)],\n    declarations: [PromotionListComponent, PromotionDetailComponent],\n})\nexport class MarketingModule {}\n"]}