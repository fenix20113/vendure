{"version":3,"sources":["webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.html","webpack:///src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.ts","webpack:///src/lib/catalog/src/components/asset-list/asset-list.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.html","webpack:///src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.html","webpack:///src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","webpack:///src/lib/catalog/src/components/collection-tree/array-to-tree.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.html","webpack:///src/lib/catalog/src/components/collection-list/collection-list.component.ts","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.html","webpack:///src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.html","webpack:///src/lib/catalog/src/components/facet-list/facet-list.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js","webpack:///src/lib/catalog/src/providers/product-detail/replace-last.ts","webpack:///src/lib/catalog/src/providers/product-detail/product-detail.service.ts","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.html","webpack:///src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.html","webpack:///src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.html","webpack:///src/lib/catalog/src/components/product-detail/product-detail.component.ts","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.html","webpack:///src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","webpack:///src/lib/catalog/src/components/product-list/product-list.component.html","webpack:///src/lib/catalog/src/components/product-list/product-list.component.ts","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.html","webpack:///src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.html","webpack:///src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","webpack:///src/lib/catalog/src/providers/routing/asset-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/collection-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/facet-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-resolver.ts","webpack:///src/lib/catalog/src/providers/routing/product-variants-resolver.ts","webpack:///src/lib/catalog/src/catalog.routes.ts","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.html","webpack:///src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.html","webpack:///src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","webpack:///src/lib/catalog/src/components/product-assets/product-assets.component.html","webpack:///src/lib/catalog/src/components/product-assets/product-assets.component.ts","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.html","webpack:///src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.html","webpack:///src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.html","webpack:///src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.html","webpack:///src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","webpack:///src/lib/catalog/src/catalog.module.ts"],"names":["router","route","serverConfigService","notificationService","dataService","formBuilder","super","detailForm","this","customFields","getCustomFieldConfig","name","tags","group","reduce","hash","field","init","destroy","event","get","setValue","markAsDirty","product","updateAsset","id","value","subscribe","success","entity","err","error","languageCode","length","customFieldsGroup","key","control","patchValue","onAssetChange","modalService","searchTerm$","BehaviorSubject","filterByTags$","uploading","getAssetList","data","assets","skip","take","searchTerm","map","t","options","filter","contains","sort","createdAt","DESC","tagsOperator","AND","paginationConfig$","combineLatest","itemsPerPage$","currentPage$","totalItems$","pipe","itemsPerPage","currentPage","totalItems","debounceTime","takeUntil","destroy$","refresh","allTags$","getTagList","mapStream","items","files","createAssets","finalize","successCount","result","__typename","message","count","showModalAndDelete","a","switchMap","response","DELETED","r","assetIds","dialog","title","translationVars","body","buttons","type","label","returnValue","res","deleteAssets","filesSelected","setItemsPerPage","setPageNumber","filterTermControl","collectionIdChange$","refresh$","Subject","contentsCurrentPage$","paramMap","qpm","page","startWith","distinctUntilChanged","contentsItemsPerPage$","perPage","filterTerm$","valueChanges","tap","setContentsPageNumber","collection$","filterTerm","collection","getCollectionContents","mapSingle","of","contents$","productVariants","contentsTotalItems$","changes","next","collectionId","currentValue","complete","setParam","navigate","snapshot","params","relativeTo","queryParamsHandling","setContentsItemsPerPage","changeDetector","assetChanges","filters","allFilters","updatePermission","UpdateCatalog","UpdateCollection","required","slug","description","visible","array","getCollectionFilters","single$","collectionFilters","find","f","code","Object","values","nameValue","entity$","languageCode$","slugControl","currentTranslation","currentSlugIsEmpty","pristine","normalizeString","collectionFilter","filtersArray","findIndex","o","argsHash","args","output","arg","push","index","removeAt","splice","dirty","mergeMap","category","input","getUpdatedCollection","parentId","createCollection","markAsPristine","markForCheck","updateCollection","contentsComponent","featuredAsset","isPrivate","forEach","addFilter","fieldDef","form","updatedCategory","translatable","updatedFields","customFieldConfig","defaultTranslation","featuredAssetId","mapOperationsToInputs","operations","formValueOperations","i","arguments","j","setLanguage","arrayToTree","nodes","currentState","tree","nodeMap","topLevelNodes","mappedArr","currentStateMap","Map","visit","node","set","children","n","hasOwnProperty","mappedElem","expanded","parent","expandAll","rearrange","deleteCollection","collections","collectionTree","item","newParentId","container","Error","emit","currentIndex","queryResult","getCollections","refetchOnChannelChange","items$","shareReplay","activeCollectionId$","pm","activeCollectionTitle$","match","c","completed$","moveCollection","hasChildren","contents","ref","refetch","onRearrange","UpdateFacet","customValueFields","facet","currentCode","codeControl","valuesFormArray","insert","facetForm","newFacet","getUpdatedFacet","createFacet","getAllFacets","mapTo","facetGroup","updateOperations","updateFacet","valuesArray","newValues","controls","facetId","translations","createFacetValues","getFacet","updatedValues","getUpdatedFacetValues","updateFacetValues","forkJoin","facetValueId","deleted","deleteFacetValues","currentValuesFormArray","valueTranslation","valueControl","at","customValueFieldsGroup","addControl","fieldValue","facetFormGroup","dirtyValues","v","formRow","toString","dirtyValueValues","notNullOrUndefined","initialLimit","displayLimit","getFacets","facets","deleteFacet","withLatestFrom","source","project","pop","observables","lift","WithLatestFromOperator","subscriber","destination","toRespond","len","Array","observable","add","subscribeToResult","_outerValue","innerValue","outerIndex","found","indexOf","_tryProject","apply","OuterSubscriber","replaceLast","target","search","replace","lastIndex","lastIndexOf","substr","settings","getTaxCategories","taxCategories","createVariantsConfig","createProduct$","createProduct","nonEmptyOptionGroups","groups","g","createOptionGroups$","createProductOptionGroups","optionGroups","optionGroup","addOptionGroupToProduct","productId","optionGroupId","variants","optionIds","optionValues","optionName","option","og","flat","createProductVariants","createProductOptionGroup","variantData","join","price","sku","stockOnHand","stock","updateOptions","autoUpdate","productInput","updateVariantsInput","updateProduct","productOldName","productNewName","variant","currentVariantName","variantInput","existingVariantInput","variantTranslation","updateProductVariants","updateProductVariantNames$","oldOptionName","newOptionName","variantsToUpdate","includes","variantName","updateProductOption","deleteProductVariant","getProduct","throwError","ApplyFacetDialogComponent","selectedValues","setTimeout","selector","focus","resolveWith","priceFactorControl","selectedChannelIdControl","productVariantIds","activeChannelId$","client","userStatus","activeChannelId","allChannels$","getChannels","channels","currentChannel","availableChannels","ids","selectChannel","variantsPreview$","from","getTopVariants","factor","pricePreview","channelIds","selectedChannel","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","toPromise","slice","filterInput","$event","preventDefault","productDetailService","location","variantAssetChanges","selectedVariantIds","variantDisplayMode","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","variants$","term","toLocaleLowerCase","taxCategories$","activeTab$","facets$","productFacetValues$","facetValues","allFacetValues$","formFacetValueIdChanges$","getProductFormGroup","val","formChangeFacetValues$","allFacetValues","productFacetValues","combined","fv","facetValues$","merge","productChannels$","p","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","tabName","replaceState","createUrlTree","tab","channelCode","DEFAULT_CHANNEL_CODE","fromComponent","size","locals","currentChannelIds","removeProductsFromChannel","removeVariantsFromChannel","keys","variantId","displayFacetValueModal","productGroup","currentFacetValueIds","unique","existingFacetValueIds","variantFormGroup","every","closable","newProduct","getUpdatedProduct","createProductWithVariants","console","priceIncludesTax","variantsInput","assetsChanged","variantsArray","variantAssetsChanged","getUpdatedProductVariants","updateSlugAfterSave","cfCurrentTranslation","cfProduct","variantsFormArray","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","productFormGroup","updatedProduct","dirtyVariants","dirtyVariantValues","formValue","results","firstResult","emitEvent","searchTermChange","facetValueChange","lastTerm","lastFacetValueIds","filterFacetResults","isFacetValueItem","facetValue","toLowerCase","startsWith","selectComponent","select","currentTerm","selectedItems","unselect","isArray","searchTermItem","itemsList","markedIndex","provide","useValue","onSelectChange","jobQueueService","groupByProduct","searchProducts","facetValueOperator","result$","queryParamMap","productSearchInput","setSearchTerm","fvids$","getAll","setFacetValues","delay","setQueryParam","q","fvids","reindex","info","addJob","job","state","COMPLETED","time","Intl","NumberFormat","format","duration","indexedItemCount","deleteProduct","setFacetValueIds","rebuildSearchIndex","OPTION_VALUE_INPUT_VALUE_ACCESSOR","useExisting","multi","groupName","disabled","isFocussed","lastSelected","fn","onChangeFn","onTouchFn","isDisabled","obj","textArea","nativeElement","locked","addOptionValue","removeLastOption","parseInputIntoOptions","split","s","trim","handleKey","handleBlur","GeneratedVariant","config","formValueChanged","generatedVariants","initOptionsAndVariants","currencyCode","variantInfo","existing","isNew","previousVariants","generatedVariantFactory","isDefault","existingVariant","prototype","getVariantPrototype","productVariantId","generateAllCombinations","optionsAreEqual","pick","reFetchProduct","newOptionGroups","confirmDeletionOfDefault","createdOptionGroups","addOptionGroupsToProduct","addNewOptionsToGroups","groupsIds","fetchOptionGroups","createNewProductVariants","deleteDefaultVariant","hasOnlyDefaultVariant","newOptions","createdGroup","cog","productOptionGroupId","allGroupIds","addOptionToGroup","getProductOptionGroup","productOptionGroup","getProductVariantsOptions","generateVariants","b","toOptionString","x","save","updatedAt","IMAGE","fileSize","mimeType","width","height","preview","focalPoint","getAsset","asset","getCollection","catalogRoutes","path","component","breadcrumb","resolve","canDeactivate","productBreadcrumb","productVariantEditorBreadcrumb","facetBreadcrumb","collectionBreadcrumb","assetBreadcrumb","breadcrumbKey","getName","link","root","depth","parentName","permissions$","permissions","hasUpdatePermission$","perms","hasDeletePermission$","DeleteCatalog","DeleteCollection","expandAllChange","previousValue","parentPath","concat","child","onMove","previousIndex","onDrop","onDelete","drop","variantsChange","variantFormValues","sum","copyFromDefault","onFormChange","optionValueInputComponent","stopPropagation","variantsToCreate","prop","addOption","viewportRuler","collectionDetailComponent","compact","change","updateCollectionPermissions","updateProductPermissions","UpdateProduct","dropListEnterPredicate","drag","placeholder","activeContainer","phElement","element","sourceElement","dropContainer","dropElement","parentElement","dragIndex","__indexOf","dropIndex","sourceIndex","style","clientWidth","clientHeight","removeChild","targetIndex","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","emitChangeEvent","e","point","getPointerPositionOnPage","listGroup","_items","dropList","y","getBoundingClientRect","top","bottom","left","right","appendChild","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","call","updateVariantName","codeInputTouched","productOption","activeLanguage","customFieldsForm","updateCode","priceChange$","taxCategoryIdChange$","taxRates$","getTaxRates","taxRates","activeChannel$","taxRate$","defaultTaxZone","applicableRate","taxRate","zone","grossPrice$","Math","round","selectFacetValueClick","assignToChannel","removeFromChannel","assetChange","selectionChange","pagination","formGroupMap","GlobalFlag","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","buildFormGroupMap","unsubscribe","formGroup","FALSE","INHERIT","effectiveOutOfStockThreshold","stockAllocated","areAllSelected","formFacetValueIds","getFacetValueIds","variantFacetValueIds","newValue","clear","controlGroup","pendingAssetChanges","CatalogModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-detail\"></vdr-action-bar-items>\n        <button\n            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateAsset']\"\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.update' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<vdr-asset-preview\n    [asset]=\"entity$ | async\"\n    [editable]=\"true\"\n    [customFields]=\"customFields\"\n    [customFieldsForm]=\"detailForm.get('customFields')\"\n    (assetChange)=\"onAssetChange($event)\"\n></vdr-asset-preview>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    GetAsset,\n    LanguageCode,\n} from '@vendure/admin-ui/core';\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-asset-detail',\n    templateUrl: './asset-detail.component.html',\n    styleUrls: ['./asset-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\n    detailForm = new FormGroup({});\n    customFields: CustomFieldConfig[];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Asset');\n    }\n\n    ngOnInit() {\n        this.detailForm = new FormGroup({\n            name: new FormControl(''),\n            tags: new FormControl([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\n        this.detailForm.get('name')?.setValue(event.name);\n        this.detailForm.get('tags')?.setValue(event.tags);\n        this.detailForm.markAsDirty();\n    }\n\n    save() {\n        this.dataService.product\n            .updateAsset({\n                id: this.id,\n                name: this.detailForm.value.name,\n                tags: this.detailForm.value.tags,\n                customFields: this.detailForm.value.customFields,\n            })\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Asset',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\n        this.detailForm.get('name')?.setValue(entity.name);\n        this.detailForm.get('tags')?.setValue(entity.tags);\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetAssetList,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SortOrder,\n    TagFragment,\n} from '@vendure/admin-ui/core';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-asset-list',\n    templateUrl: './asset-list.component.html',\n    styleUrls: ['./asset-list.component.scss'],\n})\nexport class AssetListComponent\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\n    implements OnInit {\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\n    uploading = false;\n    allTags$: Observable<TagFragment[]>;\n    paginationConfig$: Observable<PaginationInstance>;\n\n    constructor(\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\n            data => data.assets,\n            (skip, take) => {\n                const searchTerm = this.searchTerm$.value;\n                const tags = this.filterByTags$.value?.map(t => t.value);\n                return {\n                    options: {\n                        skip,\n                        take,\n                        ...(searchTerm\n                            ? {\n                                  filter: {\n                                      name: { contains: searchTerm },\n                                  },\n                              }\n                            : {}),\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                        tags,\n                        tagsOperator: LogicalOperator.AND,\n                    },\n                };\n            },\n            { take: 25, skip: 0 },\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\n        );\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\n\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\n    }\n\n    filesSelected(files: File[]) {\n        if (files.length) {\n            this.uploading = true;\n            this.dataService.product\n                .createAssets(files)\n                .pipe(finalize(() => (this.uploading = false)))\n                .subscribe(({ createAssets }) => {\n                    let successCount = 0;\n                    for (const result of createAssets) {\n                        switch (result.__typename) {\n                            case 'Asset':\n                                successCount++;\n                                break;\n                            case 'MimeTypeError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                    if (0 < successCount) {\n                        super.refresh();\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\n                            count: successCount,\n                        });\n                    }\n                });\n        }\n    }\n\n    deleteAssets(assets: Asset[]) {\n        this.showModalAndDelete(assets.map(a => a.id))\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(\n                            assets.map(a => a.id),\n                            response.message || '',\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\n                    }\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Assets',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Assets',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(assetIds: string[], message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-assets'),\n                translationVars: {\n                    count: assetIds.length,\n                },\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\n                map(res => res.deleteAssets),\n            );\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <vdr-asset-search-input\n            class=\"pr4 mt1\"\n            [tags]=\"allTags$ | async\"\n            (searchTermChange)=\"searchTerm$.next($event)\"\n            (tagsChange)=\"filterByTags$.next($event)\"\n        ></vdr-asset-search-input>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"asset-list\"></vdr-action-bar-items>\n        <vdr-asset-file-input\n            (selectFiles)=\"filesSelected($event)\"\n            [uploading]=\"uploading\"\n            dropZoneTarget=\".content-area\"\n        ></vdr-asset-file-input>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-asset-gallery\n    [assets]=\"(items$ | async)! | paginate: (paginationConfig$ | async) || {}\"\n    [multiSelect]=\"true\"\n    [canDelete]=\"['DeleteCatalog', 'DeleteAsset'] | hasPermission\"\n    (deleteAssets)=\"deleteAssets($event)\"\n></vdr-asset-gallery>\n\n<div class=\"paging-controls\">\n    <vdr-items-per-page-controls\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n    ></vdr-items-per-page-controls>\n\n    <vdr-pagination-controls\n        [currentPage]=\"currentPage$ | async\"\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        [totalItems]=\"totalItems$ | async\"\n        (pageChange)=\"setPageNumber($event)\"\n    ></vdr-pagination-controls>\n</div>\n","<div class=\"contents-header\">\n    <div class=\"header-title-row\">\n        <ng-container\n            *ngTemplateOutlet=\"headerTemplate; context: { $implicit: contentsTotalItems$ | async }\"\n        ></ng-container>\n    </div>\n    <input\n        type=\"text\"\n        [placeholder]=\"'catalog.filter-by-name' | translate\"\n        [formControl]=\"filterTermControl\"\n    />\n</div>\n<vdr-data-table\n    [items]=\"contents$ | async\"\n    [itemsPerPage]=\"contentsItemsPerPage$ | async\"\n    [totalItems]=\"contentsTotalItems$ | async\"\n    [currentPage]=\"contentsCurrentPage$ | async\"\n    (pageChange)=\"setContentsPageNumber($event)\"\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n>\n    <ng-template let-variant=\"item\">\n        <td class=\"left align-middle\">{{ variant.name }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['/catalog/products', variant.productId, { tab: 'variants' }]\"\n            ></vdr-table-row-action>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    startWith,\n    switchMap,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-collection-contents',\n    templateUrl: './collection-contents.component.html',\n    styleUrls: ['./collection-contents.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() collectionId: string;\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\n\n    contents$: Observable<GetCollectionContents.Items[]>;\n    contentsTotalItems$: Observable<number>;\n    contentsItemsPerPage$: Observable<number>;\n    contentsCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    private collectionIdChange$ = new BehaviorSubject<string>('');\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\n            map(qpm => qpm.get('contentsPage')),\n            map(page => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\n            map(qpm => qpm.get('contentsPerPage')),\n            map(perPage => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        const collection$ = combineLatest(\n            this.collectionIdChange$,\n            this.contentsCurrentPage$,\n            this.contentsItemsPerPage$,\n            filterTerm$,\n            this.refresh$,\n        ).pipe(\n            takeUntil(this.destroy$),\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                if (id) {\n                    return this.dataService.collection\n                        .getCollectionContents(id, take, skip, filterTerm)\n                        .mapSingle(data => data.collection);\n                } else {\n                    return of(null);\n                }\n            }),\n        );\n\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\n        this.contentsTotalItems$ = collection$.pipe(\n            map(result => (result ? result.productVariants.totalItems : 0)),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('collectionId' in changes) {\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('contentsPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('contentsPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\n            relativeTo: this.route,\n            queryParamsHandling: 'merge',\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as category\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col\">\n            <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n                <clr-toggle-wrapper>\n                    <input\n                        type=\"checkbox\"\n                        clrToggle\n                        formControlName=\"visible\"\n                        id=\"visibility\"\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    />\n                    <label class=\"visible-toggle\">\n                        <ng-container *ngIf=\"detailForm.value.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\n                        <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                    </label>\n                </clr-toggle-wrapper>\n            </vdr-form-field>\n            <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n                <input\n                    id=\"name\"\n                    type=\"text\"\n                    formControlName=\"name\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    (input)=\"updateSlug($event.target.value)\"\n                />\n            </vdr-form-field>\n            <vdr-form-field\n                [label]=\"'catalog.slug' | translate\"\n                for=\"slug\"\n                [errors]=\"{ pattern: ('catalog.slug-pattern-error' | translate) }\"\n            >\n                <input\n                    id=\"slug\"\n                    type=\"text\"\n                    formControlName=\"slug\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                    pattern=\"[a-z0-9_-]+\"\n                />\n            </vdr-form-field>\n            <vdr-rich-text-editor\n                formControlName=\"description\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                [label]=\"'common.description' | translate\"\n            ></vdr-rich-text-editor>\n\n            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                <label>{{ 'common.custom-fields' | translate }}</label>\n                <ng-container *ngFor=\"let customField of customFields\">\n                    <vdr-custom-field-control\n                        *ngIf=\"customFieldIsSet(customField.name)\"\n                        entityName=\"Collection\"\n                        [customFieldsFormGroup]=\"detailForm.get(['customFields'])\"\n                        [customField]=\"customField\"\n                    ></vdr-custom-field-control>\n                </ng-container>\n            </section>\n        </div>\n        <div class=\"clr-col-md-auto\">\n            <vdr-product-assets\n                [assets]=\"category.assets\"\n                [featuredAsset]=\"category.featuredAsset\"\n                (change)=\"assetChanges = $event\"\n            ></vdr-product-assets>\n        </div>\n    </div>\n    <div class=\"clr-row\" formArrayName=\"filters\">\n        <div class=\"clr-col\">\n            <label>{{ 'catalog.filters' | translate }}</label>\n            <ng-container *ngFor=\"let filter of filters; index as i\">\n                <vdr-configurable-input\n                    (remove)=\"removeFilter($event)\"\n                    [operation]=\"filter\"\n                    [operationDefinition]=\"getFilterDefinition(filter)\"\n                    [formControlName]=\"i\"\n                    [readonly]=\"!(updatePermission | hasPermission)\"\n                ></vdr-configurable-input>\n            </ng-container>\n\n            <div *vdrIfPermissions=\"updatePermission\">\n                <vdr-dropdown>\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'marketing.add-condition' | translate }}\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n                        <button\n                            *ngFor=\"let filter of allFilters\"\n                            type=\"button\"\n                            vdrDropdownItem\n                            (click)=\"addFilter(filter)\"\n                        >\n                            {{ filter.description }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </div>\n        </div>\n        <div class=\"clr-col\">\n            <vdr-collection-contents [collectionId]=\"id\" #collectionContents>\n                <ng-template let-count>\n                    <div class=\"contents-title\">\n                        {{ 'catalog.collection-contents' | translate }} ({{\n                            'common.results-count' | translate: { count: count }\n                        }})\n                    </div>\n                </ng-template>\n            </vdr-collection-contents>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: '',\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === filter.code);\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index === -1) {\n            const argsHash = collectionFilter.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]: getConfigArgValue(arg.value),\n                }),\n                {},\n            );\n            filtersArray.push(\n                this.formBuilder.control({\n                    code: collectionFilter.code,\n                    args: argsHash,\n                }),\n            );\n            this.filters.push({\n                code: collectionFilter.code,\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    removeFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            this.filters.splice(index, 1);\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        entity.filters.forEach(f => this.addFilter(f));\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n}\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","<vdr-collection-tree-node\n    *ngIf=\"collectionTree\"\n    cdkDropListGroup\n    [expandAll]=\"expandAll\"\n    [collectionTree]=\"collectionTree\"\n    [activeCollectionId]=\"activeCollectionId\"\n></vdr-collection-tree-node>\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { Collection } from '@vendure/admin-ui/core';\n\nimport { arrayToTree, HasParent, RootNode } from './array-to-tree';\n\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\n\n@Component({\n    selector: 'vdr-collection-tree',\n    templateUrl: 'collection-tree.component.html',\n    styleUrls: ['./collection-tree.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeComponent implements OnChanges {\n    @Input() collections: CollectionPartial[];\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\n    @Output() deleteCollection = new EventEmitter<string>();\n    collectionTree: RootNode<CollectionPartial>;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('collections' in changes && this.collections) {\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\n        }\n    }\n\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        const item = event.item.data as CollectionPartial;\n        const newParent = event.container.data;\n        const newParentId = newParent.id;\n        if (newParentId == null) {\n            throw new Error(`Could not determine the ID of the root Collection`);\n        }\n        this.rearrange.emit({\n            collectionId: item.id,\n            parentId: newParentId,\n            index: event.currentIndex,\n        });\n    }\n\n    onMove(event: RearrangeEvent) {\n        this.rearrange.emit(event);\n    }\n\n    onDelete(id: string) {\n        this.deleteCollection.emit(id);\n    }\n\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\n        return !node.hasOwnProperty('parent');\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <clr-checkbox-wrapper class=\"expand-all-toggle ml3\">\n            <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"expandAll\" />\n            <label>{{ 'catalog.expand-all-collections' | translate }}</label>\n        </clr-checkbox-wrapper>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"collection-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\" [routerLink]=\"['./create']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-collection' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"collection-wrapper\">\n    <vdr-collection-tree\n        [collections]=\"items$ | async\"\n        [activeCollectionId]=\"activeCollectionId$ | async\"\n        [expandAll]=\"expandAll\"\n        (rearrange)=\"onRearrange($event)\"\n        (deleteCollection)=\"deleteCollection($event)\"\n    ></vdr-collection-tree>\n\n    <div class=\"collection-contents\" [class.expanded]=\"activeCollectionId$ | async\">\n        <vdr-collection-contents [collectionId]=\"activeCollectionId$ | async\">\n            <ng-template let-count>\n                <div class=\"collection-title\">\n                    {{ activeCollectionTitle$ | async }} ({{\n                        'common.results-count' | translate: { count: count }\n                    }})\n                </div>\n                <button type=\"button\" class=\"close-button\" (click)=\"closeContents()\">\n                    <clr-icon shape=\"close\"></clr-icon>\n                </button>\n            </ng-template>\n        </vdr-collection-contents>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    GetCollectionList,\n    ModalService,\n    NotificationService,\n    QueryResult,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap, take } from 'rxjs/operators';\n\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-list',\n    templateUrl: './collection-list.component.html',\n    styleUrls: ['./collection-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionListComponent implements OnInit, OnDestroy {\n    activeCollectionId$: Observable<string | null>;\n    activeCollectionTitle$: Observable<string>;\n    items$: Observable<GetCollectionList.Items[]>;\n    expandAll = false;\n    private queryResult: QueryResult<any>;\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\n        this.activeCollectionId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n        );\n\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\n            map(([id, collections]) => {\n                if (id) {\n                    const match = collections.find(c => c.id === id);\n                    return match ? match.name : '';\n                }\n                return '';\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.queryResult.completed$.next();\n    }\n\n    onRearrange(event: RearrangeEvent) {\n        this.dataService.collection.moveCollection([event]).subscribe({\n            next: () => {\n                this.notificationService.success(_('common.notify-saved-changes'));\n                this.refresh();\n            },\n            error: err => {\n                this.notificationService.error(_('common.notify-save-changes-error'));\n            },\n        });\n    }\n\n    deleteCollection(id: string) {\n        this.items$\n            .pipe(\n                take(1),\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\n                switchMap(hasChildren => {\n                    return this.modalService.dialog({\n                        title: _('catalog.confirm-delete-collection'),\n                        body: hasChildren\n                            ? _('catalog.confirm-delete-collection-and-children-body')\n                            : undefined,\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    });\n                }),\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Collection',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    closeContents() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    private refresh() {\n        this.queryResult.ref.refetch();\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"updatePermission\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm\" *ngIf=\"entity$ | async as facet\">\n    <section class=\"form-block\" formGroupName=\"facet\">\n        <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\n            <clr-toggle-wrapper>\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    formControlName=\"visible\"\n                    id=\"visibility\"\n                />\n                <label class=\"visible-toggle\">\n                    <ng-container *ngIf=\"detailForm.value.facet.visible; else private\">{{ 'catalog.public' | translate }}</ng-container>\n                    <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n                </label>\n            </clr-toggle-wrapper>\n        </vdr-form-field>\n        <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n            <input\n                id=\"name\"\n                type=\"text\"\n                formControlName=\"name\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                (input)=\"updateCode(facet.code, $event.target.value)\"\n            />\n        </vdr-form-field>\n        <vdr-form-field\n            [label]=\"'common.code' | translate\"\n            for=\"code\"\n            [readOnlyToggle]=\"updatePermission | hasPermission\"\n        >\n            <input\n                id=\"code\"\n                type=\"text\"\n                [readonly]=\"!(updatePermission | hasPermission)\"\n                formControlName=\"code\"\n            />\n        </vdr-form-field>\n\n        <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n            <label>{{ 'common.custom-fields' | translate }}</label>\n            <ng-container *ngFor=\"let customField of customFields\">\n                <vdr-custom-field-control\n                    *ngIf=\"customFieldIsSet(customField.name)\"\n                    entityName=\"Facet\"\n                    [customFieldsFormGroup]=\"detailForm.get(['facet', 'customFields'])\"\n                    [customField]=\"customField\"\n                ></vdr-custom-field-control>\n            </ng-container>\n        </section>\n    </section>\n\n    <section class=\"form-block\" *ngIf=\"!(isNew$ | async)\">\n        <label>{{ 'catalog.facet-values' | translate }}</label>\n\n        <table class=\"facet-values-list table\" formArrayName=\"values\" *ngIf=\"0 < getValuesFormArray().length\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'common.name' | translate }}</th>\n                    <th>{{ 'common.code' | translate }}</th>\n                    <ng-container *ngFor=\"let customField of customValueFields\">\n                        <th>{{ customField.name }}</th>\n                    </ng-container>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr\n                    class=\"facet-value\"\n                    *ngFor=\"let value of values; let i = index\"\n                    [formGroupName]=\"i\"\n                >\n                    <td class=\"align-middle\">\n                        <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\n                    </td>\n                    <td class=\"align-middle\">\n                        <input\n                            type=\"text\"\n                            formControlName=\"name\"\n                            [readonly]=\"!(updatePermission | hasPermission)\"\n                            (input)=\"updateValueCode(facet.values[i]?.code, $event.target.value, i)\"\n                        />\n                    </td>\n                    <td class=\"align-middle\"><input type=\"text\" formControlName=\"code\" readonly /></td>\n                    <ng-container *ngFor=\"let customField of customValueFields\">\n                        <td class=\"align-middle\">\n                            <vdr-custom-field-control\n                                *ngIf=\"customValueFieldIsSet(i, customField.name)\"\n                                entityName=\"FacetValue\"\n                                [showLabel]=\"false\"\n                                [customFieldsFormGroup]=\"detailForm.get(['values', i, 'customFields'])\"\n                                [customField]=\"customField\"\n                            ></vdr-custom-field-control>\n                        </td>\n                    </ng-container>\n                    <td class=\"align-middle\">\n                        <vdr-dropdown>\n                            <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                                {{ 'common.actions' | translate }}\n                                <clr-icon shape=\"caret down\"></clr-icon>\n                            </button>\n                            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                                <button\n                                    type=\"button\"\n                                    class=\"delete-button\"\n                                    (click)=\"deleteFacetValue(facet.values[i]?.id, i)\"\n                                    [disabled]=\"!(updatePermission | hasPermission)\"\n                                    vdrDropdownItem\n                                >\n                                    <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                    {{ 'common.delete' | translate }}\n                                </button>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n\n        <div>\n            <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n                (click)=\"addFacetValue()\"\n            >\n                <clr-icon shape=\"add\"></clr-icon>\n                {{ 'catalog.add-facet-value' | translate }}\n            </button>\n        </div>\n    </section>\n</form>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['facet', 'customFields', name]);\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            valuesFormArray.insert(\n                valuesFormArray.length,\n                this.formBuilder.group({\n                    id: '',\n                    name: ['', Validators.required],\n                    code: '',\n                }),\n            );\n            this.values.push({ name: '', code: '' });\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const newValues: CreateFacetValueInput[] = (valuesArray as FormArray).controls\n                            .filter(c => !c.value.id)\n                            .map(c => ({\n                                facetId: facet.id,\n                                code: c.value.code,\n                                translations: [{ name: c.value.name, languageCode }],\n                            }));\n                        if (newValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(newValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (facet as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.setValue(group);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any).customFields[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"facet-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\"\n           *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\n           [routerLink]=\"['./create']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'catalog.create-new-facet' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'catalog.values' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'catalog.visibility' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-facet=\"item\">\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.code }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">{{ facet.name }}</td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-facet-value-chip\n                *ngFor=\"let value of facet.values | slice: 0:displayLimit[facet.id] || 3\"\n                [facetValue]=\"value\"\n                [removable]=\"false\"\n                [displayFacetName]=\"false\"\n            ></vdr-facet-value-chip>\n            <button\n                class=\"btn btn-sm btn-secondary btn-icon\"\n                *ngIf=\"facet.values.length > initialLimit\"\n                (click)=\"toggleDisplayLimit(facet)\"\n            >\n                <ng-container *ngIf=\"(displayLimit[facet.id] || 0) < facet.values.length; else collapse\">\n                    <clr-icon shape=\"plus\"></clr-icon>\n                    {{ facet.values.length - initialLimit }}\n                </ng-container>\n                <ng-template #collapse>\n                    <clr-icon shape=\"minus\"></clr-icon>\n                </ng-template>\n            </button>\n        </td>\n        <td class=\"left align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-chip>\n                <ng-container *ngIf=\"!facet.isPrivate; else private\">{{ 'catalog.public' | translate }}</ng-container>\n                <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\n            </vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', facet.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\" [class.private]=\"facet.isPrivate\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteFacet(facet.id)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteFacet'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { DeletionResult, GetFacetList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-list',\n    templateUrl: './facet-list.component.html',\n    styleUrls: ['./facet-list.component.scss'],\n})\nexport class FacetListComponent extends BaseListComponent<GetFacetList.Query, GetFacetList.Items> {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\n            data => data.facets,\n        );\n    }\n\n    toggleDisplayLimit(facet: GetFacetList.Items) {\n        if (this.displayLimit[facet.id] === facet.values.length) {\n            this.displayLimit[facet.id] = this.initialLimit;\n        } else {\n            this.displayLimit[facet.id] = facet.values.length;\n        }\n    }\n\n    deleteFacet(facetValueId: string) {\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\n                map(res => res.deleteFacet),\n            );\n    }\n}\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, undefined, i));\n        }\n    }\n    notifyNext(_outerValue, innerValue, outerIndex) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map","/**\n * @description\n * Like String.prototype.replace(), but replaces the last instance\n * rather than the first.\n */\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\n    if (!target) {\n        return '';\n    }\n    const lastIndex = target.lastIndexOf(search);\n    if (lastIndex === -1) {\n        return target;\n    }\n    const head = target.substr(0, lastIndex);\n    const tail = target.substr(lastIndex).replace(search, replace);\n    return head + tail;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CreateProductInput,\n    CreateProductVariantInput,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ProductWithVariants,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\n\nimport { replaceLast } from './replace-last';\n\n/**\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductDetailService {\n    constructor(private dataService: DataService) {}\n\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\n    }\n\n    getTaxCategories() {\n        return this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories)\n            .pipe(shareReplay(1));\n    }\n\n    createProductWithVariants(\n        input: CreateProductInput,\n        createVariantsConfig: CreateProductVariantsConfig,\n        languageCode: LanguageCode,\n    ) {\n        const createProduct$ = this.dataService.product.createProduct(input);\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\n\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\n            mergeMap(([{ createProduct }, optionGroups]) => {\n                const addOptionsToProduct$ = optionGroups.length\n                    ? forkJoin(\n                          optionGroups.map(optionGroup => {\n                              return this.dataService.product.addOptionGroupToProduct({\n                                  productId: createProduct.id,\n                                  optionGroupId: optionGroup.id,\n                              });\n                          }),\n                      )\n                    : of([]);\n                return addOptionsToProduct$.pipe(\n                    map(() => {\n                        return { createProduct, optionGroups };\n                    }),\n                );\n            }),\n            mergeMap(({ createProduct, optionGroups }) => {\n                const variants = createVariantsConfig.variants.map(v => {\n                    const optionIds = optionGroups.length\n                        ? v.optionValues.map((optionName, index) => {\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\n                              if (!option) {\n                                  throw new Error(\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\n                                  );\n                              }\n                              return option.id;\n                          })\n                        : [];\n                    return {\n                        ...v,\n                        optionIds,\n                    };\n                });\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\n                return this.createProductVariants(createProduct, variants, options, languageCode);\n            }),\n        );\n    }\n\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\n        return groups.length\n            ? forkJoin(\n                  groups.map(c => {\n                      return this.dataService.product\n                          .createProductOptionGroups({\n                              code: normalizeString(c.name, '-'),\n                              translations: [{ languageCode, name: c.name }],\n                              options: c.values.map(v => ({\n                                  code: normalizeString(v, '-'),\n                                  translations: [{ languageCode, name: v }],\n                              })),\n                          })\n                          .pipe(map(data => data.createProductOptionGroup));\n                  }),\n              )\n            : of([]);\n    }\n\n    createProductVariants(\n        product: { name: string; id: string },\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\n        options: Array<{ id: string; name: string }>,\n        languageCode: LanguageCode,\n    ) {\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\n            const name = options.length\n                ? `${product.name} ${v.optionIds\n                      .map(id => options.find(o => o.id === id))\n                      .filter(notNullOrUndefined)\n                      .map(o => o.name)\n                      .join(' ')}`\n                : product.name;\n            return {\n                productId: product.id,\n                price: v.price,\n                sku: v.sku,\n                stockOnHand: v.stock,\n                translations: [\n                    {\n                        languageCode,\n                        name,\n                    },\n                ],\n                optionIds: v.optionIds,\n            };\n        });\n        return this.dataService.product.createProductVariants(variants).pipe(\n            map(({ createProductVariants }) => ({\n                createProductVariants,\n                productId: product.id,\n            })),\n        );\n    }\n\n    updateProduct(updateOptions: {\n        product: ProductWithVariants.Fragment;\n        languageCode: LanguageCode;\n        autoUpdate: boolean;\n        productInput?: UpdateProductInput;\n        variantsInput?: UpdateProductVariantInput[];\n    }) {\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\n        const updateVariantsInput = variantsInput || [];\n        if (productInput) {\n            updateOperations.push(this.dataService.product.updateProduct(productInput));\n\n            const productOldName = findTranslation(product, languageCode)?.name;\n            const productNewName = findTranslation(productInput, languageCode)?.name;\n            if (productOldName && productNewName && autoUpdate) {\n                for (const variant of product.variants) {\n                    const currentVariantName = findTranslation(variant, languageCode)?.name || '';\n                    let variantInput: UpdateProductVariantInput;\n                    const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\n                    if (existingVariantInput) {\n                        variantInput = existingVariantInput;\n                    } else {\n                        variantInput = {\n                            id: variant.id,\n                            translations: [{ languageCode, name: currentVariantName }],\n                        };\n                        updateVariantsInput.push(variantInput);\n                    }\n                    const variantTranslation = findTranslation(variantInput, languageCode);\n                    if (variantTranslation) {\n                        variantTranslation.name = replaceLast(\n                            variantTranslation.name,\n                            productOldName,\n                            productNewName,\n                        );\n                    }\n                }\n            }\n        }\n        if (updateVariantsInput.length) {\n            updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));\n        }\n        return forkJoin(updateOperations);\n    }\n\n    updateProductOption(\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\n        product: ProductWithVariants.Fragment,\n        languageCode: LanguageCode,\n    ) {\n        let updateProductVariantNames$: Observable<any> = of([]);\n        if (input.autoUpdate) {\n            // Update any ProductVariants' names which include the option name\n            let oldOptionName: string | undefined;\n            const newOptionName = findTranslation(input, languageCode)?.name;\n            if (!newOptionName) {\n                updateProductVariantNames$ = of([]);\n            }\n            const variantsToUpdate: UpdateProductVariantInput[] = [];\n            for (const variant of product.variants) {\n                if (variant.options.map(o => o.id).includes(input.id)) {\n                    if (!oldOptionName) {\n                        oldOptionName = findTranslation(\n                            variant.options.find(o => o.id === input.id),\n                            languageCode,\n                        )?.name;\n                    }\n                    const variantName = findTranslation(variant, languageCode)?.name || '';\n                    if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\n                        variantsToUpdate.push({\n                            id: variant.id,\n                            translations: [\n                                {\n                                    languageCode,\n                                    name: replaceLast(variantName, oldOptionName, newOptionName),\n                                },\n                            ],\n                        });\n                    }\n                }\n            }\n            if (variantsToUpdate.length) {\n                updateProductVariantNames$ = this.dataService.product.updateProductVariants(variantsToUpdate);\n            }\n        }\n        return this.dataService.product\n            .updateProductOption(input)\n            .pipe(mergeMap(() => updateProductVariantNames$));\n    }\n\n    deleteProductVariant(id: string, productId: string) {\n        return this.dataService.product.deleteProductVariant(id).pipe(\n            switchMap(result => {\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\n                    return this.dataService.product.getProduct(productId).single$;\n                } else {\n                    return throwError(result.deleteProductVariant.message);\n                }\n            }),\n        );\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.add-facets' | translate }}</ng-template>\n\n<vdr-facet-value-selector\n    [facets]=\"facets\"\n    (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"selectValues()\"\n        [disabled]=\"selectedValues.length === 0\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.add-facets' | translate }}\n    </button>\n</ng-template>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n} from '@angular/core';\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-apply-facet-dialog',\n    templateUrl: './apply-facet-dialog.component.html',\n    styleUrls: ['./apply-facet-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\n    resolveWith: (result?: FacetValue[]) => void;\n    selectedValues: FacetValue[] = [];\n    // Provided by caller\n    facets: FacetWithValues.Fragment[];\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        setTimeout(() => this.selector.focus(), 0);\n    }\n\n    selectValues() {\n        this.resolveWith(this.selectedValues);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>\n    <ng-container *ngIf=\"isProductVariantMode; else productModeTitle\">{{\n        'catalog.assign-variants-to-channel' | translate\n    }}</ng-container>\n    <ng-template #productModeTitle>{{ 'catalog.assign-products-to-channel' | translate }}</ng-template>\n</ng-template>\n\n<div class=\"flex\">\n    <clr-input-container>\n        <label>{{ 'common.channel' | translate }}</label>\n        <vdr-channel-assignment-control\n            clrInput\n            [multiple]=\"false\"\n            [includeDefaultChannel]=\"false\"\n            [disableChannelIds]=\"currentChannelIds\"\n            [formControl]=\"selectedChannelIdControl\"\n        ></vdr-channel-assignment-control>\n    </clr-input-container>\n    <div class=\"flex-spacer\"></div>\n    <clr-input-container>\n        <label>{{ 'catalog.price-conversion-factor' | translate }}</label>\n        <input clrInput type=\"number\" min=\"0\" max=\"99999\" [formControl]=\"priceFactorControl\" />\n    </clr-input-container>\n</div>\n\n<div class=\"channel-price-preview\">\n    <label class=\"clr-control-label\">{{ 'catalog.channel-price-preview' | translate }}</label>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.name' | translate }}</th>\n                <th>\n                    {{\n                        'catalog.price-in-channel'\n                            | translate: { channel: currentChannel?.code | channelCodeToLabel | translate }\n                    }}\n                </th>\n                <th>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n                        {{ 'catalog.price-in-channel' | translate: { channel: selectedChannel?.code } }}\n                    </ng-template>\n                    <ng-template #noSelection>\n                        {{ 'catalog.no-channel-selected' | translate }}\n                    </ng-template>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let row of variantsPreview$ | async\">\n                <td>{{ row.name }}</td>\n                <td>{{ row.price | localeCurrency: currentChannel?.currencyCode }}</td>\n                <td>\n                    <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noChannelSelected\">\n                        {{ row.pricePreview | localeCurrency: selectedChannel?.currencyCode }}\n                    </ng-template>\n                    <ng-template #noChannelSelected> - </ng-template>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"assign()\" [disabled]=\"!selectedChannel\" class=\"btn btn-primary\">\n        <ng-template [ngIf]=\"selectedChannel\" [ngIfElse]=\"noSelection\">\n            {{ 'catalog.assign-to-named-channel' | translate: { channelCode: selectedChannel?.code } }}\n        </ng-template>\n        <ng-template #noSelection>\n            {{ 'catalog.no-channel-selected' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i])\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variants : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-flex-row\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <clr-toggle-wrapper *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\">\n                <input\n                    type=\"checkbox\"\n                    clrToggle\n                    name=\"enabled\"\n                    [formControl]=\"detailForm.get(['product', 'enabled'])\"\n                />\n                <label>{{ 'common.enabled' | translate }}</label>\n            </clr-toggle-wrapper>\n        </div>\n        <vdr-language-selector\n            [disabled]=\"isNew$ | async\"\n            [availableLanguageCodes]=\"availableLanguages$ | async\"\n            [currentLanguageCode]=\"languageCode$ | async\"\n            (languageCodeChange)=\"setLanguage($event)\"\n        ></vdr-language-selector>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"detailForm.invalid || detailForm.pristine || !variantsToCreateAreValid()\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"\n                    (detailForm.invalid || detailForm.pristine) && !assetsChanged() && !variantAssetsChanged()\n                \"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form\n    class=\"form\"\n    [formGroup]=\"detailForm\"\n    *ngIf=\"product$ | async as product\"\n    (keydown.enter)=\"$event.preventDefault()\"\n>\n    <clr-tabs>\n        <clr-tab>\n            <button clrTabLink (click)=\"navigateToTab('details')\">\n                {{ 'catalog.product-details' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'details'\">\n                <div class=\"clr-row\">\n                    <div class=\"clr-col\">\n                        <section class=\"form-block\" formGroupName=\"product\">\n                            <ng-container *vdrIfMultichannel>\n                                <vdr-form-item\n                                    [label]=\"'common.channels' | translate\"\n                                    *vdrIfDefaultChannelActive\n                                >\n                                    <div class=\"flex channel-assignment\">\n                                        <ng-container *ngFor=\"let channel of productChannels$ | async\">\n                                            <vdr-chip\n                                                *ngIf=\"!isDefaultChannel(channel.code)\"\n                                                icon=\"times-circle\"\n                                                (iconClick)=\"removeFromChannel(channel.id)\"\n                                            >\n                                                <vdr-channel-badge\n                                                    [channelCode]=\"channel.code\"\n                                                ></vdr-channel-badge>\n                                                {{ channel.code | channelCodeToLabel }}\n                                            </vdr-chip>\n                                        </ng-container>\n                                        <button class=\"btn btn-sm\" (click)=\"assignToChannel()\">\n                                            <clr-icon shape=\"layers\"></clr-icon>\n                                            {{ 'catalog.assign-to-channel' | translate }}\n                                        </button>\n                                    </div>\n                                </vdr-form-item>\n                            </ng-container>\n                            <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\n                                <input\n                                    id=\"name\"\n                                    type=\"text\"\n                                    formControlName=\"name\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                    (input)=\"updateSlug($event.target.value)\"\n                                />\n                            </vdr-form-field>\n                            <div\n                                class=\"auto-rename-wrapper\"\n                                [class.visible]=\"\n                                    (isNew$ | async) === false && detailForm.get(['product', 'name'])?.dirty\n                                \"\n                            >\n                                <clr-checkbox-wrapper>\n                                    <input\n                                        clrCheckbox\n                                        type=\"checkbox\"\n                                        id=\"auto-update\"\n                                        formControlName=\"autoUpdateVariantNames\"\n                                    />\n                                    <label>{{\n                                        'catalog.auto-update-product-variant-name' | translate\n                                    }}</label>\n                                </clr-checkbox-wrapper>\n                            </div>\n                            <vdr-form-field\n                                [label]=\"'catalog.slug' | translate\"\n                                for=\"slug\"\n                                [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\n                            >\n                                <input\n                                    id=\"slug\"\n                                    type=\"text\"\n                                    formControlName=\"slug\"\n                                    [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                    pattern=\"[a-z0-9_-]+\"\n                                />\n                            </vdr-form-field>\n                            <vdr-rich-text-editor\n                                formControlName=\"description\"\n                                [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                [label]=\"'common.description' | translate\"\n                            ></vdr-rich-text-editor>\n\n                            <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                <label>{{ 'common.custom-fields' | translate }}</label>\n                                <ng-container *ngFor=\"let customField of customFields\">\n                                    <vdr-custom-field-control\n                                        *ngIf=\"customFieldIsSet(customField.name)\"\n                                        entityName=\"Product\"\n                                        [customFieldsFormGroup]=\"detailForm.get(['product', 'customFields'])\"\n                                        [customField]=\"customField\"\n                                        [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                                    ></vdr-custom-field-control>\n                                </ng-container>\n                            </section>\n\n                            <div class=\"facets\">\n                                <vdr-facet-value-chip\n                                    *ngFor=\"let facetValue of facetValues$ | async\"\n                                    [facetValue]=\"facetValue\"\n                                    [removable]=\"['UpdateCatalog', 'UpdateProduct'] | hasPermission\"\n                                    (remove)=\"removeProductFacetValue(facetValue.id)\"\n                                ></vdr-facet-value-chip>\n                                <button\n                                    class=\"btn btn-sm btn-secondary\"\n                                    *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                                    (click)=\"selectProductFacetValue()\"\n                                >\n                                    <clr-icon shape=\"plus\"></clr-icon>\n                                    {{ 'catalog.add-facets' | translate }}\n                                </button>\n                            </div>\n                        </section>\n                    </div>\n                    <div class=\"clr-col-md-auto\">\n                        <vdr-product-assets\n                            [assets]=\"assetChanges.assets || product.assets\"\n                            [featuredAsset]=\"assetChanges.featuredAsset || product.featuredAsset\"\n                            (change)=\"assetChanges = $event\"\n                        ></vdr-product-assets>\n                    </div>\n                </div>\n\n                <div *ngIf=\"isNew$ | async\">\n                    <h4>{{ 'catalog.product-variants' | translate }}</h4>\n                    <vdr-generate-product-variants\n                        (variantsChange)=\"createVariantsConfig = $event\"\n                    ></vdr-generate-product-variants>\n                </div>\n            </clr-tab-content>\n        </clr-tab>\n        <clr-tab *ngIf=\"!(isNew$ | async)\">\n            <button clrTabLink (click)=\"navigateToTab('variants')\">\n                {{ 'catalog.product-variants' | translate }}\n            </button>\n            <clr-tab-content *clrIfActive=\"(activeTab$ | async) === 'variants'\">\n                <section class=\"form-block\">\n                    <div class=\"view-mode\">\n                        <div class=\"btn-group\">\n                            <button\n                                class=\"btn btn-secondary-outline\"\n                                (click)=\"variantDisplayMode = 'card'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'card'\"\n                            >\n                                <clr-icon shape=\"list\"></clr-icon>\n                                {{ 'catalog.display-variant-cards' | translate }}\n                            </button>\n                            <button\n                                class=\"btn\"\n                                (click)=\"variantDisplayMode = 'table'\"\n                                [class.btn-primary]=\"variantDisplayMode === 'table'\"\n                            >\n                                <clr-icon shape=\"table\"></clr-icon>\n                                {{ 'catalog.display-variant-table' | translate }}\n                            </button>\n                        </div>\n                        <div class=\"variant-filter\">\n                            <input\n                                [formControl]=\"filterInput\"\n                                [placeholder]=\"'catalog.filter-by-name-or-sku' | translate\"\n                            />\n                            <button class=\"icon-button\" (click)=\"filterInput.setValue('')\">\n                                <clr-icon shape=\"times\"></clr-icon>\n                            </button>\n                        </div>\n                        <div class=\"flex-spacer\"></div>\n                        <a\n                            *vdrIfPermissions=\"['UpdateCatalog', 'UpdateProduct']\"\n                            [routerLink]=\"['./', 'manage-variants']\"\n                            class=\"btn btn-secondary edit-variants-btn\"\n                        >\n                            <clr-icon shape=\"add-text\"></clr-icon>\n                            {{ 'catalog.manage-variants' | translate }}\n                        </a>\n                    </div>\n\n                    <vdr-product-variants-table\n                        *ngIf=\"variantDisplayMode === 'table'\"\n                        [variants]=\"variants$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                    ></vdr-product-variants-table>\n                    <vdr-product-variants-list\n                        *ngIf=\"variantDisplayMode === 'card'\"\n                        [variants]=\"variants$ | async\"\n                        [channelPriceIncludesTax]=\"channelPriceIncludesTax$ | async\"\n                        [facets]=\"facets$ | async\"\n                        [optionGroups]=\"product.optionGroups\"\n                        [productVariantsFormArray]=\"detailForm.get('variants')\"\n                        [taxCategories]=\"taxCategories$ | async\"\n                        [customFields]=\"customVariantFields\"\n                        [customOptionFields]=\"customOptionFields\"\n                        [activeLanguage]=\"languageCode$ | async\"\n                        [pendingAssetChanges]=\"variantAssetChanges\"\n                        (assignToChannel)=\"assignVariantToChannel($event)\"\n                        (removeFromChannel)=\"removeVariantFromChannel($event)\"\n                        (assetChange)=\"variantAssetChange($event)\"\n                        (updateProductOption)=\"updateProductOption($event)\"\n                        (selectionChange)=\"selectedVariantIds = $event\"\n                        (selectFacetValueClick)=\"selectVariantFacetValue($event)\"\n                    ></vdr-product-variants-list>\n                </section>\n            </clr-tab-content>\n        </clr-tab>\n    </clr-tabs>\n</form>\n","import { Location } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CreateProductInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductWithVariants,\n    ServerConfigService,\n    TaxCategory,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { combineLatest, EMPTY, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    mergeMap,\n    shareReplay,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\n\nexport type TabName = 'details' | 'variants';\nexport interface VariantFormValue {\n    id: string;\n    enabled: boolean;\n    sku: string;\n    name: string;\n    price: number;\n    priceWithTax: number;\n    taxCategoryId: string;\n    stockOnHand: number;\n    useGlobalOutOfStockThreshold: boolean;\n    outOfStockThreshold: number;\n    trackInventory: GlobalFlag;\n    facetValueIds: string[];\n    customFields?: any;\n}\n\nexport interface SelectedAssets {\n    assets?: Asset[];\n    featuredAsset?: Asset;\n}\n\n@Component({\n    selector: 'vdr-product-detail',\n    templateUrl: './product-detail.component.html',\n    styleUrls: ['./product-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailComponent\n    extends BaseDetailComponent<ProductWithVariants.Fragment>\n    implements OnInit, OnDestroy {\n    activeTab$: Observable<TabName>;\n    product$: Observable<ProductWithVariants.Fragment>;\n    variants$: Observable<ProductWithVariants.Variants[]>;\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    customFields: CustomFieldConfig[];\n    customVariantFields: CustomFieldConfig[];\n    customOptionGroupFields: CustomFieldConfig[];\n    customOptionFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    filterInput = new FormControl('');\n    assetChanges: SelectedAssets = {};\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\n    productChannels$: Observable<ProductWithVariants.Channels[]>;\n    facetValues$: Observable<ProductWithVariants.FacetValues[]>;\n    facets$: Observable<FacetWithValues.Fragment[]>;\n    selectedVariantIds: string[] = [];\n    variantDisplayMode: 'card' | 'table' = 'card';\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\n    channelPriceIncludesTax$: Observable<boolean>;\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private location: Location,\n        private changeDetector: ChangeDetectorRef,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Product');\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\n        this.detailForm = this.formBuilder.group({\n            product: this.formBuilder.group({\n                enabled: true,\n                name: ['', Validators.required],\n                autoUpdateVariantNames: true,\n                slug: '',\n                description: '',\n                facetValueIds: [[]],\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            variants: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.product$ = this.entity$;\n        const variants$ = this.product$.pipe(map(product => product.variants));\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\n            startWith(''),\n            debounceTime(50),\n            shareReplay(),\n        );\n        this.variants$ = combineLatest(variants$, filterTerm$).pipe(\n            map(([variants, term]) => {\n                return term\n                    ? variants.filter(v => {\n                          const lcTerm = term.toLocaleLowerCase();\n                          return (\n                              v.name.toLocaleLowerCase().includes(term) ||\n                              v.sku.toLocaleLowerCase().includes(term)\n                          );\n                      })\n                    : variants;\n            }),\n        );\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\n\n        // FacetValues are provided initially by the nested array of the\n        // Product entity, but once a fetch to get all Facets is made (as when\n        // opening the FacetValue selector modal), then these additional values\n        // are concatenated onto the initial array.\n        this.facets$ = this.productDetailService.getFacets();\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\n        const productGroup = this.getProductFormGroup();\n\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\n            map(val => val.facetValueIds as string[]),\n            distinctUntilChanged(),\n        );\n        const formChangeFacetValues$ = combineLatest(\n            formFacetValueIdChanges$,\n            productFacetValues$,\n            allFacetValues$,\n        ).pipe(\n            map(([ids, productFacetValues, allFacetValues]) => {\n                const combined = [...productFacetValues, ...allFacetValues];\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\n            }),\n        );\n\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\n        this.channelPriceIncludesTax$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\n            .pipe(shareReplay(1));\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    navigateToTab(tabName: TabName) {\n        this.location.replaceState(\n            this.router\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                })\n                .toString(),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    assignToChannel() {\n        this.productChannels$\n            .pipe(\n                take(1),\n                switchMap(channels => {\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\n                        size: 'lg',\n                        locals: {\n                            productIds: [this.id],\n                            currentChannelIds: channels.map(c => c.id),\n                        },\n                    });\n                }),\n            )\n            .subscribe();\n    }\n\n    removeFromChannel(channelId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.remove-product-from-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeProductsFromChannel({\n                              channelId,\n                              productIds: [this.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\n                },\n            );\n    }\n\n    assignVariantToChannel(variant: ProductWithVariants.Variants) {\n        return this.modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: [this.id],\n                    productVariantIds: [variant.id],\n                    currentChannelIds: variant.channels.map(c => c.id),\n                },\n            })\n            .subscribe();\n    }\n\n    removeVariantFromChannel({\n        channelId,\n        variant,\n    }: {\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }) {\n        this.modalService\n            .dialog({\n                title: _('catalog.remove-product-variant-from-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeVariantsFromChannel({\n                              channelId,\n                              productVariantIds: [variant.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\n                },\n            );\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['product', 'customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    variantAssetsChanged(): boolean {\n        return !!Object.keys(this.variantAssetChanges).length;\n    }\n\n    variantAssetChange(event: VariantAssetChange) {\n        this.variantAssetChanges[event.variantId] = event;\n    }\n\n    /**\n     * If creating a new product, automatically generate the slug based on the product name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['product', 'slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    selectProductFacetValue() {\n        this.displayFacetValueModal().subscribe(facetValueIds => {\n            if (facetValueIds) {\n                const productGroup = this.getProductFormGroup();\n                const currentFacetValueIds = productGroup.value.facetValueIds;\n                productGroup.patchValue({\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\n                });\n                productGroup.markAsDirty();\n            }\n        });\n    }\n\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) =>\n                    this.productDetailService.updateProductOption(input, product, languageCode),\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOption',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOption',\n                    });\n                },\n            );\n    }\n\n    removeProductFacetValue(facetValueId: string) {\n        const productGroup = this.getProductFormGroup();\n        const currentFacetValueIds = productGroup.value.facetValueIds;\n        productGroup.patchValue({\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\n        });\n        productGroup.markAsDirty();\n    }\n\n    /**\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\n     */\n    selectVariantFacetValue(selectedVariantIds: string[]) {\n        this.displayFacetValueModal()\n            .pipe(withLatestFrom(this.variants$))\n            .subscribe(([facetValueIds, variants]) => {\n                if (facetValueIds) {\n                    for (const variantId of selectedVariantIds) {\n                        const index = variants.findIndex(v => v.id === variantId);\n                        const variant = variants[index];\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\n                        const variantFormGroup = this.detailForm.get(['variants', index]);\n                        if (variantFormGroup) {\n                            variantFormGroup.patchValue({\n                                facetValueIds: unique([...existingFacetValueIds, ...facetValueIds]),\n                            });\n                            variantFormGroup.markAsDirty();\n                        }\n                    }\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    variantsToCreateAreValid(): boolean {\n        return (\n            0 < this.createVariantsConfig.variants.length &&\n            this.createVariantsConfig.variants.every(v => {\n                return v.sku !== '';\n            })\n        );\n    }\n\n    private displayFacetValueModal(): Observable<string[] | undefined> {\n        return this.productDetailService.getFacets().pipe(\n            mergeMap(facets =>\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\n                    size: 'md',\n                    closable: true,\n                    locals: { facets },\n                }),\n            ),\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\n        );\n    }\n\n    create() {\n        const productGroup = this.getProductFormGroup();\n        if (!productGroup.dirty) {\n            return;\n        }\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) => {\n                    const newProduct = this.getUpdatedProduct(\n                        product,\n                        productGroup as FormGroup,\n                        languageCode,\n                    ) as CreateProductInput;\n                    return this.productDetailService.createProductWithVariants(\n                        newProduct,\n                        this.createVariantsConfig,\n                        languageCode,\n                    );\n                }),\n            )\n            .subscribe(\n                ({ createProductVariants, productId }) => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Product',\n                    });\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\n                },\n                err => {\n                    // tslint:disable-next-line:no-console\n                    console.error(err);\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\n                    const productGroup = this.getProductFormGroup();\n                    let productInput: UpdateProductInput | undefined;\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\n\n                    if (productGroup.dirty || this.assetsChanged()) {\n                        productInput = this.getUpdatedProduct(\n                            product,\n                            productGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateProductInput;\n                    }\n                    const variantsArray = this.detailForm.get('variants');\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\n                        variantsInput = this.getUpdatedProductVariants(\n                            product,\n                            variantsArray as FormArray,\n                            languageCode,\n                            priceIncludesTax,\n                        );\n                    }\n\n                    return this.productDetailService.updateProduct({\n                        product,\n                        languageCode,\n                        autoUpdate:\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\n                        productInput,\n                        variantsInput,\n                    });\n                }),\n            )\n            .subscribe(\n                result => {\n                    this.updateSlugAfterSave(result);\n                    this.detailForm.markAsPristine();\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Product',\n                    });\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the product or current language.\n     */\n    protected setFormValues(product: ProductWithVariants.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(product, languageCode);\n        this.detailForm.patchValue({\n            product: {\n                enabled: product.enabled,\n                name: currentTranslation ? currentTranslation.name : '',\n                slug: currentTranslation ? currentTranslation.slug : '',\n                description: currentTranslation ? currentTranslation.description : '',\n                facetValueIds: product.facetValues.map(fv => fv.id),\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['product', 'customFields']) as FormGroup;\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n            const cfProduct = (product as any).customFields || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = fieldDef.type === 'localeString' ? cfCurrentTranslation[key] : cfProduct[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\n        product.variants.forEach((variant, i) => {\n            const variantTranslation = findTranslation(variant, languageCode);\n            const facetValueIds = variant.facetValues.map(fv => fv.id);\n            const group: VariantFormValue = {\n                id: variant.id,\n                enabled: variant.enabled,\n                sku: variant.sku,\n                name: variantTranslation ? variantTranslation.name : '',\n                price: variant.price,\n                priceWithTax: variant.priceWithTax,\n                taxCategoryId: variant.taxCategory.id,\n                stockOnHand: variant.stockOnHand,\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\n                outOfStockThreshold: variant.outOfStockThreshold,\n                trackInventory: variant.trackInventory,\n                facetValueIds,\n            };\n\n            let variantFormGroup = variantsFormArray.at(i) as FormGroup | undefined;\n            if (variantFormGroup) {\n                variantFormGroup.patchValue(group);\n            } else {\n                variantFormGroup = this.formBuilder.group({\n                    ...group,\n                    facetValueIds: this.formBuilder.control(facetValueIds),\n                });\n                variantsFormArray.insert(i, variantFormGroup);\n            }\n            if (this.customVariantFields.length) {\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\n\n                if (!customFieldsGroup) {\n                    customFieldsGroup = this.formBuilder.group(\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                    );\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\n                }\n\n                for (const fieldDef of this.customVariantFields) {\n                    const key = fieldDef.name;\n                    const value =\n                        fieldDef.type === 'localeString'\n                            ? (variantTranslation as any).customFields[key]\n                            : (variant as any).customFields[key];\n                    const control = customFieldsGroup.get(key);\n                    if (control) {\n                        control.patchValue(value);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\n     * can then be persisted to the API.\n     */\n    private getUpdatedProduct(\n        product: ProductWithVariants.Fragment,\n        productFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductInput | CreateProductInput {\n        const updatedProduct = createUpdatedTranslatable({\n            translatable: product,\n            updatedFields: productFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: product.name || '',\n                slug: product.slug || '',\n                description: product.description || '',\n            },\n        });\n        return {\n            ...updatedProduct,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            facetValueIds: productFormGroup.value.facetValueIds,\n        } as UpdateProductInput | CreateProductInput;\n    }\n\n    /**\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedProductVariants(\n        product: ProductWithVariants.Fragment,\n        variantsFormArray: FormArray,\n        languageCode: LanguageCode,\n        priceIncludesTax: boolean,\n    ): UpdateProductVariantInput[] {\n        const dirtyVariants = product.variants.filter((v, i) => {\n            const formRow = variantsFormArray.get(i.toString());\n            return formRow && formRow.dirty;\n        });\n        const dirtyVariantValues = variantsFormArray.controls.filter(c => c.dirty).map(c => c.value);\n\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\n        }\n        return dirtyVariants\n            .map((variant, i) => {\n                const formValue: VariantFormValue = dirtyVariantValues[i];\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\n                    translatable: variant,\n                    updatedFields: formValue,\n                    customFieldConfig: this.customVariantFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n                result.taxCategoryId = formValue.taxCategoryId;\n                result.facetValueIds = formValue.facetValueIds;\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\n                const assetChanges = this.variantAssetChanges[variant.id];\n                if (assetChanges) {\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\n                }\n                return result;\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    private getProductFormGroup(): FormGroup {\n        return this.detailForm.get('product') as FormGroup;\n    }\n\n    /**\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\n     */\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\n        const firstResult = results[0];\n        const slugControl = this.detailForm.get(['product', 'slug']);\n\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\n            return input.hasOwnProperty('updateProduct');\n        }\n\n        if (slugControl && isUpdateMutation(firstResult)) {\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\n        }\n    }\n}\n","<ng-select\n    [addTag]=\"addTagFn\"\n    [placeholder]=\"'catalog.search-product-name-or-code' | translate\"\n    [items]=\"facetValueResults\"\n    [searchFn]=\"filterFacetResults\"\n    [hideSelected]=\"true\"\n    [multiple]=\"true\"\n    [markFirst]=\"false\"\n    (change)=\"onSelectChange($event)\"\n    #selectComponent\n>\n    <ng-template ng-header-tmp>\n        <div\n            class=\"search-header\"\n            *ngIf=\"selectComponent.searchTerm\"\n            [class.selected]=\"isSearchHeaderSelected()\"\n            (click)=\"selectComponent.selectTag()\"\n        >\n            {{ 'catalog.search-for-term' | translate }}: {{ selectComponent.searchTerm }}\n        </div>\n    </ng-template>\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n        <ng-container *ngIf=\"item.facetValue\">\n            <vdr-facet-value-chip\n                [facetValue]=\"item.facetValue\"\n                [removable]=\"true\"\n                (remove)=\"clear(item)\"\n            ></vdr-facet-value-chip>\n        </ng-container>\n        <ng-container *ngIf=\"!item.facetValue\">\n            <vdr-chip [icon]=\"'times'\" (iconClick)=\"clear(item)\">\"{{ item.label }}\"</vdr-chip>\n        </ng-container>\n    </ng-template>\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\n        <ng-container *ngIf=\"item.facetValue\">\n            <vdr-facet-value-chip [facetValue]=\"item.facetValue\" [removable]=\"false\"></vdr-facet-value-chip>\n        </ng-container>\n    </ng-template>\n</ng-select>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\n\n@Component({\n    selector: 'vdr-product-search-input',\n    templateUrl: './product-search-input.component.html',\n    styleUrls: ['./product-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\n})\nexport class ProductSearchInputComponent {\n    @Input() facetValueResults: SearchProducts.FacetValues[];\n    @Output() searchTermChange = new EventEmitter<string>();\n    @Output() facetValueChange = new EventEmitter<string[]>();\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\n    private lastTerm = '';\n    private lastFacetValueIds: string[] = [];\n\n    setSearchTerm(term: string | null) {\n        if (term) {\n            this.selectComponent.select({ label: term, value: { label: term } });\n        } else {\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\n            if (currentTerm) {\n                this.selectComponent.unselect(currentTerm);\n            }\n        }\n    }\n\n    setFacetValues(ids: string[]) {\n        const items = this.selectComponent.items;\n\n        this.selectComponent.selectedItems.forEach(item => {\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\n                this.selectComponent.unselect(item);\n            }\n        });\n\n        ids.map(id => {\n            return items.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\n        })\n            .filter(notNullOrUndefined)\n            .forEach(item => {\n                const isSelected = this.selectComponent.selectedItems.find(i => {\n                    const val = i.value;\n                    if (this.isFacetValueItem(val)) {\n                        return val.facetValue.id === item.facetValue.id;\n                    }\n                    return false;\n                });\n                if (!isSelected) {\n                    this.selectComponent.select({ label: '', value: item });\n                }\n            });\n    }\n\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\n        if (!this.isFacetValueItem(item)) {\n            return false;\n        }\n        return (\n            item.facetValue.name.toLowerCase().startsWith(term.toLowerCase()) ||\n            item.facetValue.facet.name.toLowerCase().startsWith(term.toLowerCase())\n        );\n    };\n\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\n        if (!Array.isArray(selectedItems)) {\n            selectedItems = [selectedItems];\n        }\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\n            | { label: string }\n            | undefined;\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\n\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\n\n        if (searchTerm !== this.lastTerm) {\n            this.searchTermChange.emit(searchTerm);\n            this.lastTerm = searchTerm;\n        }\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\n            this.facetValueChange.emit(facetValueIds);\n            this.lastFacetValueIds = facetValueIds;\n        }\n    }\n\n    addTagFn(item: any) {\n        return { label: item };\n    }\n\n    isSearchHeaderSelected(): boolean {\n        return this.selectComponent.itemsList.markedIndex === -1;\n    }\n\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\n    };\n}\n","<vdr-action-bar>\n    <vdr-ab-left [grow]=\"true\">\n        <div class=\"search-form\">\n            <vdr-product-search-input\n                #productSearchInputComponent\n                [facetValueResults]=\"facetValues$ | async\"\n                (searchTermChange)=\"setSearchTerm($event)\"\n                (facetValueChange)=\"setFacetValueIds($event)\"\n            ></vdr-product-search-input>\n            <vdr-dropdown class=\"search-settings-menu mr3\">\n                <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"cog\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        (click)=\"rebuildSearchIndex()\"\n                        [disabled]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n                    >\n                        {{ 'catalog.rebuild-search-index' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <clr-checkbox-wrapper>\n            <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"groupByProduct\" />\n            <label>{{ 'catalog.group-by-product' | translate }}</label>\n        </clr-checkbox-wrapper>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"product-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateCatalog', 'CreateProduct']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            <span class=\"full-label\">{{ 'catalog.create-new-product' | translate }}</span>\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <ng-template let-result=\"item\">\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\n            <div class=\"image-placeholder\">\n                <img\n                    *ngIf=\"\n                        groupByProduct\n                            ? result.productAsset\n                            : result.productVariantAsset || result.productAsset as asset;\n                        else imagePlaceholder\n                    \"\n                    [src]=\"asset | assetPreview:'tiny'\"\n                />\n                <ng-template #imagePlaceholder>\n                    <div class=\"placeholder\"><clr-icon shape=\"image\" size=\"48\"></clr-icon></div>\n                </ng-template>\n            </div>\n        </td>\n        <td class=\"left align-middle\" [class.disabled]=\"!result.enabled\">\n            {{ groupByProduct ? result.productName : result.productVariantName }}\n        </td>\n        <td class=\"align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-chip *ngIf=\"!result.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\n        </td>\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', result.productId]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\" [class.disabled]=\"!result.enabled\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteProduct(result.productId)\"\n                        [disabled]=\"!(['DeleteCatalog', 'DeleteProduct'] | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    JobQueueService,\n    JobState,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SearchInput,\n    SearchProducts,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { delay, map, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\n\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\n\n@Component({\n    selector: 'vdr-products-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\n    implements OnInit {\n    searchTerm = '';\n    facetValueIds: string[] = [];\n    groupByProduct = true;\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\n    @ViewChild('productSearchInputComponent', { static: true })\n    private productSearchInput: ProductSearchInputComponent;\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private jobQueueService: JobQueueService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\n            data => data.search,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) => ({\n                input: {\n                    skip,\n                    take,\n                    term: this.searchTerm,\n                    facetValueIds: this.facetValueIds,\n                    facetValueOperator: LogicalOperator.AND,\n                    groupByProduct: this.groupByProduct,\n                } as SearchInput,\n            }),\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\n        // this.facetValues$ = of([]);\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(term => {\n                this.productSearchInput.setSearchTerm(term);\n            });\n\n        const fvids$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\n\n        fvids$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\n            this.productSearchInput.setFacetValues(ids);\n        });\n\n        this.facetValues$.pipe(take(1), delay(100), withLatestFrom(fvids$)).subscribe(([__, ids]) => {\n            this.productSearchInput.setFacetValues(ids);\n        });\n    }\n\n    setSearchTerm(term: string) {\n        this.searchTerm = term;\n        this.setQueryParam({ q: term || null, page: 1 });\n        this.refresh();\n    }\n\n    setFacetValueIds(ids: string[]) {\n        this.facetValueIds = ids;\n        this.setQueryParam({ fvids: ids, page: 1 });\n        this.refresh();\n    }\n\n    rebuildSearchIndex() {\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\n            this.notificationService.info(_('catalog.reindexing'));\n            this.jobQueueService.addJob(reindex.id, job => {\n                if (job.state === JobState.COMPLETED) {\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\n                    this.notificationService.success(_('catalog.reindex-successful'), {\n                        count: job.result.indexedItemCount,\n                        time,\n                    });\n                    this.refresh();\n                } else {\n                    this.notificationService.error(_('catalog.reindex-error'));\n                }\n            });\n        });\n    }\n\n    deleteProduct(productId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\n                // Short delay to allow the product to be removed from the search index before\n                // refreshing.\n                delay(500),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Product',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n}\n","<div class=\"input-wrapper\" [class.focus]=\"isFocussed\" (click)=\"textArea.focus()\">\n    <div class=\"chips\" *ngIf=\"0 < options.length\">\n        <vdr-chip\n            *ngFor=\"let option of options; last as isLast\"\n            [icon]=\"option.locked ? 'lock' : 'times'\"\n            [class.selected]=\"isLast && lastSelected\"\n            [class.locked]=\"option.locked\"\n            [colorFrom]=\"groupName\"\n            (iconClick)=\"removeOption(option)\"\n        >\n            {{ option.name }}\n        </vdr-chip>\n    </div>\n    <textarea\n        #textArea\n        (keyup)=\"handleKey($event)\"\n        (focus)=\"isFocussed = true\"\n        (blur)=\"handleBlur()\"\n        [(ngModel)]=\"input\"\n        [disabled]=\"disabled\"\n    ></textarea>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    Provider,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => OptionValueInputComponent),\n    multi: true,\n};\n\n@Component({\n    selector: 'vdr-option-value-input',\n    templateUrl: './option-value-input.component.html',\n    styleUrls: ['./option-value-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\n})\nexport class OptionValueInputComponent implements ControlValueAccessor {\n    @Input() groupName = '';\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\n    options: Array<{ name: string; locked: boolean }>;\n    disabled = false;\n    input = '';\n    isFocussed = false;\n    lastSelected = false;\n    onChangeFn: (value: any) => void;\n    onTouchFn: (value: any) => void;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchFn = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    }\n\n    writeValue(obj: any): void {\n        this.options = obj || [];\n    }\n\n    focus() {\n        this.textArea.nativeElement.focus();\n    }\n\n    removeOption(option: { name: string; locked: boolean }) {\n        if (!option.locked) {\n            this.options = this.options.filter(o => o.name !== option.name);\n            this.onChangeFn(this.options);\n        }\n    }\n\n    handleKey(event: KeyboardEvent) {\n        switch (event.key) {\n            case ',':\n            case 'Enter':\n                this.addOptionValue();\n                event.preventDefault();\n                break;\n            case 'Backspace':\n                if (this.lastSelected) {\n                    this.removeLastOption();\n                    this.lastSelected = false;\n                } else if (this.input === '') {\n                    this.lastSelected = true;\n                }\n                break;\n            default:\n                this.lastSelected = false;\n        }\n    }\n\n    handleBlur() {\n        this.isFocussed = false;\n        this.addOptionValue();\n    }\n\n    private addOptionValue() {\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\n        this.input = '';\n        this.onChangeFn(this.options);\n    }\n\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\n        return input\n            .split(/[,\\n]/)\n            .map(s => s.trim())\n            .filter(s => s !== '')\n            .map(s => ({ name: s, locked: false }));\n    }\n\n    private removeLastOption() {\n        if (!this.options[this.options.length - 1].locked) {\n            this.options = this.options.slice(0, this.options.length - 1);\n        }\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-right>\n        <button\n            class=\"btn btn-primary\"\n            (click)=\"save()\"\n            [disabled]=\"!formValueChanged || getVariantsToAdd().length === 0\"\n        >\n            {{ 'common.add-new-variants' | translate: { count: getVariantsToAdd().length } }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input clrInput [(ngModel)]=\"group.name\" name=\"name\" [readonly]=\"!group.isNew\" />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n</div>\n<button\n    class=\"btn btn-primary-outline btn-sm\"\n    (click)=\"addOption()\"\n    *ngIf=\"product?.variants.length === 1 && product?.optionGroups.length === 0\"\n>\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>{{ 'common.create' | translate }}</th>\n                <th>{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tr *ngFor=\"let variant of generatedVariants\" [class.disabled]=\"!variant.enabled || variant.existing\">\n            <td>\n                <input\n                    type=\"checkbox\"\n                    *ngIf=\"!variant.existing\"\n                    [(ngModel)]=\"variant.enabled\"\n                    name=\"enabled\"\n                    clrCheckbox\n                    (ngModelChange)=\"formValueChanged = true\"\n                />\n            </td>\n            <td>\n                {{ getVariantName(variant) | translate }}\n            </td>\n            <td>\n                <clr-input-container *ngIf=\"!variant.existing\">\n                    <input\n                        clrInput\n                        type=\"text\"\n                        [(ngModel)]=\"variant.sku\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                        name=\"sku\"\n                        required\n                        (ngModelChange)=\"onFormChanged(variant)\"\n                    />\n                </clr-input-container>\n                <span *ngIf=\"variant.existing\">{{ variant.sku }}</span>\n            </td>\n            <td>\n                <clr-input-container *ngIf=\"!variant.existing\">\n                    <vdr-currency-input\n                        clrInput\n                        [(ngModel)]=\"variant.price\"\n                        name=\"price\"\n                        [currencyCode]=\"currencyCode\"\n                        (ngModelChange)=\"onFormChanged(variant)\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n                <span *ngIf=\"variant.existing\">{{ variant.price | localeCurrency: currencyCode }}</span>\n            </td>\n            <td>\n                <clr-input-container *ngIf=\"!variant.existing\">\n                    <input\n                        clrInput\n                        type=\"number\"\n                        [(ngModel)]=\"variant.stock\"\n                        name=\"stock\"\n                        min=\"0\"\n                        step=\"1\"\n                        (ngModelChange)=\"onFormChanged(variant)\"\n                    />\n                </clr-input-container>\n                <span *ngIf=\"variant.existing\">{{ variant.stock }}</span>\n            </td>\n            <td>\n                <vdr-dropdown *ngIf=\"variant.productVariantId as productVariantId\">\n                    <button class=\"icon-button\" vdrDropdownTrigger>\n                        <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                        <button\n                            type=\"button\"\n                            class=\"delete-button\"\n                            (click)=\"deleteVariant(productVariantId)\"\n                            vdrDropdownItem\n                        >\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'common.delete' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CreateProductOptionGroup,\n    CreateProductOptionInput,\n    CurrencyCode,\n    DataService,\n    DeactivateAware,\n    getDefaultUiLanguage,\n    GetProductVariantOptions,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductOptionGroupWithOptionsFragment,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { pick } from '@vendure/common/lib/pick';\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\n\nexport class GeneratedVariant {\n    isDefault: boolean;\n    options: Array<{ name: string; id?: string }>;\n    productVariantId?: string;\n    enabled: boolean;\n    existing: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n\n    constructor(config: Partial<GeneratedVariant>) {\n        for (const key of Object.keys(config)) {\n            this[key] = config[key];\n        }\n    }\n}\n\n@Component({\n    selector: 'vdr-product-variants-editor',\n    templateUrl: './product-variants-editor.component.html',\n    styleUrls: ['./product-variants-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\n    formValueChanged = false;\n    generatedVariants: GeneratedVariant[] = [];\n    optionGroups: Array<{\n        id?: string;\n        isNew: boolean;\n        name: string;\n        values: Array<{\n            id?: string;\n            name: string;\n            locked: boolean;\n        }>;\n    }>;\n    product: GetProductVariantOptions.Product;\n    currencyCode: CurrencyCode;\n    private languageCode: LanguageCode;\n\n    constructor(\n        private route: ActivatedRoute,\n        private dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        this.initOptionsAndVariants();\n        this.languageCode =\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n    }\n\n    onFormChanged(variantInfo: GeneratedVariant) {\n        this.formValueChanged = true;\n        variantInfo.enabled = true;\n    }\n\n    canDeactivate(): boolean {\n        return !this.formValueChanged;\n    }\n\n    getVariantsToAdd() {\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\n    }\n\n    getVariantName(variant: GeneratedVariant) {\n        return variant.options.length === 0\n            ? _('catalog.default-variant')\n            : variant.options.map(o => o.name).join(' ');\n    }\n\n    addOption() {\n        this.optionGroups.push({\n            isNew: true,\n            name: '',\n            values: [],\n        });\n    }\n\n    generateVariants() {\n        const groups = this.optionGroups.map(g => g.values);\n        const previousVariants = this.generatedVariants;\n        const generatedVariantFactory = (\n            isDefault: boolean,\n            options: GeneratedVariant['options'],\n            existingVariant?: GetProductVariantOptions.Variants,\n        ): GeneratedVariant => {\n            const prototype = this.getVariantPrototype(options, previousVariants);\n            return new GeneratedVariant({\n                enabled: false,\n                existing: !!existingVariant,\n                productVariantId: existingVariant?.id,\n                isDefault,\n                options,\n                price: existingVariant?.price ?? prototype.price,\n                sku: existingVariant?.sku ?? prototype.sku,\n                stock: existingVariant?.stockOnHand ?? prototype.stock,\n            });\n        };\n        this.generatedVariants = groups.length\n            ? generateAllCombinations(groups).map(options => {\n                  const existingVariant = this.product.variants.find(v =>\n                      this.optionsAreEqual(v.options, options),\n                  );\n                  return generatedVariantFactory(false, options, existingVariant);\n              })\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\n    }\n\n    /**\n     * Returns one of the existing variants to base the newly-generated variant's\n     * details off.\n     */\n    private getVariantPrototype(\n        options: GeneratedVariant['options'],\n        previousVariants: GeneratedVariant[],\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\n        );\n        if (variantsWithSimilarOptions.length) {\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\n        }\n        return {\n            sku: '',\n            price: 0,\n            stock: 0,\n        };\n    }\n\n    deleteVariant(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product-variant'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\n                ),\n                switchMap(() => this.reFetchProduct(null)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ProductVariant',\n                    });\n                    this.initOptionsAndVariants();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ProductVariant',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const newOptionGroups = this.optionGroups\n            .filter(og => og.isNew)\n            .map(og => ({\n                name: og.name,\n                values: [],\n            }));\n\n        this.confirmDeletionOfDefault()\n            .pipe(\n                mergeMap(() =>\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\n                ),\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\n                mergeMap(groups => this.createNewProductVariants(groups)),\n                mergeMap(res => this.deleteDefaultVariant(res.createProductVariants)),\n                mergeMap(variants => this.reFetchProduct(variants)),\n            )\n            .subscribe({\n                next: variants => {\n                    this.formValueChanged = false;\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\n                        count: variants.length,\n                    });\n                    this.initOptionsAndVariants();\n                },\n            });\n    }\n\n    private confirmDeletionOfDefault(): Observable<boolean> {\n        if (this.hasOnlyDefaultVariant(this.product)) {\n            return this.modalService\n                .dialog({\n                    title: _('catalog.confirm-adding-options-delete-default-title'),\n                    body: _('catalog.confirm-adding-options-delete-default-body'),\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        { type: 'danger', label: _('catalog.delete-default-variant'), returnValue: true },\n                    ],\n                })\n                .pipe(\n                    mergeMap(res => {\n                        return res === true ? of(true) : EMPTY;\n                    }),\n                );\n        } else {\n            return of(true);\n        }\n    }\n\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\n        return product.variants.length === 1 && product.optionGroups.length === 0;\n    }\n\n    private addOptionGroupsToProduct(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\n        if (createdOptionGroups.length) {\n            return forkJoin(\n                createdOptionGroups.map(optionGroup => {\n                    return this.dataService.product.addOptionGroupToProduct({\n                        productId: this.product.id,\n                        optionGroupId: optionGroup.id,\n                    });\n                }),\n            ).pipe(map(() => createdOptionGroups));\n        } else {\n            return of([]);\n        }\n    }\n\n    private addNewOptionsToGroups(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<string[]> {\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\n            .map(og => {\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\n                if (!productOptionGroupId) {\n                    throw new Error('Could not get a productOptionGroupId');\n                }\n                return og.values\n                    .filter(v => !v.locked)\n                    .map(v => ({\n                        productOptionGroupId,\n                        code: normalizeString(v.name, '-'),\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\n                    }));\n            })\n            .reduce((flat, options) => [...flat, ...options], []);\n\n        const allGroupIds = [\n            ...createdOptionGroups.map(g => g.id),\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\n        ];\n\n        if (newOptions.length) {\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\n                map(() => allGroupIds),\n            );\n        } else {\n            return of(allGroupIds);\n        }\n    }\n\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\n        return forkJoin(\n            groupsIds.map(id =>\n                this.dataService.product\n                    .getProductOptionGroup(id)\n                    .mapSingle(data => data.productOptionGroup)\n                    .pipe(filter(notNullOrUndefined)),\n            ),\n        );\n    }\n\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\n        const options = groups\n            .filter(notNullOrUndefined)\n            .map(og => og.options)\n            .reduce((flat, o) => [...flat, ...o], []);\n        const variants = this.generatedVariants\n            .filter(v => v.enabled && !v.existing)\n            .map(v => ({\n                price: v.price,\n                sku: v.sku,\n                stock: v.stock,\n                optionIds: v.options\n                    .map(name => options.find(o => o.name === name.name))\n                    .filter(notNullOrUndefined)\n                    .map(o => o.id),\n            }));\n        return this.productDetailService.createProductVariants(\n            this.product,\n            variants,\n            options,\n            this.languageCode,\n        );\n    }\n\n    private deleteDefaultVariant<T>(input: T): Observable<T> {\n        if (this.hasOnlyDefaultVariant(this.product)) {\n            // If the default single product variant has been replaced by multiple variants,\n            // delete the original default variant.\n            return this.dataService.product\n                .deleteProductVariant(this.product.variants[0].id)\n                .pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    private reFetchProduct<T>(input: T): Observable<T> {\n        // Re-fetch the Product to force an update to the view.\n        const id = this.route.snapshot.paramMap.get('id');\n        if (id) {\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    initOptionsAndVariants() {\n        this.dataService.product\n            // tslint:disable-next-line:no-non-null-assertion\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\n            // tslint:disable-next-line:no-non-null-assertion\n            .mapSingle(({ product }) => product!)\n            .subscribe(p => {\n                this.product = p;\n                this.optionGroups = p.optionGroups.map(og => {\n                    return {\n                        id: og.id,\n                        isNew: false,\n                        name: og.name,\n                        values: og.options.map(o => ({\n                            id: o.id,\n                            name: o.name,\n                            locked: true,\n                        })),\n                    };\n                });\n                this.generateVariants();\n            });\n    }\n\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        function toOptionString(o: Array<{ name: string }>) {\n            return o\n                .map(x => x.name)\n                .sort()\n                .join('|');\n        }\n\n        return toOptionString(a) === toOptionString(b);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Asset' as const,\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                type: AssetType.IMAGE,\n                fileSize: 0,\n                mimeType: '',\n                width: 0,\n                height: 0,\n                source: '',\n                preview: '',\n                focalPoint: null,\n            },\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Collection, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Collection' as 'Collection',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                isPrivate: false,\n                description: '',\n                featuredAsset: null,\n                assets: [],\n                translations: [],\n                filters: [],\n                parent: {} as any,\n                children: null,\n            },\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { FacetWithValues } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Facet' as 'Facet',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                isPrivate: false,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                code: '',\n                translations: [],\n                values: [],\n            },\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ProductWithVariants } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductResolver extends BaseEntityResolver<ProductWithVariants.Fragment> {\n    constructor(dataService: DataService, router: Router) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                enabled: true,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                featuredAsset: null,\n                assets: [],\n                description: '',\n                translations: [],\n                optionGroups: [],\n                facetValues: [],\n                variants: [],\n                channels: [],\n            },\n            (id) =>\n                dataService.product\n                    .getProduct(id)\n                    .refetchOnChannelChange()\n                    .mapStream((data) => data.product),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                optionGroups: [],\n                variants: [],\n            },\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    CanDeactivateDetailGuard,\n    Collection,\n    createResolveData,\n    detailBreadcrumb,\n    FacetWithValues,\n    ProductWithVariants,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { AssetResolver } from './providers/routing/asset-resolver';\nimport { CollectionResolver } from './providers/routing/collection-resolver';\nimport { FacetResolver } from './providers/routing/facet-resolver';\nimport { ProductResolver } from './providers/routing/product-resolver';\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\n\nexport const catalogRoutes: Route[] = [\n    {\n        path: 'products',\n        component: ProductListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.products'),\n        },\n    },\n    {\n        path: 'products/:id',\n        component: ProductDetailComponent,\n        resolve: createResolveData(ProductResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/manage-variants',\n        component: ProductVariantsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productVariantEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'facets',\n        component: FacetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.facets'),\n        },\n    },\n    {\n        path: 'facets/:id',\n        component: FacetDetailComponent,\n        resolve: createResolveData(FacetResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: facetBreadcrumb,\n        },\n    },\n    {\n        path: 'collections',\n        component: CollectionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.collections'),\n        },\n    },\n    {\n        path: 'collections/:id',\n        component: CollectionDetailComponent,\n        resolve: createResolveData(CollectionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: collectionBreadcrumb,\n        },\n    },\n    {\n        path: 'assets',\n        component: AssetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.assets'),\n        },\n    },\n    {\n        path: 'assets/:id',\n        component: AssetDetailComponent,\n        resolve: createResolveData(AssetResolver),\n        data: {\n            breadcrumb: assetBreadcrumb,\n        },\n    },\n];\n\nexport function productBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ProductWithVariants.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.products',\n        getName: product => product.name,\n        route: 'products',\n    });\n}\n\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.manage-variants'),\n                    link: ['manage-variants'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function facetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<FacetWithValues.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.facets',\n        getName: facet => facet.name,\n        route: 'facets',\n    });\n}\n\nexport function collectionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Collection.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.collections',\n        getName: collection => collection.name,\n        route: 'collections',\n    });\n}\n\nexport function assetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Asset.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.assets',\n        getName: asset => asset.name,\n        route: 'assets',\n    });\n}\n","<div\n    cdkDropList\n    class=\"tree-node\"\n    #dropList\n    [cdkDropListData]=\"collectionTree\"\n    [cdkDropListDisabled]=\"!(hasUpdatePermission$ | async)\"\n    (cdkDropListDropped)=\"drop($event)\"\n>\n    <div\n        class=\"collection\"\n        [class.private]=\"collection.isPrivate\"\n        *ngFor=\"let collection of collectionTree.children; index as i; trackBy: trackByFn\"\n        cdkDrag\n        [cdkDragData]=\"collection\"\n    >\n        <div\n            class=\"collection-detail\"\n            [ngClass]=\"'depth-' + depth\"\n            [class.active]=\"collection.id === activeCollectionId\"\n        >\n            <div class=\"name\">\n                <button\n                    class=\"icon-button folder-button\"\n                    [disabled]=\"expandAll\"\n                    *ngIf=\"collection.children?.length; else folderSpacer\"\n                    (click)=\"collection.expanded = !collection.expanded\"\n                >\n                    <clr-icon shape=\"folder\" *ngIf=\"!collection.expanded && !expandAll\"></clr-icon>\n                    <clr-icon shape=\"folder-open\" *ngIf=\"collection.expanded || expandAll\"></clr-icon>\n                </button>\n                <ng-template #folderSpacer>\n                    <div class=\"folder-button-spacer\"></div>\n                </ng-template>\n                {{ collection.name }}\n            </div>\n            <div class=\"flex-spacer\"></div>\n            <vdr-chip *ngIf=\"collection.isPrivate\">{{ 'catalog.private' | translate }}</vdr-chip>\n            <a\n                class=\"btn btn-link btn-sm\"\n                [routerLink]=\"['./', { contents: collection.id }]\"\n                queryParamsHandling=\"preserve\"\n            >\n                <clr-icon shape=\"view-list\"></clr-icon>\n                {{ 'catalog.view-contents' | translate }}\n            </a>\n            <a class=\"btn btn-link btn-sm\" [routerLink]=\"['/catalog/collections/', collection.id]\">\n                <clr-icon shape=\"edit\"></clr-icon>\n                {{ 'common.edit' | translate }}\n            </a>\n            <div class=\"drag-handle\" cdkDragHandle *vdrIfPermissions=\"['UpdateCatalog', 'UpdateCollection']\">\n                <clr-icon shape=\"drag-handle\" size=\"24\"></clr-icon>\n            </div>\n            <vdr-dropdown>\n                <button class=\"icon-button\" vdrDropdownTrigger>\n                    <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <a\n                        class=\"dropdown-item\"\n                        [routerLink]=\"['./', 'create', { parentId: collection.id }]\"\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateCollection']\"\n                    >\n                        <clr-icon shape=\"plus\"></clr-icon>\n                        {{ 'catalog.create-new-collection' | translate }}\n                    </a>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"i === 0 || !(hasUpdatePermission$ | async)\"\n                        (click)=\"moveUp(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret up\"></clr-icon>\n                        {{ 'catalog.move-up' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        [disabled]=\"\n                            i === collectionTree.children.length - 1 || !(hasUpdatePermission$ | async)\n                        \"\n                        (click)=\"moveDown(collection, i)\"\n                    >\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                        {{ 'catalog.move-down' | translate }}\n                    </button>\n                    <h4 class=\"dropdown-header\">{{ 'catalog.move-to' | translate }}</h4>\n                    <button\n                        type=\"button\"\n                        vdrDropdownItem\n                        *ngFor=\"let item of getMoveListItems(collection)\"\n                        (click)=\"move(collection, item.id)\"\n                        [disabled]=\"!(hasUpdatePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"child-arrow\"></clr-icon>\n                        {{ item.path }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        class=\"button\"\n                        vdrDropdownItem\n                        (click)=\"delete(collection.id)\"\n                        [disabled]=\"!(hasDeletePermission$ | async)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n        <vdr-collection-tree-node\n            *ngIf=\"collection.expanded || expandAll\"\n            [expandAll]=\"expandAll\"\n            [collectionTree]=\"collection\"\n            [activeCollectionId]=\"activeCollectionId\"\n        ></vdr-collection-tree-node>\n    </div>\n</div>\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { DataService, Permission } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    getMoveListItems(collection: CollectionPartial): Array<{ path: string; id: string }> {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            output: Array<{ path: string; id: string }>,\n        ) => {\n            if (node.id !== collection.id) {\n                const path = parentPath.concat(node.name);\n                const parentId = collection.parent && collection.parent.id;\n                if (node.id !== parentId) {\n                    output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id });\n                }\n                node.children.forEach(child => visit(child, path, output));\n            }\n            return output;\n        };\n        return visit(this.root.collectionTree, [], []);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"btn btn-icon btn-warning-outline\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            </tr>\n        </thead>\n        <tr\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\n        >\n            <td *ngIf=\"1 < variants.length\">\n                <input\n                    type=\"checkbox\"\n                    (change)=\"onFormChange()\"\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\n                    clrCheckbox\n                />\n            </td>\n            <td *ngIf=\"1 < variants.length\">\n                {{ variant.values.join(' ') }}\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        (change)=\"onFormChange()\"\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <vdr-currency-input\n                        clrInput\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\n                        (ngModelChange)=\"onFormChange()\"\n                        [currencyCode]=\"currencyCode\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"number\"\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\n                        (change)=\"onFormChange()\"\n                        min=\"0\"\n                        step=\"1\"\n                    />\n                </clr-input-container>\n            </td>\n        </tr>\n    </table>\n</div>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\n\nimport { CurrencyCode } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\n\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\nexport type CreateVariantValues = {\n    optionValues: string[];\n    enabled: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n};\nexport type CreateProductVariantsConfig = {\n    groups: Array<{ name: string; values: string[] }>;\n    variants: CreateVariantValues[];\n};\n\n@Component({\n    selector: 'vdr-generate-product-variants',\n    templateUrl: './generate-product-variants.component.html',\n    styleUrls: ['./generate-product-variants.component.scss'],\n})\nexport class GenerateProductVariantsComponent implements OnInit {\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\n    currencyCode: CurrencyCode;\n    variants: Array<{ id: string; values: string[] }>;\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n\n        this.generateVariants();\n    }\n\n    addOption() {\n        this.optionGroups.push({ name: '', values: [] });\n    }\n\n    removeOption(name: string) {\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\n        this.generateVariants();\n    }\n\n    generateVariants() {\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\n        const groups = totalValuesCount\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\n            : [[DEFAULT_VARIANT_CODE]];\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\n\n        this.variants.forEach(variant => {\n            if (!this.variantFormValues[variant.id]) {\n                this.variantFormValues[variant.id] = {\n                    optionValues: variant.values,\n                    enabled: true,\n                    price: this.copyFromDefault(variant.id, 'price', 0),\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\n                };\n            }\n        });\n        this.onFormChange();\n    }\n\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\n        return variant.values.join('|');\n    }\n\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\n        event.preventDefault();\n        event.stopPropagation();\n        optionValueInputComponent.focus();\n    }\n\n    onFormChange() {\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\n        this.variantsChange.emit({\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\n            variants: variantsToCreate,\n        });\n    }\n\n    private copyFromDefault<T extends keyof CreateVariantValues>(\n        variantId: string,\n        prop: T,\n        value: CreateVariantValues[T],\n    ): CreateVariantValues[T] {\n        return variantId !== DEFAULT_VARIANT_CODE\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\n            : value;\n    }\n}\n","<div class=\"card\" *ngIf=\"!compact; else compactView\">\n    <div class=\"card-img\">\n        <div class=\"featured-asset\">\n            <img\n                *ngIf=\"featuredAsset\"\n                [src]=\"featuredAsset | assetPreview:'small'\"\n                (click)=\"previewAsset(featuredAsset)\"\n            />\n            <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\">\n                <clr-icon shape=\"image\" size=\"128\"></clr-icon>\n                <div>{{ 'catalog.no-featured-asset' | translate }}</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-block\"><ng-container *ngTemplateOutlet=\"assetList\"></ng-container></div>\n    <div class=\"card-footer\" *vdrIfPermissions=\"updatePermissions\">\n        <button class=\"btn\" (click)=\"selectAssets()\">\n            <clr-icon shape=\"attachment\"></clr-icon>\n            {{ 'asset.add-asset' | translate }}\n        </button>\n    </div>\n</div>\n\n<ng-template #compactView>\n    <div class=\"featured-asset compact\">\n        <img\n            *ngIf=\"featuredAsset\"\n            [src]=\"featuredAsset | assetPreview:'thumb'\"\n            (click)=\"previewAsset(featuredAsset)\"\n        />\n\n        <div class=\"placeholder\" *ngIf=\"!featuredAsset\" (click)=\"selectAssets()\"><clr-icon shape=\"image\" size=\"150\"></clr-icon></div>\n    </div>\n    <ng-container *ngTemplateOutlet=\"assetList\"></ng-container>\n    <button\n        *vdrIfPermissions=\"updatePermissions\"\n        class=\"compact-select btn btn-icon btn-sm btn-block\"\n        [title]=\"'asset.add-asset' | translate\"\n        (click)=\"selectAssets()\"\n    >\n        <clr-icon shape=\"attachment\"></clr-icon>\n        {{ 'asset.add-asset' | translate }}\n    </button>\n</ng-template>\n\n<ng-template #assetList>\n    <div class=\"all-assets\" [class.compact]=\"compact\" cdkDropListGroup #dlg>\n        <div\n            cdkDropList\n            #dl\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\n            [cdkDropListEnterPredicate]=\"dropListEnterPredicate\"\n            (cdkDropListDropped)=\"dropListDropped()\"\n        ></div>\n        <div\n            *ngFor=\"let asset of assets\"\n            cdkDropList\n            [cdkDropListDisabled]=\"!(updatePermissions | hasPermission)\"\n            [cdkDropListEnterPredicate]=\"dropListEnterPredicate\"\n            (cdkDropListDropped)=\"dropListDropped()\"\n        >\n            <vdr-dropdown cdkDrag (cdkDragMoved)=\"dragMoved($event)\">\n                <div\n                    class=\"asset-thumb\"\n                    vdrDropdownTrigger\n                    [class.featured]=\"isFeatured(asset)\"\n                    [title]=\"\"\n                    tabindex=\"0\"\n                >\n                    <img [src]=\"asset | assetPreview:'tiny'\" />\n                </div>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button type=\"button\" vdrDropdownItem (click)=\"previewAsset(asset)\">\n                        {{ 'asset.preview' | translate }}\n                    </button>\n                    <button\n                        type=\"button\"\n                        [disabled]=\"isFeatured(asset) || !(updatePermissions | hasPermission)\"\n                        vdrDropdownItem\n                        (click)=\"setAsFeatured(asset)\"\n                    >\n                        {{ 'asset.set-as-featured-asset' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        type=\"button\"\n                        class=\"remove-asset\"\n                        vdrDropdownItem\n                        [disabled]=\"!(updatePermissions | hasPermission)\"\n                        (click)=\"removeAsset(asset)\"\n                    >\n                        {{ 'asset.remove-asset' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </div>\n    </div>\n</ng-template>\n","import { CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport {\n    Asset,\n    AssetPickerDialogComponent,\n    AssetPreviewDialogComponent,\n    ModalService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nimport { CollectionDetailComponent } from '../collection-detail/collection-detail.component';\n\nexport interface AssetChange {\n    assets: Asset[];\n    featuredAsset: Asset | undefined;\n}\n\n/**\n * A component which displays the Assets associated with a product, and allows assets to be removed and\n * added, and for the featured asset to be set.\n *\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\n */\n@Component({\n    selector: 'vdr-product-assets',\n    templateUrl: './product-assets.component.html',\n    styleUrls: ['./product-assets.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAssetsComponent implements AfterViewInit {\n    @Input('assets') set assetsSetter(val: Asset[]) {\n        // create a new non-readonly array of assets\n        this.assets = val.slice();\n    }\n    @Input() featuredAsset: Asset | undefined;\n    @HostBinding('class.compact')\n    @Input()\n    compact = false;\n    @Output() change = new EventEmitter<AssetChange>();\n    @ViewChild('dlg', { static: false, read: CdkDropListGroup }) listGroup: CdkDropListGroup<CdkDropList>;\n    @ViewChild('dl', { static: false, read: CdkDropList }) placeholder: CdkDropList;\n\n    public target: CdkDropList | null;\n    public targetIndex: number;\n    public source: CdkDropList | null;\n    public sourceIndex: number;\n    public dragIndex: number;\n    public activeContainer;\n    public assets: Asset[] = [];\n\n    private readonly updateCollectionPermissions = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    private readonly updateProductPermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    get updatePermissions(): Permission[] {\n        if (this.collectionDetailComponent) {\n            return this.updateCollectionPermissions;\n        } else {\n            return this.updateProductPermissions;\n        }\n    }\n\n    constructor(\n        private modalService: ModalService,\n        private changeDetector: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private collectionDetailComponent?: CollectionDetailComponent,\n    ) {}\n\n    ngAfterViewInit() {\n        const phElement = this.placeholder.element.nativeElement;\n\n        phElement.style.display = 'none';\n        if (phElement.parentElement) {\n            phElement.parentElement.removeChild(phElement);\n        }\n    }\n\n    selectAssets() {\n        this.modalService\n            .fromComponent(AssetPickerDialogComponent, {\n                size: 'xl',\n            })\n            .subscribe(result => {\n                if (result && result.length) {\n                    this.assets = unique(this.assets.concat(result), 'id');\n                    if (!this.featuredAsset) {\n                        this.featuredAsset = result[0];\n                    }\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    setAsFeatured(asset: Asset) {\n        this.featuredAsset = asset;\n        this.emitChangeEvent(this.assets, asset);\n    }\n\n    isFeatured(asset: Asset): boolean {\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\n    }\n\n    previewAsset(asset: Asset) {\n        this.modalService\n            .fromComponent(AssetPreviewDialogComponent, {\n                size: 'xl',\n                closable: true,\n                locals: { asset },\n            })\n            .subscribe();\n    }\n\n    removeAsset(asset: Asset) {\n        this.assets = this.assets.filter(a => a.id !== asset.id);\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\n        }\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\n        this.change.emit({\n            assets,\n            featuredAsset,\n        });\n    }\n\n    dragMoved(e: CdkDragMove) {\n        const point = this.getPointerPositionOnPage(e.event);\n\n        this.listGroup._items.forEach(dropList => {\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\n                this.activeContainer = dropList;\n                return;\n            }\n        });\n    }\n\n    dropListDropped() {\n        if (!this.target || !this.source) {\n            return;\n        }\n\n        const phElement = this.placeholder.element.nativeElement;\n        // tslint:disable-next-line:no-non-null-assertion\n        const parent = phElement.parentElement!;\n\n        phElement.style.display = 'none';\n\n        parent.removeChild(phElement);\n        parent.appendChild(phElement);\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\n\n        this.target = null;\n        this.source = null;\n\n        if (this.sourceIndex !== this.targetIndex) {\n            moveItemInArray(this.assets, this.sourceIndex, this.targetIndex);\n            this.emitChangeEvent(this.assets, this.featuredAsset);\n        }\n    }\n\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\n        if (drop === this.placeholder) {\n            return true;\n        }\n        if (drop !== this.activeContainer) {\n            return false;\n        }\n\n        const phElement = this.placeholder.element.nativeElement;\n        const sourceElement = drag.dropContainer.element.nativeElement;\n        const dropElement = drop.element.nativeElement;\n        const children = dropElement.parentElement && dropElement.parentElement.children;\n\n        const dragIndex = __indexOf(children, this.source ? phElement : sourceElement);\n        const dropIndex = __indexOf(children, dropElement);\n\n        if (!this.source) {\n            this.sourceIndex = dragIndex;\n            this.source = drag.dropContainer;\n\n            phElement.style.width = sourceElement.clientWidth + 'px';\n            phElement.style.height = sourceElement.clientHeight + 'px';\n\n            if (sourceElement.parentElement) {\n                sourceElement.parentElement.removeChild(sourceElement);\n            }\n        }\n\n        this.targetIndex = dropIndex;\n        this.target = drop;\n\n        phElement.style.display = '';\n        if (dropElement.parentElement) {\n            dropElement.parentElement.insertBefore(\n                phElement,\n                dropIndex > dragIndex ? dropElement.nextSibling : dropElement,\n            );\n        }\n\n        this.placeholder._dropListRef.enter(\n            drag._dragRef,\n            drag.element.nativeElement.offsetLeft,\n            drag.element.nativeElement.offsetTop,\n        );\n        return false;\n    };\n\n    /** Determines the point of the page that was touched by the user. */\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        const point = __isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\n\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top,\n        };\n    }\n}\n\nfunction __indexOf(collection: HTMLCollection | null, node: HTMLElement) {\n    if (!collection) {\n        return -1;\n    }\n    return Array.prototype.indexOf.call(collection, node);\n}\n\n/** Determines whether an event is a touch event. */\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n}\n\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\n    const { top, bottom, left, right } = dropList.element.nativeElement.getBoundingClientRect();\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n","<ng-template vdrDialogTitle>{{ 'catalog.update-product-option' | translate }}</ng-template>\n<vdr-form-field [label]=\"'catalog.option-name' | translate\" for=\"name\">\n    <input\n        id=\"name\"\n        type=\"text\"\n        #nameInput=\"ngModel\"\n        [(ngModel)]=\"name\"\n        required\n        (input)=\"updateCode($event.target.value)\"\n    />\n</vdr-form-field>\n<vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\n    <input id=\"code\" type=\"text\" #codeInput=\"ngModel\" required [(ngModel)]=\"code\" pattern=\"[a-z0-9_-]+\" />\n</vdr-form-field>\n<clr-checkbox-wrapper>\n    <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"updateVariantName\" />\n    <label>{{ 'catalog.auto-update-option-variant-name' | translate }}</label>\n</clr-checkbox-wrapper>\n<section *ngIf=\"customFields.length\">\n    <label>{{ 'common.custom-fields' | translate }}</label>\n    <ng-container *ngFor=\"let customField of customFields\">\n        <vdr-custom-field-control\n            *ngIf=\"customFieldsForm.get(customField.name)\"\n            entityName=\"ProductOption\"\n            [customFieldsFormGroup]=\"customFieldsForm\"\n            [customField]=\"customField\"\n            [readonly]=\"!(['UpdateCatalog', 'UpdateProduct'] | hasPermission)\"\n        ></vdr-custom-field-control>\n    </ng-container>\n</section>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"update()\"\n        [disabled]=\"\n            nameInput.invalid ||\n            codeInput.invalid ||\n            (nameInput.pristine && codeInput.pristine && customFieldsForm.pristine)\n        \"\n        class=\"btn btn-primary\"\n    >\n        {{ 'catalog.update-product-option' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    LanguageCode,\n    ProductVariant,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\n\n@Component({\n    selector: 'vdr-update-product-option-dialog',\n    templateUrl: './update-product-option-dialog.component.html',\n    styleUrls: ['./update-product-option-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpdateProductOptionDialogComponent\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\n    updateVariantName = true;\n    // Provided by caller\n    productOption: ProductVariant.Options;\n    activeLanguage: LanguageCode;\n    name: string;\n    code: string;\n    customFields: CustomFieldConfig[];\n    codeInputTouched = false;\n    customFieldsForm: FormGroup;\n\n    ngOnInit(): void {\n        const currentTranslation = this.productOption.translations.find(\n            t => t.languageCode === this.activeLanguage,\n        );\n        this.name = currentTranslation?.name ?? '';\n        this.code = this.productOption.code;\n        this.customFieldsForm = new FormGroup({});\n        if (this.customFields) {\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? cfCurrentTranslation[key]\n                        : (this.productOption as any).customFields[key];\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\n            }\n        }\n    }\n\n    update() {\n        const result = createUpdatedTranslatable({\n            translatable: this.productOption,\n            languageCode: this.activeLanguage,\n            updatedFields: {\n                code: this.code,\n                name: this.name,\n                customFields: this.customFieldsForm.value,\n            },\n            customFieldConfig: this.customFields,\n            defaultTranslation: {\n                languageCode: this.activeLanguage,\n                name: '',\n            },\n        });\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    updateCode(nameValue: string) {\n        if (!this.codeInputTouched && !this.productOption.code) {\n            this.code = normalizeString(nameValue, '-');\n        }\n    }\n}\n","<label class=\"clr-control-label\">{{ 'catalog.taxes' | translate }}</label>\n<div *ngIf=\"priceIncludesTax\" class=\"value\">\n    {{ 'catalog.price-includes-tax-at' | translate: { rate: taxRate$ | async } }}\n</div>\n<div *ngIf=\"!priceIncludesTax\" class=\"value\">\n    {{\n        'catalog.price-with-tax-in-default-zone'\n            | translate: { price: grossPrice$ | async | localeCurrency: currencyCode, rate: taxRate$ | async }\n    }}\n</div>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-variant-price-detail',\n    templateUrl: './variant-price-detail.component.html',\n    styleUrls: ['./variant-price-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\n    @Input() priceIncludesTax: boolean;\n    @Input() price: number;\n    @Input() currencyCode: string;\n    @Input() taxCategoryId: string;\n\n    grossPrice$: Observable<number>;\n    taxRate$: Observable<number>;\n\n    private priceChange$ = new BehaviorSubject<number>(0);\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const taxRates$ = this.dataService.settings\n            .getTaxRates(999, 0, 'cache-first')\n            .mapStream(data => data.taxRates.items);\n        const activeChannel$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel);\n\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\n            map(([channel, taxRates, taxCategoryId]) => {\n                const defaultTaxZone = channel.defaultTaxZone;\n                if (!defaultTaxZone) {\n                    return 0;\n                }\n                const applicableRate = taxRates.find(\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\n                );\n\n                if (!applicableRate) {\n                    return 0;\n                }\n                return applicableRate.value;\n            }),\n        );\n\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\n            map(([taxRate, price]) => {\n                return Math.round(price * ((100 + taxRate) / 100));\n            }),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('price' in changes) {\n            this.priceChange$.next(changes.price.currentValue);\n        }\n        if ('taxCategoryId' in changes) {\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\n        }\n    }\n}\n","<div class=\"variants-list\">\n    <div\n        class=\"variant-container card\"\n        *ngFor=\"let variant of variants | paginate: pagination; trackBy: trackById; let i = index\"\n        [class.disabled]=\"!formGroupMap.get(variant.id)?.get('enabled')?.value\"\n    >\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n            <div class=\"card-block header-row\">\n                <div class=\"details\">\n                    <vdr-title-input class=\"sku\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"sku\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'catalog.sku' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                    <vdr-title-input class=\"name\" [readonly]=\"!(updatePermission | hasPermission)\">\n                        <clr-input-container>\n                            <input\n                                clrInput\n                                type=\"text\"\n                                formControlName=\"name\"\n                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                [placeholder]=\"'common.name' | translate\"\n                            />\n                        </clr-input-container>\n                    </vdr-title-input>\n                </div>\n                <div class=\"right-controls\">\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermission\">\n                        <input type=\"checkbox\" clrToggle name=\"enabled\" formControlName=\"enabled\" />\n                        <label>{{ 'common.enabled' | translate }}</label>\n                    </clr-toggle-wrapper>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"variant-body\">\n                    <div class=\"assets\">\n                        <vdr-product-assets\n                            [compact]=\"true\"\n                            [assets]=\"pendingAssetChanges[variant.id]?.assets || variant.assets\"\n                            [featuredAsset]=\"pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset\"\n                            (change)=\"onAssetChange(variant.id, $event)\"\n                        ></vdr-product-assets>\n                    </div>\n                    <div class=\"variant-form-inputs\">\n                        <div class=\"standard-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <div class=\"tax-category\">\n                                    <clr-select-container\n                                        *vdrIfPermissions=\"updatePermission; else taxCategoryLabel\"\n                                    >\n                                        <label>{{ 'catalog.tax-category' | translate }}</label>\n                                        <select clrSelect name=\"options\" formControlName=\"taxCategoryId\">\n                                            <option\n                                                *ngFor=\"let taxCategory of taxCategories\"\n                                                [value]=\"taxCategory.id\"\n                                            >\n                                                {{ taxCategory.name }}\n                                            </option>\n                                        </select>\n                                    </clr-select-container>\n                                    <ng-template #taxCategoryLabel>\n                                        <label class=\"clr-control-label\">{{\n                                            'catalog.tax-category' | translate\n                                        }}</label>\n                                        <div class=\"tax-category-label\">\n                                            {{ getTaxCategoryName(formGroup) }}\n                                        </div>\n                                    </ng-template>\n                                </div>\n                                <div class=\"price\">\n                                    <clr-input-container>\n                                        <label>{{ 'catalog.price' | translate }}</label>\n                                        <vdr-currency-input\n                                            *ngIf=\"!channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"price\"\n                                        ></vdr-currency-input>\n                                        <vdr-currency-input\n                                            *ngIf=\"channelPriceIncludesTax\"\n                                            clrInput\n                                            [currencyCode]=\"variant.currencyCode\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            formControlName=\"priceWithTax\"\n                                        ></vdr-currency-input>\n                                    </clr-input-container>\n                                </div>\n                                <vdr-variant-price-detail\n                                    [price]=\"formGroup.get('price')!.value\"\n                                    [currencyCode]=\"variant.currencyCode\"\n                                    [priceIncludesTax]=\"channelPriceIncludesTax\"\n                                    [taxCategoryId]=\"formGroup.get('taxCategoryId')!.value\"\n                                ></vdr-variant-price-detail>\n                            </div>\n                            <div class=\"variant-form-input-row\">\n                                <clr-select-container *vdrIfPermissions=\"updatePermission\">\n                                    <label\n                                        >{{ 'catalog.track-inventory' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.track-inventory-tooltip' | translate\"\n                                        ></vdr-help-tooltip>\n                                    </label>\n                                    <select clrSelect name=\"options\" formControlName=\"trackInventory\">\n                                        <option [value]=\"GlobalFlag.TRUE\">\n                                            {{ 'catalog.track-inventory-true' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.FALSE\">\n                                            {{ 'catalog.track-inventory-false' | translate }}\n                                        </option>\n                                        <option [value]=\"GlobalFlag.INHERIT\">\n                                            {{ 'catalog.track-inventory-inherit' | translate }}\n                                        </option>\n                                    </select>\n                                </clr-select-container>\n                                <clr-input-container>\n                                    <label\n                                        >{{ 'catalog.stock-on-hand' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-on-hand-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <input\n                                        [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                        clrInput\n                                        type=\"number\"\n                                        min=\"0\"\n                                        step=\"1\"\n                                        formControlName=\"stockOnHand\"\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\n                                        [vdrDisabled]=\"inventoryIsNotTracked(formGroup)\"\n                                    />\n                                </clr-input-container>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-allocated' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-allocated-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ variant.stockAllocated }}\n                                    </div>\n                                </div>\n                                <div [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\">\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.stock-saleable' | translate }}\n                                        <vdr-help-tooltip\n                                            [content]=\"'catalog.stock-saleable-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"value\">\n                                        {{ getSaleableStockLevel(variant) }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"variant-form-input-row\">\n                                <div\n                                    class=\"out-of-stock-threshold-wrapper\"\n                                    [class.inventory-untracked]=\"inventoryIsNotTracked(formGroup)\"\n                                >\n                                    <label class=\"clr-control-label\"\n                                        >{{ 'catalog.out-of-stock-threshold' | translate\n                                        }}<vdr-help-tooltip\n                                            [content]=\"'catalog.out-of-stock-threshold-tooltip' | translate\"\n                                        ></vdr-help-tooltip\n                                    ></label>\n                                    <div class=\"flex\">\n                                        <clr-input-container>\n                                            <input\n                                                clrInput\n                                                type=\"number\"\n                                                [formControl]=\"formGroup.get('outOfStockThreshold')\"\n                                                [readonly]=\"!(updatePermission | hasPermission)\"\n                                                [vdrDisabled]=\"\n                                                    formGroup.get('useGlobalOutOfStockThreshold')?.value !==\n                                                        false || inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                        </clr-input-container>\n                                        <clr-toggle-wrapper>\n                                            <input\n                                                type=\"checkbox\"\n                                                clrToggle\n                                                name=\"useGlobalOutOfStockThreshold\"\n                                                formControlName=\"useGlobalOutOfStockThreshold\"\n                                                [vdrDisabled]=\"\n                                                    !(updatePermission | hasPermission) ||\n                                                    inventoryIsNotTracked(formGroup)\n                                                \"\n                                            />\n                                            <label\n                                                >{{ 'catalog.use-global-value' | translate }} ({{\n                                                    globalOutOfStockThreshold\n                                                }})</label\n                                            >\n                                        </clr-toggle-wrapper>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"custom-fields\">\n                            <div class=\"variant-form-input-row\">\n                                <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n                                    <!--<label>{{ 'common.custom-fields' | translate }}</label>-->\n                                    <ng-container *ngFor=\"let customField of customFields\">\n                                        <vdr-custom-field-control\n                                            *ngIf=\"formGroup.get(['customFields', customField.name])\"\n                                            entityName=\"ProductVariant\"\n                                            [compact]=\"true\"\n                                            [customFieldsFormGroup]=\"formGroup.get('customFields')\"\n                                            [readonly]=\"!(updatePermission | hasPermission)\"\n                                            [customField]=\"customField\"\n                                        ></vdr-custom-field-control>\n                                    </ng-container>\n                                </section>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"options-facets\">\n                    <vdr-entity-info [entity]=\"variant\"></vdr-entity-info>\n                    <div *ngIf=\"variant.options.length\">\n                        <div class=\"options\">\n                            <vdr-chip\n                                *ngFor=\"let option of variant.options | sort: 'groupId'\"\n                                [colorFrom]=\"optionGroupName(option.groupId)\"\n                                [invert]=\"true\"\n                                (iconClick)=\"editOption(option)\"\n                                [icon]=\"(updatePermission | hasPermission) && 'pencil'\"\n                            >\n                                <span class=\"option-group-name\">{{ optionGroupName(option.groupId) }}</span>\n                                {{ optionName(option) }}\n                            </vdr-chip>\n                        </div>\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <div class=\"facets\">\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of existingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <vdr-facet-value-chip\n                            *ngFor=\"let facetValue of pendingFacetValues(variant)\"\n                            [facetValue]=\"facetValue\"\n                            [removable]=\"updatePermission | hasPermission\"\n                            (remove)=\"removeFacetValue(variant, facetValue.id)\"\n                        ></vdr-facet-value-chip>\n                        <button\n                            *vdrIfPermissions=\"updatePermission\"\n                            class=\"btn btn-sm btn-secondary\"\n                            (click)=\"selectFacetValueClick.emit([variant.id])\"\n                        >\n                            <clr-icon shape=\"plus\"></clr-icon>\n                            {{ 'catalog.add-facets' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <ng-container *vdrIfMultichannel>\n                <div class=\"card-block\" *vdrIfDefaultChannelActive>\n                    <div class=\"flex channel-assignment\">\n                        <ng-container *ngFor=\"let channel of variant.channels\">\n                            <vdr-chip\n                                *ngIf=\"!isDefaultChannel(channel.code)\"\n                                icon=\"times-circle\"\n                                [title]=\"'catalog.remove-from-channel' | translate\"\n                                (iconClick)=\"\n                                    removeFromChannel.emit({ channelId: channel.id, variant: variant })\n                                \"\n                            >\n                                <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\n                                {{ channel.code | channelCodeToLabel }}\n                            </vdr-chip>\n                        </ng-container>\n                        <button class=\"btn btn-sm\" (click)=\"assignToChannel.emit(variant)\">\n                            <clr-icon shape=\"layers\"></clr-icon>\n                            {{ 'catalog.assign-to-channel' | translate }}\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n    <div class=\"table-footer\">\n        <vdr-items-per-page-controls [(itemsPerPage)]=\"pagination.itemsPerPage\"></vdr-items-per-page-controls>\n\n        <vdr-pagination-controls\n            [currentPage]=\"pagination.currentPage\"\n            [itemsPerPage]=\"pagination.itemsPerPage\"\n            (pageChange)=\"pagination.currentPage = $event\"\n        ></vdr-pagination-controls>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductOptionFragment,\n    ProductVariant,\n    ProductWithVariants,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../product-assets/product-assets.component';\nimport { SelectedAssets, VariantFormValue } from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductWithVariants.Variants>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    pagination: PaginationInstance = {\n        currentPage: 1,\n        itemsPerPage: 10,\n    };\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n        if ('variants' in changes) {\n            if (changes['variants'].currentValue?.length !== changes['variants'].previousValue?.length) {\n                this.pagination.currentPage = 1;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductWithVariants.Variants) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getSaleableStockLevel(variant: ProductWithVariants.Variants) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductWithVariants.Variants) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductWithVariants.Variants) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductWithVariants.Variants, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","<vdr-data-table [items]=\"variants\">\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'catalog.sku' | translate }}</vdr-dt-column>\n    <ng-container *ngFor=\"let optionGroup of optionGroups | sort: 'id'\">\n        <vdr-dt-column>{{ optionGroup.name }}</vdr-dt-column>\n    </ng-container>\n    <vdr-dt-column>{{ 'catalog.price' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'catalog.stock-on-hand' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <ng-template let-variant=\"item\" let-i=\"index\">\n        <ng-container *ngIf=\"formGroupMap.get(variant.id) as formGroup\" [formGroup]=\"formGroup\">\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <div class=\"card-img\">\n                    <div class=\"featured-asset\">\n                        <img\n                            *ngIf=\"getFeaturedAsset(variant) as featuredAsset; else placeholder\"\n                            [src]=\"featuredAsset | assetPreview: 'tiny'\"\n                        />\n                        <ng-template #placeholder>\n                            <div class=\"placeholder\">\n                                <clr-icon shape=\"image\" size=\"48\"></clr-icon>\n                            </div>\n                        </ng-template>\n                    </div>\n                </div>\n            </td>\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        formControlName=\"name\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [placeholder]=\"'common.name' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <td class=\"left align-middle\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        formControlName=\"sku\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <ng-container *ngFor=\"let option of variant.options | sort: 'groupId'\">\n                <td\n                    class=\"left align-middle\"\n                    [class.disabled]=\"!formGroup.get('enabled')!.value\"\n                    [style.color]=\"optionGroupName(option.groupId) | stringToColor\"\n                >\n                    {{ option.name }}\n                </td>\n            </ng-container>\n            <td class=\"left align-middle price\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <clr-input-container>\n                    <vdr-currency-input\n                        *ngIf=\"!channelPriceIncludesTax\"\n                        clrInput\n                        [currencyCode]=\"variant.currencyCode\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        formControlName=\"price\"\n                    ></vdr-currency-input>\n                    <vdr-currency-input\n                        *ngIf=\"channelPriceIncludesTax\"\n                        clrInput\n                        [currencyCode]=\"variant.currencyCode\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                        formControlName=\"priceWithTax\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n            </td>\n            <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"1\"\n                        formControlName=\"stockOnHand\"\n                        [readonly]=\"!(updatePermission | hasPermission)\"\n                    />\n                </clr-input-container>\n            </td>\n            <td class=\"left align-middle stock\" [class.disabled]=\"!formGroup.get('enabled')!.value\">\n                <clr-toggle-wrapper>\n                    <input\n                        type=\"checkbox\"\n                        clrToggle\n                        name=\"enabled\"\n                        formControlName=\"enabled\"\n                        [vdrDisabled]=\"!(updatePermission | hasPermission)\"\n                    />\n                </clr-toggle-wrapper>\n            </td>\n        </ng-container>\n    </ng-template>\n</vdr-data-table>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    getFeaturedAsset(variant: ProductWithVariants.Variants) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { catalogRoutes } from './catalog.routes';\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\nimport { ProductAssetsComponent } from './components/product-assets/product-assets.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\n    exports: [],\n    declarations: [\n        ProductListComponent,\n        ProductDetailComponent,\n        FacetListComponent,\n        FacetDetailComponent,\n        GenerateProductVariantsComponent,\n        ProductVariantsListComponent,\n        ApplyFacetDialogComponent,\n        AssetListComponent,\n        ProductAssetsComponent,\n        VariantPriceDetailComponent,\n        CollectionListComponent,\n        CollectionDetailComponent,\n        CollectionTreeComponent,\n        CollectionTreeNodeComponent,\n        CollectionContentsComponent,\n        ProductVariantsTableComponent,\n        ProductSearchInputComponent,\n        OptionValueInputComponent,\n        UpdateProductOptionDialogComponent,\n        ProductVariantsEditorComponent,\n        AssignProductsToChannelDialogComponent,\n        AssetDetailComponent,\n    ],\n})\nexport class CatalogModule {}\n"]}