{"version":3,"sources":["webpack:///common/src/generated-shop-types.ts","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.html","webpack:///src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.html","webpack:///src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.html","webpack:///src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/address-card/address-card.component.html","webpack:///src/lib/customer/src/components/address-card/address-card.component.ts","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.html","webpack:///src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.html","webpack:///src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.html","webpack:///src/lib/customer/src/components/customer-history/customer-history.component.ts","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.html","webpack:///src/lib/customer/src/components/customer-detail/customer-detail.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/merge.js","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.html","webpack:///src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.html","webpack:///src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.html","webpack:///src/lib/customer/src/components/customer-list/customer-list.component.ts","webpack:///src/lib/customer/src/providers/routing/customer-resolver.ts","webpack:///src/lib/customer/src/customer.routes.ts","webpack:///src/lib/customer/src/customer.module.ts"],"names":["AssetType","IMAGE","VIDEO","BINARY","GlobalFlag","TRUE","FALSE","INHERIT","AdjustmentType","PROMOTION","DISTRIBUTED_ORDER_PROMOTION","DeletionResult","DELETED","NOT_DELETED","Permission","Authenticated","SuperAdmin","Owner","Public","UpdateGlobalSettings","CreateCatalog","ReadCatalog","UpdateCatalog","DeleteCatalog","CreateSettings","ReadSettings","UpdateSettings","DeleteSettings","CreateAdministrator","ReadAdministrator","UpdateAdministrator","DeleteAdministrator","CreateAsset","ReadAsset","UpdateAsset","DeleteAsset","CreateChannel","ReadChannel","UpdateChannel","DeleteChannel","CreateCollection","ReadCollection","UpdateCollection","DeleteCollection","CreateCountry","ReadCountry","UpdateCountry","DeleteCountry","CreateCustomer","ReadCustomer","UpdateCustomer","DeleteCustomer","CreateCustomerGroup","ReadCustomerGroup","UpdateCustomerGroup","DeleteCustomerGroup","CreateFacet","ReadFacet","UpdateFacet","DeleteFacet","CreateOrder","ReadOrder","UpdateOrder","DeleteOrder","CreatePaymentMethod","ReadPaymentMethod","UpdatePaymentMethod","DeletePaymentMethod","CreateProduct","ReadProduct","UpdateProduct","DeleteProduct","CreatePromotion","ReadPromotion","UpdatePromotion","DeletePromotion","CreateShippingMethod","ReadShippingMethod","UpdateShippingMethod","DeleteShippingMethod","CreateTag","ReadTag","UpdateTag","DeleteTag","CreateTaxCategory","ReadTaxCategory","UpdateTaxCategory","DeleteTaxCategory","CreateTaxRate","ReadTaxRate","UpdateTaxRate","DeleteTaxRate","CreateSystem","ReadSystem","UpdateSystem","DeleteSystem","CreateZone","ReadZone","UpdateZone","DeleteZone","SortOrder","ASC","DESC","ErrorCode","UNKNOWN_ERROR","NATIVE_AUTH_STRATEGY_ERROR","INVALID_CREDENTIALS_ERROR","ORDER_STATE_TRANSITION_ERROR","EMAIL_ADDRESS_CONFLICT_ERROR","ORDER_LIMIT_ERROR","NEGATIVE_QUANTITY_ERROR","INSUFFICIENT_STOCK_ERROR","ORDER_MODIFICATION_ERROR","INELIGIBLE_SHIPPING_METHOD_ERROR","ORDER_PAYMENT_STATE_ERROR","INELIGIBLE_PAYMENT_METHOD_ERROR","PAYMENT_FAILED_ERROR","PAYMENT_DECLINED_ERROR","COUPON_CODE_INVALID_ERROR","COUPON_CODE_EXPIRED_ERROR","COUPON_CODE_LIMIT_ERROR","ALREADY_LOGGED_IN_ERROR","MISSING_PASSWORD_ERROR","PASSWORD_ALREADY_SET_ERROR","VERIFICATION_TOKEN_INVALID_ERROR","VERIFICATION_TOKEN_EXPIRED_ERROR","IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR","IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR","PASSWORD_RESET_TOKEN_INVALID_ERROR","PASSWORD_RESET_TOKEN_EXPIRED_ERROR","NOT_VERIFIED_ERROR","NO_ACTIVE_ORDER_ERROR","LogicalOperator","AND","OR","CurrencyCode","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYN","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","INR","IQD","IRR","ISK","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VES","VND","VUV","WST","XAF","XCD","XOF","XPF","YER","ZAR","ZMW","ZWL","HistoryEntryType","CUSTOMER_REGISTERED","CUSTOMER_VERIFIED","CUSTOMER_DETAIL_UPDATED","CUSTOMER_ADDED_TO_GROUP","CUSTOMER_REMOVED_FROM_GROUP","CUSTOMER_ADDRESS_CREATED","CUSTOMER_ADDRESS_UPDATED","CUSTOMER_ADDRESS_DELETED","CUSTOMER_PASSWORD_UPDATED","CUSTOMER_PASSWORD_RESET_REQUESTED","CUSTOMER_PASSWORD_RESET_VERIFIED","CUSTOMER_EMAIL_UPDATE_REQUESTED","CUSTOMER_EMAIL_UPDATE_VERIFIED","CUSTOMER_NOTE","ORDER_STATE_TRANSITION","ORDER_PAYMENT_TRANSITION","ORDER_FULFILLMENT","ORDER_CANCELLATION","ORDER_REFUND_TRANSITION","ORDER_FULFILLMENT_TRANSITION","ORDER_NOTE","ORDER_COUPON_APPLIED","ORDER_COUPON_REMOVED","ORDER_MODIFIED","LanguageCode","af","ak","sq","am","ar","hy","as","az","bm","bn","eu","be","bs","br","bg","my","ca","ce","zh","zh_Hans","zh_Hant","cu","kw","co","hr","cs","da","nl","nl_BE","dz","en","en_AU","en_CA","en_GB","en_US","eo","et","ee","fo","fi","fr","fr_CA","fr_CH","ff","gl","lg","ka","de","de_AT","de_CH","el","gu","ht","ha","he","hi","hu","is","ig","id","ia","ga","it","ja","jv","kl","kn","ks","kk","km","ki","rw","ko","ku","ky","lo","la","lv","ln","lt","lu","lb","mk","mg","ms","ml","mt","gv","mi","mr","mn","ne","nd","se","nb","nn","ny","or","om","os","ps","fa","fa_AF","pl","pt","pt_BR","pt_PT","pa","qu","ro","ro_MD","rm","rn","ru","sm","sg","sa","gd","sr","sn","ii","sd","si","sk","sl","so","st","es","es_ES","es_MX","su","sw","sw_CD","sv","tg","ta","tt","te","th","bo","ti","to","tr","tk","uk","ur","ug","uz","vi","vo","cy","fy","wo","xh","yi","yo","zu","router","dataService","selectedMemberIds","selectionChange","fetchParamsChange","filterTermControl","refresh$","BehaviorSubject","destroy$","Subject","isMemberSelected","member","this","indexOf","membersCurrentPage$","route","paramMap","pipe","map","qpm","get","page","startWith","distinctUntilChanged","membersItemsPerPage$","perPage","filterTerm$","valueChanges","debounceTime","tap","setContentsPageNumber","combineLatest","takeUntil","subscribe","currentPage","itemsPerPage","filterTerm","take","skip","emit","next","complete","setParam","key","value","navigate","snapshot","params","relativeTo","queryParamsHandling","members","length","areAllSelected","v","includes","filter","setContentsItemsPerPage","toggleSelectMember","toggleSelectAll","selectedCustomerIds","fetchGroupMembers$","customerResult$","switchMap","customer","getCustomerList","mapStream","res","customers","customers$","items","customersTotal$","totalItems","resolveWith","AddressDetailDialogComponent","changeDetector","availableCountries","addressForm","markForCheck","modalService","editable","setAsDefaultShipping","setAsDefaultBilling","dataDependenciesPopulated","editAddress","changes","customFields","countryCode","match","find","c","code","name","markAsDirty","fromComponent","locals","size","closable","SelectCustomerGroupDialogComponent","selectedGroupIds","groups$","getCustomerGroupList","customerGroups","CustomerStatusLabelComponent","updateNote","deleteNote","addNote","note","type","entry","administrator","firstName","lastName","serverConfigService","formBuilder","notificationService","super","fetchHistory","addressDefaultsUpdated","ordersPerPage","currentOrdersPage","orderListUpdates$","getCustomFieldConfig","addressCustomFields","detailForm","group","title","required","phoneNumber","emailAddress","email","password","reduce","hash","field","addresses","init","availableCountries$","settings","getAvailableCountries","mapSingle","result","countries","shareReplay","customerWithUpdates$","entity$","observables","source","lift","call","merge","orders$","orders","ordersCount$","history$","getCustomerHistory","sort","createdAt","data","history","destroy","controls","defaultBillingAddressId","defaultShippingAddressId","addressFormArray","newAddress","fullName","company","streetLine1","streetLine2","city","province","postalCode","defaultShippingAddress","defaultBillingAddress","customFieldsGroup","fieldDef","addControl","push","fetchOrdersList","customerForm","formValue","createCustomer","__typename","success","entity","notify","message","translationVars","duration","markAsPristine","error","mergeMap","saveOperations","dirty","updateCustomer","addressControl","address","input","updateCustomerAddress","createCustomerAddress","forkJoin","err","groupIds","from","concatMap","groupId","addCustomersToGroup","customerCount","groupName","getCustomer","single$","dialog","buttons","label","returnValue","response","removeCustomersFromGroup","addNoteToCustomer","displayPrivacyControls","updateCustomerNote","noteId","body","deleteCustomerNote","customerGroup","patchValue","addressesArray","rest","addressGroup","country","control","setControl","notNullOrUndefined","CustomerGroupDetailDialogComponent","refreshActiveGroupMembers$","undefined","activeGroupId$","pm","listIsEmpty$","groups","activeGroup$","activeGroupId","g","membersResult$","activeGroup","getCustomerGroupWithCustomers","contains","of","members$","membersTotal$","createCustomerGroup","customerIds","deleteCustomerGroup","errorMessage","updateCustomerGroup","contents","verticalAlign","mapTo","emailSearchTerm","lastNameSearchTerm","setQueryFn","args","refetchOnChannelChange","options","ngOnInit","refresh","deleteCustomer","setPageNumber","setItemsPerPage","updatedAt","user","customerRoutes","path","component","pathMatch","breadcrumb","resolve","canDeactivate","customerBreadcrumb","breadcrumbKey","getName","CustomerModule","forChild"],"mappings":"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A,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MAEA,EAAAC,IAAA,MA1TJ,CAAY,EAAA7J,eAAA,EAAAA,aAAY,KA+hBxB,SAAY8J,GACR,EAAAC,oBAAA,sBACA,EAAAC,kBAAA,oBACA,EAAAC,wBAAA,0BACA,EAAAC,wBAAA,0BACA,EAAAC,4BAAA,8BACA,EAAAC,yBAAA,2BACA,EAAAC,yBAAA,2BACA,EAAAC,yBAAA,2BACA,EAAAC,0BAAA,4BACA,EAAAC,kCAAA,oCACA,EAAAC,iCAAA,mCACA,EAAAC,gCAAA,kCACA,EAAAC,+BAAA,iCACA,EAAAC,cAAA,gBACA,EAAAC,uBAAA,yBACA,EAAAC,yBAAA,2BACA,EAAAC,kBAAA,oBACA,EAAAC,mBAAA,qBACA,EAAAC,wBAAA,0BACA,EAAAC,6BAAA,+BACA,EAAAC,WAAA,aACA,EAAAC,qBAAA,uBACA,EAAAC,qBAAA,uBACA,EAAAC,eAAA,iBAxBJ,CAAY,EAAAxB,mBAAA,EAAAA,iBAAgB,KA0C5B,SAAYyB,GAER,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,QAAA,UAEA,EAAAC,QAAA,UAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,MAAA,QAEA,EAAAC,MAAA,QAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAAA,KAEA,EAAAC,GAA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","file":"x","sourcesContent":["// tslint:disable\nexport type Maybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string | number;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n    JSON: any;\n    /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n    DateTime: any;\n    /** The `Upload` scalar type represents a file upload. */\n    Upload: any;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /** The active Channel */\n    activeChannel: Channel;\n    /** The active Customer */\n    activeCustomer?: Maybe<Customer>;\n    /**\n     * The active Order. Will be `null` until an Order is created via `addItemToOrder`. Once an Order reaches the\n     * state of `PaymentApproved` or `PaymentSettled`, then that Order is no longer considered \"active\" and this\n     * query will once again return `null`.\n     */\n    activeOrder?: Maybe<Order>;\n    /** An array of supported Countries */\n    availableCountries: Array<Country>;\n    /** A list of Collections available to the shop */\n    collections: CollectionList;\n    /** Returns a Collection either by its id or slug. If neither 'id' nor 'slug' is speicified, an error will result. */\n    collection?: Maybe<Collection>;\n    /** Returns a list of eligible shipping methods based on the current active Order */\n    eligibleShippingMethods: Array<ShippingMethodQuote>;\n    /** Returns a list of payment methods and their eligibility based on the current active Order */\n    eligiblePaymentMethods: Array<PaymentMethodQuote>;\n    /** Returns information about the current authenticated User */\n    me?: Maybe<CurrentUser>;\n    /** Returns the possible next states that the activeOrder can transition to */\n    nextOrderStates: Array<Scalars['String']>;\n    /**\n     * Returns an Order based on the id. Note that in the Shop API, only orders belonging to the\n     * currently-authenticated User may be queried.\n     */\n    order?: Maybe<Order>;\n    /**\n     * Returns an Order based on the order `code`. For guest Orders (i.e. Orders placed by non-authenticated Customers)\n     * this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation\n     * screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing\n     * general anonymous access to Order data.\n     */\n    orderByCode?: Maybe<Order>;\n    /** Get a Product either by id or slug. If neither 'id' nor 'slug' is speicified, an error will result. */\n    product?: Maybe<Product>;\n    /** Get a list of Products */\n    products: ProductList;\n    /** Search Products based on the criteria set by the `SearchInput` */\n    search: SearchResponse;\n};\n\nexport type QueryCollectionsArgs = {\n    options?: Maybe<CollectionListOptions>;\n};\n\nexport type QueryCollectionArgs = {\n    id?: Maybe<Scalars['ID']>;\n    slug?: Maybe<Scalars['String']>;\n};\n\nexport type QueryOrderArgs = {\n    id: Scalars['ID'];\n};\n\nexport type QueryOrderByCodeArgs = {\n    code: Scalars['String'];\n};\n\nexport type QueryProductArgs = {\n    id?: Maybe<Scalars['ID']>;\n    slug?: Maybe<Scalars['String']>;\n};\n\nexport type QueryProductsArgs = {\n    options?: Maybe<ProductListOptions>;\n};\n\nexport type QuerySearchArgs = {\n    input: SearchInput;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Adds an item to the order. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available. */\n    addItemToOrder: UpdateOrderItemsResult;\n    /** Remove an OrderLine from the Order */\n    removeOrderLine: RemoveOrderItemsResult;\n    /** Remove all OrderLine from the Order */\n    removeAllOrderLines: RemoveOrderItemsResult;\n    /** Adjusts an OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' of type `OrderLineCustomFieldsInput` will be available. */\n    adjustOrderLine: UpdateOrderItemsResult;\n    /** Applies the given coupon code to the active Order */\n    applyCouponCode: ApplyCouponCodeResult;\n    /** Removes the given coupon code from the active Order */\n    removeCouponCode?: Maybe<Order>;\n    /** Transitions an Order to a new state. Valid next states can be found by querying `nextOrderStates` */\n    transitionOrderToState?: Maybe<TransitionOrderToStateResult>;\n    /** Sets the shipping address for this order */\n    setOrderShippingAddress: ActiveOrderResult;\n    /** Sets the billing address for this order */\n    setOrderBillingAddress: ActiveOrderResult;\n    /** Allows any custom fields to be set for the active order */\n    setOrderCustomFields: ActiveOrderResult;\n    /** Sets the shipping method by id, which can be obtained with the `eligibleShippingMethods` query */\n    setOrderShippingMethod: SetOrderShippingMethodResult;\n    /** Add a Payment to the Order */\n    addPaymentToOrder: AddPaymentToOrderResult;\n    /** Set the Customer for the Order. Required only if the Customer is not currently logged in */\n    setCustomerForOrder: SetCustomerForOrderResult;\n    /** Authenticates the user using the native authentication strategy. This mutation is an alias for `authenticate({ native: { ... }})` */\n    login: NativeAuthenticationResult;\n    /** Authenticates the user using a named authentication strategy */\n    authenticate: AuthenticationResult;\n    /** End the current authenticated session */\n    logout: Success;\n    /**\n     * Register a Customer account with the given credentials. There are three possible registration flows:\n     *\n     * _If `authOptions.requireVerification` is set to `true`:_\n     *\n     * 1. **The Customer is registered _with_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\n     *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _without_ a password. The Customer is then\n     *    verified and authenticated in one step.\n     * 2. **The Customer is registered _without_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\n     *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _with_ the chosed password of the Customer. The Customer is then\n     *    verified and authenticated in one step.\n     *\n     * _If `authOptions.requireVerification` is set to `false`:_\n     *\n     * 3. The Customer _must_ be registered _with_ a password. No further action is needed - the Customer is able to authenticate immediately.\n     */\n    registerCustomerAccount: RegisterCustomerAccountResult;\n    /** Regenerate and send a verification token for a new Customer registration. Only applicable if `authOptions.requireVerification` is set to true. */\n    refreshCustomerVerification: RefreshCustomerVerificationResult;\n    /** Update an existing Customer */\n    updateCustomer: Customer;\n    /** Create a new Customer Address */\n    createCustomerAddress: Address;\n    /** Update an existing Address */\n    updateCustomerAddress: Address;\n    /** Delete an existing Address */\n    deleteCustomerAddress: Success;\n    /**\n     * Verify a Customer email address with the token sent to that address. Only applicable if `authOptions.requireVerification` is set to true.\n     *\n     * If the Customer was not registered with a password in the `registerCustomerAccount` mutation, the a password _must_ be\n     * provided here.\n     */\n    verifyCustomerAccount: VerifyCustomerAccountResult;\n    /** Update the password of the active Customer */\n    updateCustomerPassword: UpdateCustomerPasswordResult;\n    /**\n     * Request to update the emailAddress of the active Customer. If `authOptions.requireVerification` is enabled\n     * (as is the default), then the `identifierChangeToken` will be assigned to the current User and\n     * a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email\n     * that verification token to the Customer, which is then used to verify the change of email address.\n     */\n    requestUpdateCustomerEmailAddress: RequestUpdateCustomerEmailAddressResult;\n    /**\n     * Confirm the update of the emailAddress with the provided token, which has been generated by the\n     * `requestUpdateCustomerEmailAddress` mutation.\n     */\n    updateCustomerEmailAddress: UpdateCustomerEmailAddressResult;\n    /** Requests a password reset email to be sent */\n    requestPasswordReset?: Maybe<RequestPasswordResetResult>;\n    /** Resets a Customer's password based on the provided token */\n    resetPassword: ResetPasswordResult;\n};\n\nexport type MutationAddItemToOrderArgs = {\n    productVariantId: Scalars['ID'];\n    quantity: Scalars['Int'];\n};\n\nexport type MutationRemoveOrderLineArgs = {\n    orderLineId: Scalars['ID'];\n};\n\nexport type MutationAdjustOrderLineArgs = {\n    orderLineId: Scalars['ID'];\n    quantity: Scalars['Int'];\n};\n\nexport type MutationApplyCouponCodeArgs = {\n    couponCode: Scalars['String'];\n};\n\nexport type MutationRemoveCouponCodeArgs = {\n    couponCode: Scalars['String'];\n};\n\nexport type MutationTransitionOrderToStateArgs = {\n    state: Scalars['String'];\n};\n\nexport type MutationSetOrderShippingAddressArgs = {\n    input: CreateAddressInput;\n};\n\nexport type MutationSetOrderBillingAddressArgs = {\n    input: CreateAddressInput;\n};\n\nexport type MutationSetOrderCustomFieldsArgs = {\n    input: UpdateOrderInput;\n};\n\nexport type MutationSetOrderShippingMethodArgs = {\n    shippingMethodId: Scalars['ID'];\n};\n\nexport type MutationAddPaymentToOrderArgs = {\n    input: PaymentInput;\n};\n\nexport type MutationSetCustomerForOrderArgs = {\n    input: CreateCustomerInput;\n};\n\nexport type MutationLoginArgs = {\n    username: Scalars['String'];\n    password: Scalars['String'];\n    rememberMe?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MutationAuthenticateArgs = {\n    input: AuthenticationInput;\n    rememberMe?: Maybe<Scalars['Boolean']>;\n};\n\nexport type MutationRegisterCustomerAccountArgs = {\n    input: RegisterCustomerInput;\n};\n\nexport type MutationRefreshCustomerVerificationArgs = {\n    emailAddress: Scalars['String'];\n};\n\nexport type MutationUpdateCustomerArgs = {\n    input: UpdateCustomerInput;\n};\n\nexport type MutationCreateCustomerAddressArgs = {\n    input: CreateAddressInput;\n};\n\nexport type MutationUpdateCustomerAddressArgs = {\n    input: UpdateAddressInput;\n};\n\nexport type MutationDeleteCustomerAddressArgs = {\n    id: Scalars['ID'];\n};\n\nexport type MutationVerifyCustomerAccountArgs = {\n    token: Scalars['String'];\n    password?: Maybe<Scalars['String']>;\n};\n\nexport type MutationUpdateCustomerPasswordArgs = {\n    currentPassword: Scalars['String'];\n    newPassword: Scalars['String'];\n};\n\nexport type MutationRequestUpdateCustomerEmailAddressArgs = {\n    password: Scalars['String'];\n    newEmailAddress: Scalars['String'];\n};\n\nexport type MutationUpdateCustomerEmailAddressArgs = {\n    token: Scalars['String'];\n};\n\nexport type MutationRequestPasswordResetArgs = {\n    emailAddress: Scalars['String'];\n};\n\nexport type MutationResetPasswordArgs = {\n    token: Scalars['String'];\n    password: Scalars['String'];\n};\n\nexport type Address = Node & {\n    __typename?: 'Address';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    fullName?: Maybe<Scalars['String']>;\n    company?: Maybe<Scalars['String']>;\n    streetLine1: Scalars['String'];\n    streetLine2?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    province?: Maybe<Scalars['String']>;\n    postalCode?: Maybe<Scalars['String']>;\n    country: Country;\n    phoneNumber?: Maybe<Scalars['String']>;\n    defaultShippingAddress?: Maybe<Scalars['Boolean']>;\n    defaultBillingAddress?: Maybe<Scalars['Boolean']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type Asset = Node & {\n    __typename?: 'Asset';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    name: Scalars['String'];\n    type: AssetType;\n    fileSize: Scalars['Int'];\n    mimeType: Scalars['String'];\n    width: Scalars['Int'];\n    height: Scalars['Int'];\n    source: Scalars['String'];\n    preview: Scalars['String'];\n    focalPoint?: Maybe<Coordinate>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type Coordinate = {\n    __typename?: 'Coordinate';\n    x: Scalars['Float'];\n    y: Scalars['Float'];\n};\n\nexport type AssetList = PaginatedList & {\n    __typename?: 'AssetList';\n    items: Array<Asset>;\n    totalItems: Scalars['Int'];\n};\n\nexport enum AssetType {\n    IMAGE = 'IMAGE',\n    VIDEO = 'VIDEO',\n    BINARY = 'BINARY',\n}\n\nexport type CurrentUser = {\n    __typename?: 'CurrentUser';\n    id: Scalars['ID'];\n    identifier: Scalars['String'];\n    channels: Array<CurrentUserChannel>;\n};\n\nexport type CurrentUserChannel = {\n    __typename?: 'CurrentUserChannel';\n    id: Scalars['ID'];\n    token: Scalars['String'];\n    code: Scalars['String'];\n    permissions: Array<Permission>;\n};\n\nexport type Channel = Node & {\n    __typename?: 'Channel';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    code: Scalars['String'];\n    token: Scalars['String'];\n    defaultTaxZone?: Maybe<Zone>;\n    defaultShippingZone?: Maybe<Zone>;\n    defaultLanguageCode: LanguageCode;\n    currencyCode: CurrencyCode;\n    pricesIncludeTax: Scalars['Boolean'];\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type Collection = Node & {\n    __typename?: 'Collection';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode?: Maybe<LanguageCode>;\n    name: Scalars['String'];\n    slug: Scalars['String'];\n    breadcrumbs: Array<CollectionBreadcrumb>;\n    position: Scalars['Int'];\n    description: Scalars['String'];\n    featuredAsset?: Maybe<Asset>;\n    assets: Array<Asset>;\n    parent?: Maybe<Collection>;\n    children?: Maybe<Array<Collection>>;\n    filters: Array<ConfigurableOperation>;\n    translations: Array<CollectionTranslation>;\n    productVariants: ProductVariantList;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type CollectionProductVariantsArgs = {\n    options?: Maybe<ProductVariantListOptions>;\n};\n\nexport type CollectionBreadcrumb = {\n    __typename?: 'CollectionBreadcrumb';\n    id: Scalars['ID'];\n    name: Scalars['String'];\n    slug: Scalars['String'];\n};\n\nexport type CollectionTranslation = {\n    __typename?: 'CollectionTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n    slug: Scalars['String'];\n    description: Scalars['String'];\n};\n\nexport type CollectionList = PaginatedList & {\n    __typename?: 'CollectionList';\n    items: Array<Collection>;\n    totalItems: Scalars['Int'];\n};\n\nexport type ProductVariantList = PaginatedList & {\n    __typename?: 'ProductVariantList';\n    items: Array<ProductVariant>;\n    totalItems: Scalars['Int'];\n};\n\nexport enum GlobalFlag {\n    TRUE = 'TRUE',\n    FALSE = 'FALSE',\n    INHERIT = 'INHERIT',\n}\n\nexport enum AdjustmentType {\n    PROMOTION = 'PROMOTION',\n    DISTRIBUTED_ORDER_PROMOTION = 'DISTRIBUTED_ORDER_PROMOTION',\n}\n\nexport enum DeletionResult {\n    /** The entity was successfully deleted */\n    DELETED = 'DELETED',\n    /** Deletion did not take place, reason given in message */\n    NOT_DELETED = 'NOT_DELETED',\n}\n\n/**\n * @description\n * Permissions for administrators and customers. Used to control access to\n * GraphQL resolvers via the {@link Allow} decorator.\n *\n * @docsCategory common\n */\nexport enum Permission {\n    /** Authenticated means simply that the user is logged in */\n    Authenticated = 'Authenticated',\n    /** SuperAdmin has unrestricted access to all operations */\n    SuperAdmin = 'SuperAdmin',\n    /** Owner means the user owns this entity, e.g. a Customer's own Order */\n    Owner = 'Owner',\n    /** Public means any unauthenticated user may perform the operation */\n    Public = 'Public',\n    /** Grants permission to update GlobalSettings */\n    UpdateGlobalSettings = 'UpdateGlobalSettings',\n    /** Grants permission to create Products, Facets, Assets, Collections */\n    CreateCatalog = 'CreateCatalog',\n    /** Grants permission to read Products, Facets, Assets, Collections */\n    ReadCatalog = 'ReadCatalog',\n    /** Grants permission to update Products, Facets, Assets, Collections */\n    UpdateCatalog = 'UpdateCatalog',\n    /** Grants permission to delete Products, Facets, Assets, Collections */\n    DeleteCatalog = 'DeleteCatalog',\n    /** Grants permission to create PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n    CreateSettings = 'CreateSettings',\n    /** Grants permission to read PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n    ReadSettings = 'ReadSettings',\n    /** Grants permission to update PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n    UpdateSettings = 'UpdateSettings',\n    /** Grants permission to delete PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n    DeleteSettings = 'DeleteSettings',\n    /** Grants permission to create Administrator */\n    CreateAdministrator = 'CreateAdministrator',\n    /** Grants permission to read Administrator */\n    ReadAdministrator = 'ReadAdministrator',\n    /** Grants permission to update Administrator */\n    UpdateAdministrator = 'UpdateAdministrator',\n    /** Grants permission to delete Administrator */\n    DeleteAdministrator = 'DeleteAdministrator',\n    /** Grants permission to create Asset */\n    CreateAsset = 'CreateAsset',\n    /** Grants permission to read Asset */\n    ReadAsset = 'ReadAsset',\n    /** Grants permission to update Asset */\n    UpdateAsset = 'UpdateAsset',\n    /** Grants permission to delete Asset */\n    DeleteAsset = 'DeleteAsset',\n    /** Grants permission to create Channel */\n    CreateChannel = 'CreateChannel',\n    /** Grants permission to read Channel */\n    ReadChannel = 'ReadChannel',\n    /** Grants permission to update Channel */\n    UpdateChannel = 'UpdateChannel',\n    /** Grants permission to delete Channel */\n    DeleteChannel = 'DeleteChannel',\n    /** Grants permission to create Collection */\n    CreateCollection = 'CreateCollection',\n    /** Grants permission to read Collection */\n    ReadCollection = 'ReadCollection',\n    /** Grants permission to update Collection */\n    UpdateCollection = 'UpdateCollection',\n    /** Grants permission to delete Collection */\n    DeleteCollection = 'DeleteCollection',\n    /** Grants permission to create Country */\n    CreateCountry = 'CreateCountry',\n    /** Grants permission to read Country */\n    ReadCountry = 'ReadCountry',\n    /** Grants permission to update Country */\n    UpdateCountry = 'UpdateCountry',\n    /** Grants permission to delete Country */\n    DeleteCountry = 'DeleteCountry',\n    /** Grants permission to create Customer */\n    CreateCustomer = 'CreateCustomer',\n    /** Grants permission to read Customer */\n    ReadCustomer = 'ReadCustomer',\n    /** Grants permission to update Customer */\n    UpdateCustomer = 'UpdateCustomer',\n    /** Grants permission to delete Customer */\n    DeleteCustomer = 'DeleteCustomer',\n    /** Grants permission to create CustomerGroup */\n    CreateCustomerGroup = 'CreateCustomerGroup',\n    /** Grants permission to read CustomerGroup */\n    ReadCustomerGroup = 'ReadCustomerGroup',\n    /** Grants permission to update CustomerGroup */\n    UpdateCustomerGroup = 'UpdateCustomerGroup',\n    /** Grants permission to delete CustomerGroup */\n    DeleteCustomerGroup = 'DeleteCustomerGroup',\n    /** Grants permission to create Facet */\n    CreateFacet = 'CreateFacet',\n    /** Grants permission to read Facet */\n    ReadFacet = 'ReadFacet',\n    /** Grants permission to update Facet */\n    UpdateFacet = 'UpdateFacet',\n    /** Grants permission to delete Facet */\n    DeleteFacet = 'DeleteFacet',\n    /** Grants permission to create Order */\n    CreateOrder = 'CreateOrder',\n    /** Grants permission to read Order */\n    ReadOrder = 'ReadOrder',\n    /** Grants permission to update Order */\n    UpdateOrder = 'UpdateOrder',\n    /** Grants permission to delete Order */\n    DeleteOrder = 'DeleteOrder',\n    /** Grants permission to create PaymentMethod */\n    CreatePaymentMethod = 'CreatePaymentMethod',\n    /** Grants permission to read PaymentMethod */\n    ReadPaymentMethod = 'ReadPaymentMethod',\n    /** Grants permission to update PaymentMethod */\n    UpdatePaymentMethod = 'UpdatePaymentMethod',\n    /** Grants permission to delete PaymentMethod */\n    DeletePaymentMethod = 'DeletePaymentMethod',\n    /** Grants permission to create Product */\n    CreateProduct = 'CreateProduct',\n    /** Grants permission to read Product */\n    ReadProduct = 'ReadProduct',\n    /** Grants permission to update Product */\n    UpdateProduct = 'UpdateProduct',\n    /** Grants permission to delete Product */\n    DeleteProduct = 'DeleteProduct',\n    /** Grants permission to create Promotion */\n    CreatePromotion = 'CreatePromotion',\n    /** Grants permission to read Promotion */\n    ReadPromotion = 'ReadPromotion',\n    /** Grants permission to update Promotion */\n    UpdatePromotion = 'UpdatePromotion',\n    /** Grants permission to delete Promotion */\n    DeletePromotion = 'DeletePromotion',\n    /** Grants permission to create ShippingMethod */\n    CreateShippingMethod = 'CreateShippingMethod',\n    /** Grants permission to read ShippingMethod */\n    ReadShippingMethod = 'ReadShippingMethod',\n    /** Grants permission to update ShippingMethod */\n    UpdateShippingMethod = 'UpdateShippingMethod',\n    /** Grants permission to delete ShippingMethod */\n    DeleteShippingMethod = 'DeleteShippingMethod',\n    /** Grants permission to create Tag */\n    CreateTag = 'CreateTag',\n    /** Grants permission to read Tag */\n    ReadTag = 'ReadTag',\n    /** Grants permission to update Tag */\n    UpdateTag = 'UpdateTag',\n    /** Grants permission to delete Tag */\n    DeleteTag = 'DeleteTag',\n    /** Grants permission to create TaxCategory */\n    CreateTaxCategory = 'CreateTaxCategory',\n    /** Grants permission to read TaxCategory */\n    ReadTaxCategory = 'ReadTaxCategory',\n    /** Grants permission to update TaxCategory */\n    UpdateTaxCategory = 'UpdateTaxCategory',\n    /** Grants permission to delete TaxCategory */\n    DeleteTaxCategory = 'DeleteTaxCategory',\n    /** Grants permission to create TaxRate */\n    CreateTaxRate = 'CreateTaxRate',\n    /** Grants permission to read TaxRate */\n    ReadTaxRate = 'ReadTaxRate',\n    /** Grants permission to update TaxRate */\n    UpdateTaxRate = 'UpdateTaxRate',\n    /** Grants permission to delete TaxRate */\n    DeleteTaxRate = 'DeleteTaxRate',\n    /** Grants permission to create System */\n    CreateSystem = 'CreateSystem',\n    /** Grants permission to read System */\n    ReadSystem = 'ReadSystem',\n    /** Grants permission to update System */\n    UpdateSystem = 'UpdateSystem',\n    /** Grants permission to delete System */\n    DeleteSystem = 'DeleteSystem',\n    /** Grants permission to create Zone */\n    CreateZone = 'CreateZone',\n    /** Grants permission to read Zone */\n    ReadZone = 'ReadZone',\n    /** Grants permission to update Zone */\n    UpdateZone = 'UpdateZone',\n    /** Grants permission to delete Zone */\n    DeleteZone = 'DeleteZone',\n}\n\nexport enum SortOrder {\n    ASC = 'ASC',\n    DESC = 'DESC',\n}\n\nexport enum ErrorCode {\n    UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n    NATIVE_AUTH_STRATEGY_ERROR = 'NATIVE_AUTH_STRATEGY_ERROR',\n    INVALID_CREDENTIALS_ERROR = 'INVALID_CREDENTIALS_ERROR',\n    ORDER_STATE_TRANSITION_ERROR = 'ORDER_STATE_TRANSITION_ERROR',\n    EMAIL_ADDRESS_CONFLICT_ERROR = 'EMAIL_ADDRESS_CONFLICT_ERROR',\n    ORDER_LIMIT_ERROR = 'ORDER_LIMIT_ERROR',\n    NEGATIVE_QUANTITY_ERROR = 'NEGATIVE_QUANTITY_ERROR',\n    INSUFFICIENT_STOCK_ERROR = 'INSUFFICIENT_STOCK_ERROR',\n    ORDER_MODIFICATION_ERROR = 'ORDER_MODIFICATION_ERROR',\n    INELIGIBLE_SHIPPING_METHOD_ERROR = 'INELIGIBLE_SHIPPING_METHOD_ERROR',\n    ORDER_PAYMENT_STATE_ERROR = 'ORDER_PAYMENT_STATE_ERROR',\n    INELIGIBLE_PAYMENT_METHOD_ERROR = 'INELIGIBLE_PAYMENT_METHOD_ERROR',\n    PAYMENT_FAILED_ERROR = 'PAYMENT_FAILED_ERROR',\n    PAYMENT_DECLINED_ERROR = 'PAYMENT_DECLINED_ERROR',\n    COUPON_CODE_INVALID_ERROR = 'COUPON_CODE_INVALID_ERROR',\n    COUPON_CODE_EXPIRED_ERROR = 'COUPON_CODE_EXPIRED_ERROR',\n    COUPON_CODE_LIMIT_ERROR = 'COUPON_CODE_LIMIT_ERROR',\n    ALREADY_LOGGED_IN_ERROR = 'ALREADY_LOGGED_IN_ERROR',\n    MISSING_PASSWORD_ERROR = 'MISSING_PASSWORD_ERROR',\n    PASSWORD_ALREADY_SET_ERROR = 'PASSWORD_ALREADY_SET_ERROR',\n    VERIFICATION_TOKEN_INVALID_ERROR = 'VERIFICATION_TOKEN_INVALID_ERROR',\n    VERIFICATION_TOKEN_EXPIRED_ERROR = 'VERIFICATION_TOKEN_EXPIRED_ERROR',\n    IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR = 'IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR',\n    IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR = 'IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR',\n    PASSWORD_RESET_TOKEN_INVALID_ERROR = 'PASSWORD_RESET_TOKEN_INVALID_ERROR',\n    PASSWORD_RESET_TOKEN_EXPIRED_ERROR = 'PASSWORD_RESET_TOKEN_EXPIRED_ERROR',\n    NOT_VERIFIED_ERROR = 'NOT_VERIFIED_ERROR',\n    NO_ACTIVE_ORDER_ERROR = 'NO_ACTIVE_ORDER_ERROR',\n}\n\nexport enum LogicalOperator {\n    AND = 'AND',\n    OR = 'OR',\n}\n\n/** Retured when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured. */\nexport type NativeAuthStrategyError = ErrorResult & {\n    __typename?: 'NativeAuthStrategyError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Returned if the user authentication credentials are not valid */\nexport type InvalidCredentialsError = ErrorResult & {\n    __typename?: 'InvalidCredentialsError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    authenticationError: Scalars['String'];\n};\n\n/** Returned if there is an error in transitioning the Order state */\nexport type OrderStateTransitionError = ErrorResult & {\n    __typename?: 'OrderStateTransitionError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    transitionError: Scalars['String'];\n    fromState: Scalars['String'];\n    toState: Scalars['String'];\n};\n\n/** Retured when attemting to create a Customer with an email address already registered to an existing User. */\nexport type EmailAddressConflictError = ErrorResult & {\n    __typename?: 'EmailAddressConflictError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Retured when the maximum order size limit has been reached. */\nexport type OrderLimitError = ErrorResult & {\n    __typename?: 'OrderLimitError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    maxItems: Scalars['Int'];\n};\n\n/** Retured when attemting to set a negative OrderLine quantity. */\nexport type NegativeQuantityError = ErrorResult & {\n    __typename?: 'NegativeQuantityError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Returned when attempting to add more items to the Order than are available */\nexport type InsufficientStockError = ErrorResult & {\n    __typename?: 'InsufficientStockError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    quantityAvailable: Scalars['Int'];\n    order: Order;\n};\n\nexport type PaginatedList = {\n    items: Array<Node>;\n    totalItems: Scalars['Int'];\n};\n\nexport type Node = {\n    id: Scalars['ID'];\n};\n\nexport type ErrorResult = {\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\nexport type Adjustment = {\n    __typename?: 'Adjustment';\n    adjustmentSource: Scalars['String'];\n    type: AdjustmentType;\n    description: Scalars['String'];\n    amount: Scalars['Int'];\n};\n\nexport type TaxLine = {\n    __typename?: 'TaxLine';\n    description: Scalars['String'];\n    taxRate: Scalars['Float'];\n};\n\nexport type ConfigArg = {\n    __typename?: 'ConfigArg';\n    name: Scalars['String'];\n    value: Scalars['String'];\n};\n\nexport type ConfigArgDefinition = {\n    __typename?: 'ConfigArgDefinition';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    required: Scalars['Boolean'];\n    defaultValue?: Maybe<Scalars['JSON']>;\n    label?: Maybe<Scalars['String']>;\n    description?: Maybe<Scalars['String']>;\n    ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type ConfigurableOperation = {\n    __typename?: 'ConfigurableOperation';\n    code: Scalars['String'];\n    args: Array<ConfigArg>;\n};\n\nexport type ConfigurableOperationDefinition = {\n    __typename?: 'ConfigurableOperationDefinition';\n    code: Scalars['String'];\n    args: Array<ConfigArgDefinition>;\n    description: Scalars['String'];\n};\n\nexport type DeletionResponse = {\n    __typename?: 'DeletionResponse';\n    result: DeletionResult;\n    message?: Maybe<Scalars['String']>;\n};\n\nexport type ConfigArgInput = {\n    name: Scalars['String'];\n    /** A JSON stringified representation of the actual value */\n    value: Scalars['String'];\n};\n\nexport type ConfigurableOperationInput = {\n    code: Scalars['String'];\n    arguments: Array<ConfigArgInput>;\n};\n\nexport type StringOperators = {\n    eq?: Maybe<Scalars['String']>;\n    notEq?: Maybe<Scalars['String']>;\n    contains?: Maybe<Scalars['String']>;\n    notContains?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Scalars['String']>>;\n    notIn?: Maybe<Array<Scalars['String']>>;\n    regex?: Maybe<Scalars['String']>;\n};\n\nexport type BooleanOperators = {\n    eq?: Maybe<Scalars['Boolean']>;\n};\n\nexport type NumberRange = {\n    start: Scalars['Float'];\n    end: Scalars['Float'];\n};\n\nexport type NumberOperators = {\n    eq?: Maybe<Scalars['Float']>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    between?: Maybe<NumberRange>;\n};\n\nexport type DateRange = {\n    start: Scalars['DateTime'];\n    end: Scalars['DateTime'];\n};\n\nexport type DateOperators = {\n    eq?: Maybe<Scalars['DateTime']>;\n    before?: Maybe<Scalars['DateTime']>;\n    after?: Maybe<Scalars['DateTime']>;\n    between?: Maybe<DateRange>;\n};\n\n/**\n * Used to construct boolean expressions for filtering search results\n * by FacetValue ID. Examples:\n *\n * * ID=1 OR ID=2: `{ facetValueFilters: [{ or: [1,2] }] }`\n * * ID=1 AND ID=2: `{ facetValueFilters: [{ and: 1 }, { and: 2 }] }`\n * * ID=1 AND (ID=2 OR ID=3): `{ facetValueFilters: [{ and: 1 }, { or: [2,3] }] }`\n */\nexport type FacetValueFilterInput = {\n    and?: Maybe<Scalars['ID']>;\n    or?: Maybe<Array<Scalars['ID']>>;\n};\n\nexport type SearchInput = {\n    term?: Maybe<Scalars['String']>;\n    facetValueIds?: Maybe<Array<Scalars['ID']>>;\n    facetValueOperator?: Maybe<LogicalOperator>;\n    facetValueFilters?: Maybe<Array<FacetValueFilterInput>>;\n    collectionId?: Maybe<Scalars['ID']>;\n    collectionSlug?: Maybe<Scalars['String']>;\n    groupByProduct?: Maybe<Scalars['Boolean']>;\n    take?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SearchResultSortParameter>;\n};\n\nexport type SearchResultSortParameter = {\n    name?: Maybe<SortOrder>;\n    price?: Maybe<SortOrder>;\n};\n\nexport type CreateCustomerInput = {\n    title?: Maybe<Scalars['String']>;\n    firstName: Scalars['String'];\n    lastName: Scalars['String'];\n    phoneNumber?: Maybe<Scalars['String']>;\n    emailAddress: Scalars['String'];\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type CreateAddressInput = {\n    fullName?: Maybe<Scalars['String']>;\n    company?: Maybe<Scalars['String']>;\n    streetLine1: Scalars['String'];\n    streetLine2?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    province?: Maybe<Scalars['String']>;\n    postalCode?: Maybe<Scalars['String']>;\n    countryCode: Scalars['String'];\n    phoneNumber?: Maybe<Scalars['String']>;\n    defaultShippingAddress?: Maybe<Scalars['Boolean']>;\n    defaultBillingAddress?: Maybe<Scalars['Boolean']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type UpdateAddressInput = {\n    id: Scalars['ID'];\n    fullName?: Maybe<Scalars['String']>;\n    company?: Maybe<Scalars['String']>;\n    streetLine1?: Maybe<Scalars['String']>;\n    streetLine2?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    province?: Maybe<Scalars['String']>;\n    postalCode?: Maybe<Scalars['String']>;\n    countryCode?: Maybe<Scalars['String']>;\n    phoneNumber?: Maybe<Scalars['String']>;\n    defaultShippingAddress?: Maybe<Scalars['Boolean']>;\n    defaultBillingAddress?: Maybe<Scalars['Boolean']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\n/** Indicates that an operation succeeded, where we do not want to return any more specific information. */\nexport type Success = {\n    __typename?: 'Success';\n    success: Scalars['Boolean'];\n};\n\nexport type ShippingMethodQuote = {\n    __typename?: 'ShippingMethodQuote';\n    id: Scalars['ID'];\n    price: Scalars['Int'];\n    priceWithTax: Scalars['Int'];\n    code: Scalars['String'];\n    name: Scalars['String'];\n    description: Scalars['String'];\n    /** Any optional metadata returned by the ShippingCalculator in the ShippingCalculationResult */\n    metadata?: Maybe<Scalars['JSON']>;\n};\n\nexport type PaymentMethodQuote = {\n    __typename?: 'PaymentMethodQuote';\n    id: Scalars['ID'];\n    code: Scalars['String'];\n    name: Scalars['String'];\n    description: Scalars['String'];\n    isEligible: Scalars['Boolean'];\n    eligibilityMessage?: Maybe<Scalars['String']>;\n};\n\nexport type Country = Node & {\n    __typename?: 'Country';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    code: Scalars['String'];\n    name: Scalars['String'];\n    enabled: Scalars['Boolean'];\n    translations: Array<CountryTranslation>;\n};\n\nexport type CountryTranslation = {\n    __typename?: 'CountryTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type CountryList = PaginatedList & {\n    __typename?: 'CountryList';\n    items: Array<Country>;\n    totalItems: Scalars['Int'];\n};\n\n/**\n * @description\n * ISO 4217 currency code\n *\n * @docsCategory common\n */\nexport enum CurrencyCode {\n    /** United Arab Emirates dirham */\n    AED = 'AED',\n    /** Afghan afghani */\n    AFN = 'AFN',\n    /** Albanian lek */\n    ALL = 'ALL',\n    /** Armenian dram */\n    AMD = 'AMD',\n    /** Netherlands Antillean guilder */\n    ANG = 'ANG',\n    /** Angolan kwanza */\n    AOA = 'AOA',\n    /** Argentine peso */\n    ARS = 'ARS',\n    /** Australian dollar */\n    AUD = 'AUD',\n    /** Aruban florin */\n    AWG = 'AWG',\n    /** Azerbaijani manat */\n    AZN = 'AZN',\n    /** Bosnia and Herzegovina convertible mark */\n    BAM = 'BAM',\n    /** Barbados dollar */\n    BBD = 'BBD',\n    /** Bangladeshi taka */\n    BDT = 'BDT',\n    /** Bulgarian lev */\n    BGN = 'BGN',\n    /** Bahraini dinar */\n    BHD = 'BHD',\n    /** Burundian franc */\n    BIF = 'BIF',\n    /** Bermudian dollar */\n    BMD = 'BMD',\n    /** Brunei dollar */\n    BND = 'BND',\n    /** Boliviano */\n    BOB = 'BOB',\n    /** Brazilian real */\n    BRL = 'BRL',\n    /** Bahamian dollar */\n    BSD = 'BSD',\n    /** Bhutanese ngultrum */\n    BTN = 'BTN',\n    /** Botswana pula */\n    BWP = 'BWP',\n    /** Belarusian ruble */\n    BYN = 'BYN',\n    /** Belize dollar */\n    BZD = 'BZD',\n    /** Canadian dollar */\n    CAD = 'CAD',\n    /** Congolese franc */\n    CDF = 'CDF',\n    /** Swiss franc */\n    CHF = 'CHF',\n    /** Chilean peso */\n    CLP = 'CLP',\n    /** Renminbi (Chinese) yuan */\n    CNY = 'CNY',\n    /** Colombian peso */\n    COP = 'COP',\n    /** Costa Rican colon */\n    CRC = 'CRC',\n    /** Cuban convertible peso */\n    CUC = 'CUC',\n    /** Cuban peso */\n    CUP = 'CUP',\n    /** Cape Verde escudo */\n    CVE = 'CVE',\n    /** Czech koruna */\n    CZK = 'CZK',\n    /** Djiboutian franc */\n    DJF = 'DJF',\n    /** Danish krone */\n    DKK = 'DKK',\n    /** Dominican peso */\n    DOP = 'DOP',\n    /** Algerian dinar */\n    DZD = 'DZD',\n    /** Egyptian pound */\n    EGP = 'EGP',\n    /** Eritrean nakfa */\n    ERN = 'ERN',\n    /** Ethiopian birr */\n    ETB = 'ETB',\n    /** Euro */\n    EUR = 'EUR',\n    /** Fiji dollar */\n    FJD = 'FJD',\n    /** Falkland Islands pound */\n    FKP = 'FKP',\n    /** Pound sterling */\n    GBP = 'GBP',\n    /** Georgian lari */\n    GEL = 'GEL',\n    /** Ghanaian cedi */\n    GHS = 'GHS',\n    /** Gibraltar pound */\n    GIP = 'GIP',\n    /** Gambian dalasi */\n    GMD = 'GMD',\n    /** Guinean franc */\n    GNF = 'GNF',\n    /** Guatemalan quetzal */\n    GTQ = 'GTQ',\n    /** Guyanese dollar */\n    GYD = 'GYD',\n    /** Hong Kong dollar */\n    HKD = 'HKD',\n    /** Honduran lempira */\n    HNL = 'HNL',\n    /** Croatian kuna */\n    HRK = 'HRK',\n    /** Haitian gourde */\n    HTG = 'HTG',\n    /** Hungarian forint */\n    HUF = 'HUF',\n    /** Indonesian rupiah */\n    IDR = 'IDR',\n    /** Israeli new shekel */\n    ILS = 'ILS',\n    /** Indian rupee */\n    INR = 'INR',\n    /** Iraqi dinar */\n    IQD = 'IQD',\n    /** Iranian rial */\n    IRR = 'IRR',\n    /** Icelandic króna */\n    ISK = 'ISK',\n    /** Jamaican dollar */\n    JMD = 'JMD',\n    /** Jordanian dinar */\n    JOD = 'JOD',\n    /** Japanese yen */\n    JPY = 'JPY',\n    /** Kenyan shilling */\n    KES = 'KES',\n    /** Kyrgyzstani som */\n    KGS = 'KGS',\n    /** Cambodian riel */\n    KHR = 'KHR',\n    /** Comoro franc */\n    KMF = 'KMF',\n    /** North Korean won */\n    KPW = 'KPW',\n    /** South Korean won */\n    KRW = 'KRW',\n    /** Kuwaiti dinar */\n    KWD = 'KWD',\n    /** Cayman Islands dollar */\n    KYD = 'KYD',\n    /** Kazakhstani tenge */\n    KZT = 'KZT',\n    /** Lao kip */\n    LAK = 'LAK',\n    /** Lebanese pound */\n    LBP = 'LBP',\n    /** Sri Lankan rupee */\n    LKR = 'LKR',\n    /** Liberian dollar */\n    LRD = 'LRD',\n    /** Lesotho loti */\n    LSL = 'LSL',\n    /** Libyan dinar */\n    LYD = 'LYD',\n    /** Moroccan dirham */\n    MAD = 'MAD',\n    /** Moldovan leu */\n    MDL = 'MDL',\n    /** Malagasy ariary */\n    MGA = 'MGA',\n    /** Macedonian denar */\n    MKD = 'MKD',\n    /** Myanmar kyat */\n    MMK = 'MMK',\n    /** Mongolian tögrög */\n    MNT = 'MNT',\n    /** Macanese pataca */\n    MOP = 'MOP',\n    /** Mauritanian ouguiya */\n    MRU = 'MRU',\n    /** Mauritian rupee */\n    MUR = 'MUR',\n    /** Maldivian rufiyaa */\n    MVR = 'MVR',\n    /** Malawian kwacha */\n    MWK = 'MWK',\n    /** Mexican peso */\n    MXN = 'MXN',\n    /** Malaysian ringgit */\n    MYR = 'MYR',\n    /** Mozambican metical */\n    MZN = 'MZN',\n    /** Namibian dollar */\n    NAD = 'NAD',\n    /** Nigerian naira */\n    NGN = 'NGN',\n    /** Nicaraguan córdoba */\n    NIO = 'NIO',\n    /** Norwegian krone */\n    NOK = 'NOK',\n    /** Nepalese rupee */\n    NPR = 'NPR',\n    /** New Zealand dollar */\n    NZD = 'NZD',\n    /** Omani rial */\n    OMR = 'OMR',\n    /** Panamanian balboa */\n    PAB = 'PAB',\n    /** Peruvian sol */\n    PEN = 'PEN',\n    /** Papua New Guinean kina */\n    PGK = 'PGK',\n    /** Philippine peso */\n    PHP = 'PHP',\n    /** Pakistani rupee */\n    PKR = 'PKR',\n    /** Polish złoty */\n    PLN = 'PLN',\n    /** Paraguayan guaraní */\n    PYG = 'PYG',\n    /** Qatari riyal */\n    QAR = 'QAR',\n    /** Romanian leu */\n    RON = 'RON',\n    /** Serbian dinar */\n    RSD = 'RSD',\n    /** Russian ruble */\n    RUB = 'RUB',\n    /** Rwandan franc */\n    RWF = 'RWF',\n    /** Saudi riyal */\n    SAR = 'SAR',\n    /** Solomon Islands dollar */\n    SBD = 'SBD',\n    /** Seychelles rupee */\n    SCR = 'SCR',\n    /** Sudanese pound */\n    SDG = 'SDG',\n    /** Swedish krona/kronor */\n    SEK = 'SEK',\n    /** Singapore dollar */\n    SGD = 'SGD',\n    /** Saint Helena pound */\n    SHP = 'SHP',\n    /** Sierra Leonean leone */\n    SLL = 'SLL',\n    /** Somali shilling */\n    SOS = 'SOS',\n    /** Surinamese dollar */\n    SRD = 'SRD',\n    /** South Sudanese pound */\n    SSP = 'SSP',\n    /** São Tomé and Príncipe dobra */\n    STN = 'STN',\n    /** Salvadoran colón */\n    SVC = 'SVC',\n    /** Syrian pound */\n    SYP = 'SYP',\n    /** Swazi lilangeni */\n    SZL = 'SZL',\n    /** Thai baht */\n    THB = 'THB',\n    /** Tajikistani somoni */\n    TJS = 'TJS',\n    /** Turkmenistan manat */\n    TMT = 'TMT',\n    /** Tunisian dinar */\n    TND = 'TND',\n    /** Tongan paʻanga */\n    TOP = 'TOP',\n    /** Turkish lira */\n    TRY = 'TRY',\n    /** Trinidad and Tobago dollar */\n    TTD = 'TTD',\n    /** New Taiwan dollar */\n    TWD = 'TWD',\n    /** Tanzanian shilling */\n    TZS = 'TZS',\n    /** Ukrainian hryvnia */\n    UAH = 'UAH',\n    /** Ugandan shilling */\n    UGX = 'UGX',\n    /** United States dollar */\n    USD = 'USD',\n    /** Uruguayan peso */\n    UYU = 'UYU',\n    /** Uzbekistan som */\n    UZS = 'UZS',\n    /** Venezuelan bolívar soberano */\n    VES = 'VES',\n    /** Vietnamese đồng */\n    VND = 'VND',\n    /** Vanuatu vatu */\n    VUV = 'VUV',\n    /** Samoan tala */\n    WST = 'WST',\n    /** CFA franc BEAC */\n    XAF = 'XAF',\n    /** East Caribbean dollar */\n    XCD = 'XCD',\n    /** CFA franc BCEAO */\n    XOF = 'XOF',\n    /** CFP franc (franc Pacifique) */\n    XPF = 'XPF',\n    /** Yemeni rial */\n    YER = 'YER',\n    /** South African rand */\n    ZAR = 'ZAR',\n    /** Zambian kwacha */\n    ZMW = 'ZMW',\n    /** Zimbabwean dollar */\n    ZWL = 'ZWL',\n}\n\nexport type CustomField = {\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n};\n\nexport type StringCustomFieldConfig = CustomField & {\n    __typename?: 'StringCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    length?: Maybe<Scalars['Int']>;\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    pattern?: Maybe<Scalars['String']>;\n    options?: Maybe<Array<StringFieldOption>>;\n};\n\nexport type StringFieldOption = {\n    __typename?: 'StringFieldOption';\n    value: Scalars['String'];\n    label?: Maybe<Array<LocalizedString>>;\n};\n\nexport type LocaleStringCustomFieldConfig = CustomField & {\n    __typename?: 'LocaleStringCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    length?: Maybe<Scalars['Int']>;\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    pattern?: Maybe<Scalars['String']>;\n};\n\nexport type IntCustomFieldConfig = CustomField & {\n    __typename?: 'IntCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    min?: Maybe<Scalars['Int']>;\n    max?: Maybe<Scalars['Int']>;\n    step?: Maybe<Scalars['Int']>;\n};\n\nexport type FloatCustomFieldConfig = CustomField & {\n    __typename?: 'FloatCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    min?: Maybe<Scalars['Float']>;\n    max?: Maybe<Scalars['Float']>;\n    step?: Maybe<Scalars['Float']>;\n};\n\nexport type BooleanCustomFieldConfig = CustomField & {\n    __typename?: 'BooleanCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n};\n\n/**\n * Expects the same validation formats as the `<input type=\"datetime-local\">` HTML element.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes\n */\nexport type DateTimeCustomFieldConfig = CustomField & {\n    __typename?: 'DateTimeCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    min?: Maybe<Scalars['String']>;\n    max?: Maybe<Scalars['String']>;\n    step?: Maybe<Scalars['Int']>;\n};\n\nexport type RelationCustomFieldConfig = CustomField & {\n    __typename?: 'RelationCustomFieldConfig';\n    name: Scalars['String'];\n    type: Scalars['String'];\n    list: Scalars['Boolean'];\n    label?: Maybe<Array<LocalizedString>>;\n    description?: Maybe<Array<LocalizedString>>;\n    readonly?: Maybe<Scalars['Boolean']>;\n    internal?: Maybe<Scalars['Boolean']>;\n    entity: Scalars['String'];\n    scalarFields: Array<Scalars['String']>;\n};\n\nexport type LocalizedString = {\n    __typename?: 'LocalizedString';\n    languageCode: LanguageCode;\n    value: Scalars['String'];\n};\n\nexport type CustomFieldConfig =\n    | StringCustomFieldConfig\n    | LocaleStringCustomFieldConfig\n    | IntCustomFieldConfig\n    | FloatCustomFieldConfig\n    | BooleanCustomFieldConfig\n    | DateTimeCustomFieldConfig\n    | RelationCustomFieldConfig;\n\nexport type CustomerGroup = Node & {\n    __typename?: 'CustomerGroup';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    name: Scalars['String'];\n    customers: CustomerList;\n};\n\nexport type CustomerGroupCustomersArgs = {\n    options?: Maybe<CustomerListOptions>;\n};\n\nexport type Customer = Node & {\n    __typename?: 'Customer';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    title?: Maybe<Scalars['String']>;\n    firstName: Scalars['String'];\n    lastName: Scalars['String'];\n    phoneNumber?: Maybe<Scalars['String']>;\n    emailAddress: Scalars['String'];\n    addresses?: Maybe<Array<Address>>;\n    orders: OrderList;\n    user?: Maybe<User>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type CustomerOrdersArgs = {\n    options?: Maybe<OrderListOptions>;\n};\n\nexport type CustomerList = PaginatedList & {\n    __typename?: 'CustomerList';\n    items: Array<Customer>;\n    totalItems: Scalars['Int'];\n};\n\nexport type FacetValue = Node & {\n    __typename?: 'FacetValue';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    facet: Facet;\n    name: Scalars['String'];\n    code: Scalars['String'];\n    translations: Array<FacetValueTranslation>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type FacetValueTranslation = {\n    __typename?: 'FacetValueTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type Facet = Node & {\n    __typename?: 'Facet';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n    code: Scalars['String'];\n    values: Array<FacetValue>;\n    translations: Array<FacetTranslation>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type FacetTranslation = {\n    __typename?: 'FacetTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type FacetList = PaginatedList & {\n    __typename?: 'FacetList';\n    items: Array<Facet>;\n    totalItems: Scalars['Int'];\n};\n\nexport type HistoryEntry = Node & {\n    __typename?: 'HistoryEntry';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    type: HistoryEntryType;\n    data: Scalars['JSON'];\n};\n\nexport enum HistoryEntryType {\n    CUSTOMER_REGISTERED = 'CUSTOMER_REGISTERED',\n    CUSTOMER_VERIFIED = 'CUSTOMER_VERIFIED',\n    CUSTOMER_DETAIL_UPDATED = 'CUSTOMER_DETAIL_UPDATED',\n    CUSTOMER_ADDED_TO_GROUP = 'CUSTOMER_ADDED_TO_GROUP',\n    CUSTOMER_REMOVED_FROM_GROUP = 'CUSTOMER_REMOVED_FROM_GROUP',\n    CUSTOMER_ADDRESS_CREATED = 'CUSTOMER_ADDRESS_CREATED',\n    CUSTOMER_ADDRESS_UPDATED = 'CUSTOMER_ADDRESS_UPDATED',\n    CUSTOMER_ADDRESS_DELETED = 'CUSTOMER_ADDRESS_DELETED',\n    CUSTOMER_PASSWORD_UPDATED = 'CUSTOMER_PASSWORD_UPDATED',\n    CUSTOMER_PASSWORD_RESET_REQUESTED = 'CUSTOMER_PASSWORD_RESET_REQUESTED',\n    CUSTOMER_PASSWORD_RESET_VERIFIED = 'CUSTOMER_PASSWORD_RESET_VERIFIED',\n    CUSTOMER_EMAIL_UPDATE_REQUESTED = 'CUSTOMER_EMAIL_UPDATE_REQUESTED',\n    CUSTOMER_EMAIL_UPDATE_VERIFIED = 'CUSTOMER_EMAIL_UPDATE_VERIFIED',\n    CUSTOMER_NOTE = 'CUSTOMER_NOTE',\n    ORDER_STATE_TRANSITION = 'ORDER_STATE_TRANSITION',\n    ORDER_PAYMENT_TRANSITION = 'ORDER_PAYMENT_TRANSITION',\n    ORDER_FULFILLMENT = 'ORDER_FULFILLMENT',\n    ORDER_CANCELLATION = 'ORDER_CANCELLATION',\n    ORDER_REFUND_TRANSITION = 'ORDER_REFUND_TRANSITION',\n    ORDER_FULFILLMENT_TRANSITION = 'ORDER_FULFILLMENT_TRANSITION',\n    ORDER_NOTE = 'ORDER_NOTE',\n    ORDER_COUPON_APPLIED = 'ORDER_COUPON_APPLIED',\n    ORDER_COUPON_REMOVED = 'ORDER_COUPON_REMOVED',\n    ORDER_MODIFIED = 'ORDER_MODIFIED',\n}\n\nexport type HistoryEntryList = PaginatedList & {\n    __typename?: 'HistoryEntryList';\n    items: Array<HistoryEntry>;\n    totalItems: Scalars['Int'];\n};\n\n/**\n * @description\n * Languages in the form of a ISO 639-1 language code with optional\n * region or script modifier (e.g. de_AT). The selection available is based\n * on the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\n * and includes the major spoken languages of the world and any widely-used variants.\n *\n * @docsCategory common\n */\nexport enum LanguageCode {\n    /** Afrikaans */\n    af = 'af',\n    /** Akan */\n    ak = 'ak',\n    /** Albanian */\n    sq = 'sq',\n    /** Amharic */\n    am = 'am',\n    /** Arabic */\n    ar = 'ar',\n    /** Armenian */\n    hy = 'hy',\n    /** Assamese */\n    as = 'as',\n    /** Azerbaijani */\n    az = 'az',\n    /** Bambara */\n    bm = 'bm',\n    /** Bangla */\n    bn = 'bn',\n    /** Basque */\n    eu = 'eu',\n    /** Belarusian */\n    be = 'be',\n    /** Bosnian */\n    bs = 'bs',\n    /** Breton */\n    br = 'br',\n    /** Bulgarian */\n    bg = 'bg',\n    /** Burmese */\n    my = 'my',\n    /** Catalan */\n    ca = 'ca',\n    /** Chechen */\n    ce = 'ce',\n    /** Chinese */\n    zh = 'zh',\n    /** Simplified Chinese */\n    zh_Hans = 'zh_Hans',\n    /** Traditional Chinese */\n    zh_Hant = 'zh_Hant',\n    /** Church Slavic */\n    cu = 'cu',\n    /** Cornish */\n    kw = 'kw',\n    /** Corsican */\n    co = 'co',\n    /** Croatian */\n    hr = 'hr',\n    /** Czech */\n    cs = 'cs',\n    /** Danish */\n    da = 'da',\n    /** Dutch */\n    nl = 'nl',\n    /** Flemish */\n    nl_BE = 'nl_BE',\n    /** Dzongkha */\n    dz = 'dz',\n    /** English */\n    en = 'en',\n    /** Australian English */\n    en_AU = 'en_AU',\n    /** Canadian English */\n    en_CA = 'en_CA',\n    /** British English */\n    en_GB = 'en_GB',\n    /** American English */\n    en_US = 'en_US',\n    /** Esperanto */\n    eo = 'eo',\n    /** Estonian */\n    et = 'et',\n    /** Ewe */\n    ee = 'ee',\n    /** Faroese */\n    fo = 'fo',\n    /** Finnish */\n    fi = 'fi',\n    /** French */\n    fr = 'fr',\n    /** Canadian French */\n    fr_CA = 'fr_CA',\n    /** Swiss French */\n    fr_CH = 'fr_CH',\n    /** Fulah */\n    ff = 'ff',\n    /** Galician */\n    gl = 'gl',\n    /** Ganda */\n    lg = 'lg',\n    /** Georgian */\n    ka = 'ka',\n    /** German */\n    de = 'de',\n    /** Austrian German */\n    de_AT = 'de_AT',\n    /** Swiss High German */\n    de_CH = 'de_CH',\n    /** Greek */\n    el = 'el',\n    /** Gujarati */\n    gu = 'gu',\n    /** Haitian Creole */\n    ht = 'ht',\n    /** Hausa */\n    ha = 'ha',\n    /** Hebrew */\n    he = 'he',\n    /** Hindi */\n    hi = 'hi',\n    /** Hungarian */\n    hu = 'hu',\n    /** Icelandic */\n    is = 'is',\n    /** Igbo */\n    ig = 'ig',\n    /** Indonesian */\n    id = 'id',\n    /** Interlingua */\n    ia = 'ia',\n    /** Irish */\n    ga = 'ga',\n    /** Italian */\n    it = 'it',\n    /** Japanese */\n    ja = 'ja',\n    /** Javanese */\n    jv = 'jv',\n    /** Kalaallisut */\n    kl = 'kl',\n    /** Kannada */\n    kn = 'kn',\n    /** Kashmiri */\n    ks = 'ks',\n    /** Kazakh */\n    kk = 'kk',\n    /** Khmer */\n    km = 'km',\n    /** Kikuyu */\n    ki = 'ki',\n    /** Kinyarwanda */\n    rw = 'rw',\n    /** Korean */\n    ko = 'ko',\n    /** Kurdish */\n    ku = 'ku',\n    /** Kyrgyz */\n    ky = 'ky',\n    /** Lao */\n    lo = 'lo',\n    /** Latin */\n    la = 'la',\n    /** Latvian */\n    lv = 'lv',\n    /** Lingala */\n    ln = 'ln',\n    /** Lithuanian */\n    lt = 'lt',\n    /** Luba-Katanga */\n    lu = 'lu',\n    /** Luxembourgish */\n    lb = 'lb',\n    /** Macedonian */\n    mk = 'mk',\n    /** Malagasy */\n    mg = 'mg',\n    /** Malay */\n    ms = 'ms',\n    /** Malayalam */\n    ml = 'ml',\n    /** Maltese */\n    mt = 'mt',\n    /** Manx */\n    gv = 'gv',\n    /** Maori */\n    mi = 'mi',\n    /** Marathi */\n    mr = 'mr',\n    /** Mongolian */\n    mn = 'mn',\n    /** Nepali */\n    ne = 'ne',\n    /** North Ndebele */\n    nd = 'nd',\n    /** Northern Sami */\n    se = 'se',\n    /** Norwegian Bokmål */\n    nb = 'nb',\n    /** Norwegian Nynorsk */\n    nn = 'nn',\n    /** Nyanja */\n    ny = 'ny',\n    /** Odia */\n    or = 'or',\n    /** Oromo */\n    om = 'om',\n    /** Ossetic */\n    os = 'os',\n    /** Pashto */\n    ps = 'ps',\n    /** Persian */\n    fa = 'fa',\n    /** Dari */\n    fa_AF = 'fa_AF',\n    /** Polish */\n    pl = 'pl',\n    /** Portuguese */\n    pt = 'pt',\n    /** Brazilian Portuguese */\n    pt_BR = 'pt_BR',\n    /** European Portuguese */\n    pt_PT = 'pt_PT',\n    /** Punjabi */\n    pa = 'pa',\n    /** Quechua */\n    qu = 'qu',\n    /** Romanian */\n    ro = 'ro',\n    /** Moldavian */\n    ro_MD = 'ro_MD',\n    /** Romansh */\n    rm = 'rm',\n    /** Rundi */\n    rn = 'rn',\n    /** Russian */\n    ru = 'ru',\n    /** Samoan */\n    sm = 'sm',\n    /** Sango */\n    sg = 'sg',\n    /** Sanskrit */\n    sa = 'sa',\n    /** Scottish Gaelic */\n    gd = 'gd',\n    /** Serbian */\n    sr = 'sr',\n    /** Shona */\n    sn = 'sn',\n    /** Sichuan Yi */\n    ii = 'ii',\n    /** Sindhi */\n    sd = 'sd',\n    /** Sinhala */\n    si = 'si',\n    /** Slovak */\n    sk = 'sk',\n    /** Slovenian */\n    sl = 'sl',\n    /** Somali */\n    so = 'so',\n    /** Southern Sotho */\n    st = 'st',\n    /** Spanish */\n    es = 'es',\n    /** European Spanish */\n    es_ES = 'es_ES',\n    /** Mexican Spanish */\n    es_MX = 'es_MX',\n    /** Sundanese */\n    su = 'su',\n    /** Swahili */\n    sw = 'sw',\n    /** Congo Swahili */\n    sw_CD = 'sw_CD',\n    /** Swedish */\n    sv = 'sv',\n    /** Tajik */\n    tg = 'tg',\n    /** Tamil */\n    ta = 'ta',\n    /** Tatar */\n    tt = 'tt',\n    /** Telugu */\n    te = 'te',\n    /** Thai */\n    th = 'th',\n    /** Tibetan */\n    bo = 'bo',\n    /** Tigrinya */\n    ti = 'ti',\n    /** Tongan */\n    to = 'to',\n    /** Turkish */\n    tr = 'tr',\n    /** Turkmen */\n    tk = 'tk',\n    /** Ukrainian */\n    uk = 'uk',\n    /** Urdu */\n    ur = 'ur',\n    /** Uyghur */\n    ug = 'ug',\n    /** Uzbek */\n    uz = 'uz',\n    /** Vietnamese */\n    vi = 'vi',\n    /** Volapük */\n    vo = 'vo',\n    /** Welsh */\n    cy = 'cy',\n    /** Western Frisian */\n    fy = 'fy',\n    /** Wolof */\n    wo = 'wo',\n    /** Xhosa */\n    xh = 'xh',\n    /** Yiddish */\n    yi = 'yi',\n    /** Yoruba */\n    yo = 'yo',\n    /** Zulu */\n    zu = 'zu',\n}\n\nexport type Order = Node & {\n    __typename?: 'Order';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    /**\n     * The date & time that the Order was placed, i.e. the Customer\n     * completed the checkout and the Order is no longer \"active\"\n     */\n    orderPlacedAt?: Maybe<Scalars['DateTime']>;\n    /** A unique code for the Order */\n    code: Scalars['String'];\n    state: Scalars['String'];\n    /** An order is active as long as the payment process has not been completed */\n    active: Scalars['Boolean'];\n    customer?: Maybe<Customer>;\n    shippingAddress?: Maybe<OrderAddress>;\n    billingAddress?: Maybe<OrderAddress>;\n    lines: Array<OrderLine>;\n    /**\n     * Surcharges are arbitrary modifications to the Order total which are neither\n     * ProductVariants nor discounts resulting from applied Promotions. For example,\n     * one-off discounts based on customer interaction, or surcharges based on payment\n     * methods.\n     */\n    surcharges: Array<Surcharge>;\n    discounts: Array<Discount>;\n    /** An array of all coupon codes applied to the Order */\n    couponCodes: Array<Scalars['String']>;\n    /** Promotions applied to the order. Only gets populated after the payment process has completed. */\n    promotions: Array<Promotion>;\n    payments?: Maybe<Array<Payment>>;\n    fulfillments?: Maybe<Array<Fulfillment>>;\n    totalQuantity: Scalars['Int'];\n    /**\n     * The subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\n     * discounts which have been prorated (proportionally distributed) amongst the OrderItems.\n     * To get a total of all OrderLines which does not account for prorated discounts, use the\n     * sum of `OrderLine.discountedLinePrice` values.\n     */\n    subTotal: Scalars['Int'];\n    /** Same as subTotal, but inclusive of tax */\n    subTotalWithTax: Scalars['Int'];\n    currencyCode: CurrencyCode;\n    shippingLines: Array<ShippingLine>;\n    shipping: Scalars['Int'];\n    shippingWithTax: Scalars['Int'];\n    /** Equal to subTotal plus shipping */\n    total: Scalars['Int'];\n    /** The final payable amount. Equal to subTotalWithTax plus shippingWithTax */\n    totalWithTax: Scalars['Int'];\n    /** A summary of the taxes being applied to this Order */\n    taxSummary: Array<OrderTaxSummary>;\n    history: HistoryEntryList;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type OrderHistoryArgs = {\n    options?: Maybe<HistoryEntryListOptions>;\n};\n\n/**\n * A summary of the taxes being applied to this order, grouped\n * by taxRate.\n */\nexport type OrderTaxSummary = {\n    __typename?: 'OrderTaxSummary';\n    /** A description of this tax */\n    description: Scalars['String'];\n    /** The taxRate as a percentage */\n    taxRate: Scalars['Float'];\n    /** The total net price or OrderItems to which this taxRate applies */\n    taxBase: Scalars['Int'];\n    /** The total tax being applied to the Order at this taxRate */\n    taxTotal: Scalars['Int'];\n};\n\nexport type OrderAddress = {\n    __typename?: 'OrderAddress';\n    fullName?: Maybe<Scalars['String']>;\n    company?: Maybe<Scalars['String']>;\n    streetLine1?: Maybe<Scalars['String']>;\n    streetLine2?: Maybe<Scalars['String']>;\n    city?: Maybe<Scalars['String']>;\n    province?: Maybe<Scalars['String']>;\n    postalCode?: Maybe<Scalars['String']>;\n    country?: Maybe<Scalars['String']>;\n    countryCode?: Maybe<Scalars['String']>;\n    phoneNumber?: Maybe<Scalars['String']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type OrderList = PaginatedList & {\n    __typename?: 'OrderList';\n    items: Array<Order>;\n    totalItems: Scalars['Int'];\n};\n\nexport type ShippingLine = {\n    __typename?: 'ShippingLine';\n    shippingMethod: ShippingMethod;\n    price: Scalars['Int'];\n    priceWithTax: Scalars['Int'];\n    discountedPrice: Scalars['Int'];\n    discountedPriceWithTax: Scalars['Int'];\n    discounts: Array<Discount>;\n};\n\nexport type Discount = {\n    __typename?: 'Discount';\n    adjustmentSource: Scalars['String'];\n    type: AdjustmentType;\n    description: Scalars['String'];\n    amount: Scalars['Int'];\n    amountWithTax: Scalars['Int'];\n};\n\nexport type OrderItem = Node & {\n    __typename?: 'OrderItem';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    cancelled: Scalars['Boolean'];\n    /** The price of a single unit, excluding tax and discounts */\n    unitPrice: Scalars['Int'];\n    /** The price of a single unit, including tax but excluding discounts */\n    unitPriceWithTax: Scalars['Int'];\n    /**\n     * The price of a single unit including discounts, excluding tax.\n     *\n     * If Order-level discounts have been applied, this will not be the\n     * actual taxable unit price (see `proratedUnitPrice`), but is generally the\n     * correct price to display to customers to avoid confusion\n     * about the internal handling of distributed Order-level discounts.\n     */\n    discountedUnitPrice: Scalars['Int'];\n    /** The price of a single unit including discounts and tax */\n    discountedUnitPriceWithTax: Scalars['Int'];\n    /**\n     * The actual unit price, taking into account both item discounts _and_ prorated (proportially-distributed)\n     * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\n     * and refund calculations.\n     */\n    proratedUnitPrice: Scalars['Int'];\n    /** The proratedUnitPrice including tax */\n    proratedUnitPriceWithTax: Scalars['Int'];\n    unitTax: Scalars['Int'];\n    taxRate: Scalars['Float'];\n    adjustments: Array<Adjustment>;\n    taxLines: Array<TaxLine>;\n    fulfillment?: Maybe<Fulfillment>;\n    refundId?: Maybe<Scalars['ID']>;\n};\n\nexport type OrderLine = Node & {\n    __typename?: 'OrderLine';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    productVariant: ProductVariant;\n    featuredAsset?: Maybe<Asset>;\n    /** The price of a single unit, excluding tax and discounts */\n    unitPrice: Scalars['Int'];\n    /** The price of a single unit, including tax but excluding discounts */\n    unitPriceWithTax: Scalars['Int'];\n    /** Non-zero if the unitPrice has changed since it was initially added to Order */\n    unitPriceChangeSinceAdded: Scalars['Int'];\n    /** Non-zero if the unitPriceWithTax has changed since it was initially added to Order */\n    unitPriceWithTaxChangeSinceAdded: Scalars['Int'];\n    /**\n     * The price of a single unit including discounts, excluding tax.\n     *\n     * If Order-level discounts have been applied, this will not be the\n     * actual taxable unit price (see `proratedUnitPrice`), but is generally the\n     * correct price to display to customers to avoid confusion\n     * about the internal handling of distributed Order-level discounts.\n     */\n    discountedUnitPrice: Scalars['Int'];\n    /** The price of a single unit including discounts and tax */\n    discountedUnitPriceWithTax: Scalars['Int'];\n    /**\n     * The actual unit price, taking into account both item discounts _and_ prorated (proportially-distributed)\n     * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\n     * and refund calculations.\n     */\n    proratedUnitPrice: Scalars['Int'];\n    /** The proratedUnitPrice including tax */\n    proratedUnitPriceWithTax: Scalars['Int'];\n    quantity: Scalars['Int'];\n    items: Array<OrderItem>;\n    taxRate: Scalars['Float'];\n    /** The total price of the line excluding tax and discounts. */\n    linePrice: Scalars['Int'];\n    /** The total price of the line including tax bit excluding discounts. */\n    linePriceWithTax: Scalars['Int'];\n    /** The price of the line including discounts, excluding tax */\n    discountedLinePrice: Scalars['Int'];\n    /** The price of the line including discounts and tax */\n    discountedLinePriceWithTax: Scalars['Int'];\n    /**\n     * The actual line price, taking into account both item discounts _and_ prorated (proportially-distributed)\n     * Order-level discounts. This value is the true economic value of the OrderLine, and is used in tax\n     * and refund calculations.\n     */\n    proratedLinePrice: Scalars['Int'];\n    /** The proratedLinePrice including tax */\n    proratedLinePriceWithTax: Scalars['Int'];\n    /** The total tax on this line */\n    lineTax: Scalars['Int'];\n    discounts: Array<Discount>;\n    taxLines: Array<TaxLine>;\n    order: Order;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type Payment = Node & {\n    __typename?: 'Payment';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    method: Scalars['String'];\n    amount: Scalars['Int'];\n    state: Scalars['String'];\n    transactionId?: Maybe<Scalars['String']>;\n    errorMessage?: Maybe<Scalars['String']>;\n    refunds: Array<Refund>;\n    metadata?: Maybe<Scalars['JSON']>;\n};\n\nexport type Refund = Node & {\n    __typename?: 'Refund';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    items: Scalars['Int'];\n    shipping: Scalars['Int'];\n    adjustment: Scalars['Int'];\n    total: Scalars['Int'];\n    method?: Maybe<Scalars['String']>;\n    state: Scalars['String'];\n    transactionId?: Maybe<Scalars['String']>;\n    reason?: Maybe<Scalars['String']>;\n    orderItems: Array<OrderItem>;\n    paymentId: Scalars['ID'];\n    metadata?: Maybe<Scalars['JSON']>;\n};\n\nexport type Fulfillment = Node & {\n    __typename?: 'Fulfillment';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    orderItems: Array<OrderItem>;\n    state: Scalars['String'];\n    method: Scalars['String'];\n    trackingCode?: Maybe<Scalars['String']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type Surcharge = Node & {\n    __typename?: 'Surcharge';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    description: Scalars['String'];\n    sku?: Maybe<Scalars['String']>;\n    taxLines: Array<TaxLine>;\n    price: Scalars['Int'];\n    priceWithTax: Scalars['Int'];\n    taxRate: Scalars['Float'];\n};\n\nexport type ProductOptionGroup = Node & {\n    __typename?: 'ProductOptionGroup';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    code: Scalars['String'];\n    name: Scalars['String'];\n    options: Array<ProductOption>;\n    translations: Array<ProductOptionGroupTranslation>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type ProductOptionGroupTranslation = {\n    __typename?: 'ProductOptionGroupTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type ProductOption = Node & {\n    __typename?: 'ProductOption';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    code: Scalars['String'];\n    name: Scalars['String'];\n    groupId: Scalars['ID'];\n    group: ProductOptionGroup;\n    translations: Array<ProductOptionTranslation>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type ProductOptionTranslation = {\n    __typename?: 'ProductOptionTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type SearchReindexResponse = {\n    __typename?: 'SearchReindexResponse';\n    success: Scalars['Boolean'];\n};\n\nexport type SearchResponse = {\n    __typename?: 'SearchResponse';\n    items: Array<SearchResult>;\n    totalItems: Scalars['Int'];\n    facetValues: Array<FacetValueResult>;\n};\n\n/**\n * Which FacetValues are present in the products returned\n * by the search, and in what quantity.\n */\nexport type FacetValueResult = {\n    __typename?: 'FacetValueResult';\n    facetValue: FacetValue;\n    count: Scalars['Int'];\n};\n\nexport type SearchResultAsset = {\n    __typename?: 'SearchResultAsset';\n    id: Scalars['ID'];\n    preview: Scalars['String'];\n    focalPoint?: Maybe<Coordinate>;\n};\n\nexport type SearchResult = {\n    __typename?: 'SearchResult';\n    sku: Scalars['String'];\n    slug: Scalars['String'];\n    productId: Scalars['ID'];\n    productName: Scalars['String'];\n    productAsset?: Maybe<SearchResultAsset>;\n    productVariantId: Scalars['ID'];\n    productVariantName: Scalars['String'];\n    productVariantAsset?: Maybe<SearchResultAsset>;\n    price: SearchResultPrice;\n    priceWithTax: SearchResultPrice;\n    currencyCode: CurrencyCode;\n    description: Scalars['String'];\n    facetIds: Array<Scalars['ID']>;\n    facetValueIds: Array<Scalars['ID']>;\n    /** An array of ids of the Collections in which this result appears */\n    collectionIds: Array<Scalars['ID']>;\n    /** A relevence score for the result. Differs between database implementations */\n    score: Scalars['Float'];\n};\n\n/** The price of a search result product, either as a range or as a single price */\nexport type SearchResultPrice = PriceRange | SinglePrice;\n\n/** The price value where the result has a single price */\nexport type SinglePrice = {\n    __typename?: 'SinglePrice';\n    value: Scalars['Int'];\n};\n\n/** The price range where the result has more than one price */\nexport type PriceRange = {\n    __typename?: 'PriceRange';\n    min: Scalars['Int'];\n    max: Scalars['Int'];\n};\n\nexport type Product = Node & {\n    __typename?: 'Product';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n    slug: Scalars['String'];\n    description: Scalars['String'];\n    featuredAsset?: Maybe<Asset>;\n    assets: Array<Asset>;\n    variants: Array<ProductVariant>;\n    optionGroups: Array<ProductOptionGroup>;\n    facetValues: Array<FacetValue>;\n    translations: Array<ProductTranslation>;\n    collections: Array<Collection>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type ProductTranslation = {\n    __typename?: 'ProductTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n    slug: Scalars['String'];\n    description: Scalars['String'];\n};\n\nexport type ProductList = PaginatedList & {\n    __typename?: 'ProductList';\n    items: Array<Product>;\n    totalItems: Scalars['Int'];\n};\n\nexport type ProductVariant = Node & {\n    __typename?: 'ProductVariant';\n    id: Scalars['ID'];\n    product: Product;\n    productId: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    sku: Scalars['String'];\n    name: Scalars['String'];\n    featuredAsset?: Maybe<Asset>;\n    assets: Array<Asset>;\n    price: Scalars['Int'];\n    currencyCode: CurrencyCode;\n    priceWithTax: Scalars['Int'];\n    stockLevel: Scalars['String'];\n    taxRateApplied: TaxRate;\n    taxCategory: TaxCategory;\n    options: Array<ProductOption>;\n    facetValues: Array<FacetValue>;\n    translations: Array<ProductVariantTranslation>;\n    customFields?: Maybe<ProductVariantCustomFields>;\n};\n\nexport type ProductVariantTranslation = {\n    __typename?: 'ProductVariantTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n};\n\nexport type Promotion = Node & {\n    __typename?: 'Promotion';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    startsAt?: Maybe<Scalars['DateTime']>;\n    endsAt?: Maybe<Scalars['DateTime']>;\n    couponCode?: Maybe<Scalars['String']>;\n    perCustomerUsageLimit?: Maybe<Scalars['Int']>;\n    name: Scalars['String'];\n    enabled: Scalars['Boolean'];\n    conditions: Array<ConfigurableOperation>;\n    actions: Array<ConfigurableOperation>;\n};\n\nexport type PromotionList = PaginatedList & {\n    __typename?: 'PromotionList';\n    items: Array<Promotion>;\n    totalItems: Scalars['Int'];\n};\n\nexport type Role = Node & {\n    __typename?: 'Role';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    code: Scalars['String'];\n    description: Scalars['String'];\n    permissions: Array<Permission>;\n    channels: Array<Channel>;\n};\n\nexport type RoleList = PaginatedList & {\n    __typename?: 'RoleList';\n    items: Array<Role>;\n    totalItems: Scalars['Int'];\n};\n\nexport type ShippingMethod = Node & {\n    __typename?: 'ShippingMethod';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    code: Scalars['String'];\n    name: Scalars['String'];\n    description: Scalars['String'];\n    fulfillmentHandlerCode: Scalars['String'];\n    checker: ConfigurableOperation;\n    calculator: ConfigurableOperation;\n    translations: Array<ShippingMethodTranslation>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type ShippingMethodTranslation = {\n    __typename?: 'ShippingMethodTranslation';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    languageCode: LanguageCode;\n    name: Scalars['String'];\n    description: Scalars['String'];\n};\n\nexport type ShippingMethodList = PaginatedList & {\n    __typename?: 'ShippingMethodList';\n    items: Array<ShippingMethod>;\n    totalItems: Scalars['Int'];\n};\n\nexport type Tag = Node & {\n    __typename?: 'Tag';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    value: Scalars['String'];\n};\n\nexport type TagList = PaginatedList & {\n    __typename?: 'TagList';\n    items: Array<Tag>;\n    totalItems: Scalars['Int'];\n};\n\nexport type TaxCategory = Node & {\n    __typename?: 'TaxCategory';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    name: Scalars['String'];\n    isDefault: Scalars['Boolean'];\n};\n\nexport type TaxRate = Node & {\n    __typename?: 'TaxRate';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    name: Scalars['String'];\n    enabled: Scalars['Boolean'];\n    value: Scalars['Float'];\n    category: TaxCategory;\n    zone: Zone;\n    customerGroup?: Maybe<CustomerGroup>;\n};\n\nexport type TaxRateList = PaginatedList & {\n    __typename?: 'TaxRateList';\n    items: Array<TaxRate>;\n    totalItems: Scalars['Int'];\n};\n\nexport type User = Node & {\n    __typename?: 'User';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    identifier: Scalars['String'];\n    verified: Scalars['Boolean'];\n    roles: Array<Role>;\n    lastLogin?: Maybe<Scalars['DateTime']>;\n    authenticationMethods: Array<AuthenticationMethod>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type AuthenticationMethod = Node & {\n    __typename?: 'AuthenticationMethod';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    strategy: Scalars['String'];\n};\n\nexport type Zone = Node & {\n    __typename?: 'Zone';\n    id: Scalars['ID'];\n    createdAt: Scalars['DateTime'];\n    updatedAt: Scalars['DateTime'];\n    name: Scalars['String'];\n    members: Array<Country>;\n};\n\n/** Returned when attempting to modify the contents of an Order that is not in the `AddingItems` state. */\nexport type OrderModificationError = ErrorResult & {\n    __typename?: 'OrderModificationError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Returned when attempting to set a ShippingMethod for which the Order is not eligible */\nexport type IneligibleShippingMethodError = ErrorResult & {\n    __typename?: 'IneligibleShippingMethodError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Returned when attempting to add a Payment to an Order that is not in the `ArrangingPayment` state. */\nexport type OrderPaymentStateError = ErrorResult & {\n    __typename?: 'OrderPaymentStateError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Returned when attempting to add a Payment using a PaymentMethod for which the Order is not eligible. */\nexport type IneligiblePaymentMethodError = ErrorResult & {\n    __typename?: 'IneligiblePaymentMethodError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    eligibilityCheckerMessage?: Maybe<Scalars['String']>;\n};\n\n/** Returned when a Payment fails due to an error. */\nexport type PaymentFailedError = ErrorResult & {\n    __typename?: 'PaymentFailedError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    paymentErrorMessage: Scalars['String'];\n};\n\n/** Returned when a Payment is declined by the payment provider. */\nexport type PaymentDeclinedError = ErrorResult & {\n    __typename?: 'PaymentDeclinedError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    paymentErrorMessage: Scalars['String'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeInvalidError = ErrorResult & {\n    __typename?: 'CouponCodeInvalidError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    couponCode: Scalars['String'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeExpiredError = ErrorResult & {\n    __typename?: 'CouponCodeExpiredError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    couponCode: Scalars['String'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeLimitError = ErrorResult & {\n    __typename?: 'CouponCodeLimitError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n    couponCode: Scalars['String'];\n    limit: Scalars['Int'];\n};\n\n/** Retured when attemting to set the Customer for an Order when already logged in. */\nexport type AlreadyLoggedInError = ErrorResult & {\n    __typename?: 'AlreadyLoggedInError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Retured when attemting to register or verify a customer account without a password, when one is required. */\nexport type MissingPasswordError = ErrorResult & {\n    __typename?: 'MissingPasswordError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/** Retured when attemting to verify a customer account with a password, when a password has already been set. */\nexport type PasswordAlreadySetError = ErrorResult & {\n    __typename?: 'PasswordAlreadySetError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Retured if the verification token (used to verify a Customer's email address) is either\n * invalid or does not match any expected tokens.\n */\nexport type VerificationTokenInvalidError = ErrorResult & {\n    __typename?: 'VerificationTokenInvalidError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Returned if the verification token (used to verify a Customer's email address) is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type VerificationTokenExpiredError = ErrorResult & {\n    __typename?: 'VerificationTokenExpiredError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Retured if the token used to change a Customer's email address is either\n * invalid or does not match any expected tokens.\n */\nexport type IdentifierChangeTokenInvalidError = ErrorResult & {\n    __typename?: 'IdentifierChangeTokenInvalidError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Retured if the token used to change a Customer's email address is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type IdentifierChangeTokenExpiredError = ErrorResult & {\n    __typename?: 'IdentifierChangeTokenExpiredError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Retured if the token used to reset a Customer's password is either\n * invalid or does not match any expected tokens.\n */\nexport type PasswordResetTokenInvalidError = ErrorResult & {\n    __typename?: 'PasswordResetTokenInvalidError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Retured if the token used to reset a Customer's password is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type PasswordResetTokenExpiredError = ErrorResult & {\n    __typename?: 'PasswordResetTokenExpiredError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Returned if `authOptions.requireVerification` is set to `true` (which is the default)\n * and an unverified user attempts to authenticate.\n */\nexport type NotVerifiedError = ErrorResult & {\n    __typename?: 'NotVerifiedError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\n/**\n * Returned when invoking a mutation which depends on there being an active Order on the\n * current session.\n */\nexport type NoActiveOrderError = ErrorResult & {\n    __typename?: 'NoActiveOrderError';\n    errorCode: ErrorCode;\n    message: Scalars['String'];\n};\n\nexport type RegisterCustomerInput = {\n    emailAddress: Scalars['String'];\n    title?: Maybe<Scalars['String']>;\n    firstName?: Maybe<Scalars['String']>;\n    lastName?: Maybe<Scalars['String']>;\n    phoneNumber?: Maybe<Scalars['String']>;\n    password?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateCustomerInput = {\n    title?: Maybe<Scalars['String']>;\n    firstName?: Maybe<Scalars['String']>;\n    lastName?: Maybe<Scalars['String']>;\n    phoneNumber?: Maybe<Scalars['String']>;\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\n/** Passed as input to the `addPaymentToOrder` mutation. */\nexport type PaymentInput = {\n    /** This field should correspond to the `code` property of a PaymentMethodHandler. */\n    method: Scalars['String'];\n    /**\n     * This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method\n     * as the \"metadata\" argument. For example, it could contain an ID for the payment and other\n     * data generated by the payment provider.\n     */\n    metadata: Scalars['JSON'];\n};\n\nexport type UpdateOrderItemsResult =\n    | Order\n    | OrderModificationError\n    | OrderLimitError\n    | NegativeQuantityError\n    | InsufficientStockError;\n\nexport type RemoveOrderItemsResult = Order | OrderModificationError;\n\nexport type SetOrderShippingMethodResult =\n    | Order\n    | OrderModificationError\n    | IneligibleShippingMethodError\n    | NoActiveOrderError;\n\nexport type ApplyCouponCodeResult =\n    | Order\n    | CouponCodeExpiredError\n    | CouponCodeInvalidError\n    | CouponCodeLimitError;\n\nexport type AddPaymentToOrderResult =\n    | Order\n    | OrderPaymentStateError\n    | IneligiblePaymentMethodError\n    | PaymentFailedError\n    | PaymentDeclinedError\n    | OrderStateTransitionError\n    | NoActiveOrderError;\n\nexport type TransitionOrderToStateResult = Order | OrderStateTransitionError;\n\nexport type SetCustomerForOrderResult =\n    | Order\n    | AlreadyLoggedInError\n    | EmailAddressConflictError\n    | NoActiveOrderError;\n\nexport type RegisterCustomerAccountResult = Success | MissingPasswordError | NativeAuthStrategyError;\n\nexport type RefreshCustomerVerificationResult = Success | NativeAuthStrategyError;\n\nexport type VerifyCustomerAccountResult =\n    | CurrentUser\n    | VerificationTokenInvalidError\n    | VerificationTokenExpiredError\n    | MissingPasswordError\n    | PasswordAlreadySetError\n    | NativeAuthStrategyError;\n\nexport type UpdateCustomerPasswordResult = Success | InvalidCredentialsError | NativeAuthStrategyError;\n\nexport type RequestUpdateCustomerEmailAddressResult =\n    | Success\n    | InvalidCredentialsError\n    | EmailAddressConflictError\n    | NativeAuthStrategyError;\n\nexport type UpdateCustomerEmailAddressResult =\n    | Success\n    | IdentifierChangeTokenInvalidError\n    | IdentifierChangeTokenExpiredError\n    | NativeAuthStrategyError;\n\nexport type RequestPasswordResetResult = Success | NativeAuthStrategyError;\n\nexport type ResetPasswordResult =\n    | CurrentUser\n    | PasswordResetTokenInvalidError\n    | PasswordResetTokenExpiredError\n    | NativeAuthStrategyError;\n\nexport type NativeAuthenticationResult =\n    | CurrentUser\n    | InvalidCredentialsError\n    | NotVerifiedError\n    | NativeAuthStrategyError;\n\nexport type AuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError;\n\nexport type ActiveOrderResult = Order | NoActiveOrderError;\n\nexport type CollectionListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<CollectionSortParameter>;\n    filter?: Maybe<CollectionFilterParameter>;\n};\n\nexport type ProductListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<ProductSortParameter>;\n    filter?: Maybe<ProductFilterParameter>;\n};\n\nexport type ProductVariantListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<ProductVariantSortParameter>;\n    filter?: Maybe<ProductVariantFilterParameter>;\n};\n\nexport type CustomerListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<CustomerSortParameter>;\n    filter?: Maybe<CustomerFilterParameter>;\n};\n\nexport type OrderListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<OrderSortParameter>;\n    filter?: Maybe<OrderFilterParameter>;\n};\n\nexport type HistoryEntryListOptions = {\n    skip?: Maybe<Scalars['Int']>;\n    take?: Maybe<Scalars['Int']>;\n    sort?: Maybe<HistoryEntrySortParameter>;\n    filter?: Maybe<HistoryEntryFilterParameter>;\n};\n\nexport type CollectionFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    languageCode?: Maybe<StringOperators>;\n    name?: Maybe<StringOperators>;\n    slug?: Maybe<StringOperators>;\n    position?: Maybe<NumberOperators>;\n    description?: Maybe<StringOperators>;\n};\n\nexport type CollectionSortParameter = {\n    id?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n    name?: Maybe<SortOrder>;\n    slug?: Maybe<SortOrder>;\n    position?: Maybe<SortOrder>;\n    description?: Maybe<SortOrder>;\n};\n\nexport type ProductFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    languageCode?: Maybe<StringOperators>;\n    name?: Maybe<StringOperators>;\n    slug?: Maybe<StringOperators>;\n    description?: Maybe<StringOperators>;\n};\n\nexport type ProductSortParameter = {\n    id?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n    name?: Maybe<SortOrder>;\n    slug?: Maybe<SortOrder>;\n    description?: Maybe<SortOrder>;\n};\n\nexport type ProductVariantFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    languageCode?: Maybe<StringOperators>;\n    sku?: Maybe<StringOperators>;\n    name?: Maybe<StringOperators>;\n    price?: Maybe<NumberOperators>;\n    currencyCode?: Maybe<StringOperators>;\n    priceWithTax?: Maybe<NumberOperators>;\n    stockLevel?: Maybe<StringOperators>;\n    discountPrice?: Maybe<NumberOperators>;\n};\n\nexport type ProductVariantSortParameter = {\n    id?: Maybe<SortOrder>;\n    productId?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n    sku?: Maybe<SortOrder>;\n    name?: Maybe<SortOrder>;\n    price?: Maybe<SortOrder>;\n    priceWithTax?: Maybe<SortOrder>;\n    stockLevel?: Maybe<SortOrder>;\n    discountPrice?: Maybe<SortOrder>;\n};\n\nexport type CustomerFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    title?: Maybe<StringOperators>;\n    firstName?: Maybe<StringOperators>;\n    lastName?: Maybe<StringOperators>;\n    phoneNumber?: Maybe<StringOperators>;\n    emailAddress?: Maybe<StringOperators>;\n};\n\nexport type CustomerSortParameter = {\n    id?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n    title?: Maybe<SortOrder>;\n    firstName?: Maybe<SortOrder>;\n    lastName?: Maybe<SortOrder>;\n    phoneNumber?: Maybe<SortOrder>;\n    emailAddress?: Maybe<SortOrder>;\n};\n\nexport type OrderFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    orderPlacedAt?: Maybe<DateOperators>;\n    code?: Maybe<StringOperators>;\n    state?: Maybe<StringOperators>;\n    active?: Maybe<BooleanOperators>;\n    totalQuantity?: Maybe<NumberOperators>;\n    subTotal?: Maybe<NumberOperators>;\n    subTotalWithTax?: Maybe<NumberOperators>;\n    currencyCode?: Maybe<StringOperators>;\n    shipping?: Maybe<NumberOperators>;\n    shippingWithTax?: Maybe<NumberOperators>;\n    total?: Maybe<NumberOperators>;\n    totalWithTax?: Maybe<NumberOperators>;\n};\n\nexport type OrderSortParameter = {\n    id?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n    orderPlacedAt?: Maybe<SortOrder>;\n    code?: Maybe<SortOrder>;\n    state?: Maybe<SortOrder>;\n    totalQuantity?: Maybe<SortOrder>;\n    subTotal?: Maybe<SortOrder>;\n    subTotalWithTax?: Maybe<SortOrder>;\n    shipping?: Maybe<SortOrder>;\n    shippingWithTax?: Maybe<SortOrder>;\n    total?: Maybe<SortOrder>;\n    totalWithTax?: Maybe<SortOrder>;\n};\n\nexport type HistoryEntryFilterParameter = {\n    createdAt?: Maybe<DateOperators>;\n    updatedAt?: Maybe<DateOperators>;\n    type?: Maybe<StringOperators>;\n};\n\nexport type HistoryEntrySortParameter = {\n    id?: Maybe<SortOrder>;\n    createdAt?: Maybe<SortOrder>;\n    updatedAt?: Maybe<SortOrder>;\n};\n\nexport type UpdateOrderInput = {\n    customFields?: Maybe<Scalars['JSON']>;\n};\n\nexport type ProductVariantCustomFields = {\n    __typename?: 'ProductVariantCustomFields';\n    discountPrice?: Maybe<Scalars['Int']>;\n};\n\nexport type AuthenticationInput = {\n    native?: Maybe<NativeAuthInput>;\n};\n\nexport type NativeAuthInput = {\n    username: Scalars['String'];\n    password: Scalars['String'];\n};\n","<input\n    type=\"text\"\n    name=\"searchTerm\"\n    [formControl]=\"filterTermControl\"\n    [placeholder]=\"'customer.search-customers-by-email' | translate\"\n    class=\"search-input\"\n/>\n\n<vdr-data-table\n    [items]=\"members\"\n    [itemsPerPage]=\"membersItemsPerPage$ | async\"\n    [totalItems]=\"totalItems\"\n    [currentPage]=\"membersCurrentPage$ | async\"\n    (pageChange)=\"setContentsPageNumber($event)\"\n    (itemsPerPageChange)=\"setContentsItemsPerPage($event)\"\n    [allSelected]=\"areAllSelected()\"\n    [isRowSelectedFn]=\"('UpdateCustomerGroup' | hasPermission) && isMemberSelected\"\n    (rowSelectChange)=\"toggleSelectMember($event)\"\n    (allSelectChange)=\"toggleSelectAll()\"\n>\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-customer=\"item\">\n        <td class=\"left align-middle\">\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\n        </td>\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['/customer', 'customers', customer.id]\"\n            ></vdr-table-row-action>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\nimport { ZoneMember } from '@vendure/admin-ui/settings';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\n\nexport interface CustomerGroupMemberFetchParams {\n    skip: number;\n    take: number;\n    filterTerm: string;\n}\n\n@Component({\n    selector: 'vdr-customer-group-member-list',\n    templateUrl: './customer-group-member-list.component.html',\n    styleUrls: ['./customer-group-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\n    @Input() members: Array<\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\n    >;\n    @Input() totalItems: number;\n    @Input() route: ActivatedRoute;\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\n\n    membersItemsPerPage$: Observable<number>;\n    membersCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPage')),\n            map((page) => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPerPage')),\n            map((perPage) => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                this.fetchParamsChange.emit({\n                    filterTerm,\n                    skip,\n                    take,\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('membersPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('membersPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\n            relativeTo: this.route,\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map((v) => v.id));\n        }\n    }\n\n    toggleSelectMember(member: ZoneMember) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","<ng-template vdrDialogTitle>\n    {{ 'customer.add-customers-to-group-with-name' | translate: {groupName: group.name} }}\n</ng-template>\n\n<vdr-customer-group-member-list\n    [members]=\"customers$ | async\"\n    [totalItems]=\"customersTotal$ | async\"\n    [route]=\"route\"\n    [selectedMemberIds]=\"selectedCustomerIds\"\n    (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n    (selectionChange)=\"selectedCustomerIds = $event\"\n>\n\n</vdr-customer-group-member-list>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedCustomerIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customers-to-group-with-count' | translate: {count: selectedCustomerIds.length} }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-add-customer-to-group-dialog',\n    templateUrl: './add-customer-to-group-dialog.component.html',\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    group: GetCustomerGroups.Items;\n    route: ActivatedRoute;\n    selectedCustomerIds: string[] = [];\n    customers$: Observable<GetCustomerList.Items[]>;\n    customersTotal$: Observable<number>;\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 10,\n        filterTerm: '',\n    });\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const customerResult$ = this.fetchGroupMembers$.pipe(\n            switchMap(({ skip, take, filterTerm }) => {\n                return this.dataService.customer\n                    .getCustomerList(take, skip, filterTerm)\n                    .mapStream((res) => res.customers);\n            }),\n        );\n\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedCustomerIds);\n    }\n}\n","<ng-template vdrDialogTitle>\n    <span *ngIf=\"addressForm.get('streetLine1')?.value as streetLine1\">{{ streetLine1 }},</span>\n    <span *ngIf=\"addressForm.get('countryCode')?.value as countryCode\"> {{ countryCode }}</span>\n</ng-template>\n\n<vdr-address-form\n    [formGroup]=\"addressForm\"\n    [availableCountries]=\"availableCountries\"\n    [customFields]=\"customFields\"\n></vdr-address-form>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"save()\"\n        [disabled]=\"!addressForm.valid || !addressForm.touched\"\n        class=\"btn btn-primary\"\n    >\n        {{ 'common.update' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-address-detail-dialog',\n    templateUrl: './address-detail-dialog.component.html',\n    styleUrls: ['./address-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\n    addressForm: FormGroup;\n    customFields: CustomFieldConfig;\n    availableCountries: GetAvailableCountries.Items[] = [];\n    resolveWith: (result?: FormGroup) => void;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.addressForm);\n    }\n}\n","<div class=\"card\" *ngIf=\"addressForm.value as address\">\n    <div class=\"card-header\">\n        <div class=\"address-title\">\n            <span class=\"street-line\" *ngIf=\"address.streetLine1\">{{ address.streetLine1 }},</span>\n            {{ address.countryCode }}\n        </div>\n        <div class=\"default-controls\">\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultShipping\">\n                <clr-icon shape=\"truck\"></clr-icon>\n                {{ 'customer.default-shipping-address' | translate }}\n            </vdr-chip>\n            <vdr-chip class=\"is-default p8\" *ngIf=\"isDefaultBilling\">\n                <clr-icon shape=\"credit-card\"></clr-icon>\n                {{ 'customer.default-billing-address' | translate }}\n            </vdr-chip>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text\">\n            <vdr-formatted-address [address]=\"address\"></vdr-formatted-address>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <vdr-entity-info [entity]=\"address\"></vdr-entity-info>\n        <ng-container *ngIf=\"editable\">\n            <button class=\"btn btn-sm btn-link\" (click)=\"editAddress()\">\n                {{ 'common.edit' | translate }}\n            </button>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-sm btn-link\" vdrDropdownTrigger>\n                    {{ 'common.more' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu>\n                    <button\n                        vdrDropdownItem\n                        class=\"button\"\n                        [disabled]=\"isDefaultShipping\"\n                        (click)=\"setAsDefaultShippingAddress()\"\n                    >\n                        {{ 'customer.set-as-default-shipping-address' | translate }}\n                    </button>\n                    <button\n                        vdrDropdownItem\n                        class=\"button\"\n                        [disabled]=\"isDefaultBilling\"\n                        (click)=\"setAsDefaultBillingAddress()\"\n                    >\n                        {{ 'customer.set-as-default-billing-address' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </ng-container>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-address-card',\n    templateUrl: './address-card.component.html',\n    styleUrls: ['./address-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressCardComponent implements OnInit, OnChanges {\n    @Input() addressForm: FormGroup;\n    @Input() customFields: CustomFieldConfig;\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\n    @Input() isDefaultBilling: string;\n    @Input() isDefaultShipping: string;\n    @Input() editable = true;\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\n        // Make the address dialog display automatically if there is no address line\n        // as is the case when adding a new address.\n        if (!streetLine1.value) {\n            this.dataDependenciesPopulated\n                .pipe(\n                    filter(value => value),\n                    take(1),\n                )\n                .subscribe(() => {\n                    this.editAddress();\n                });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.customFields != null && this.availableCountries != null) {\n            this.dataDependenciesPopulated.next(true);\n        }\n    }\n\n    getCountryName(countryCode: string) {\n        if (!this.availableCountries) {\n            return '';\n        }\n        const match = this.availableCountries.find(c => c.code === countryCode);\n        return match ? match.name : '';\n    }\n\n    setAsDefaultBillingAddress() {\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    setAsDefaultShippingAddress() {\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    editAddress() {\n        this.modalService\n            .fromComponent(AddressDetailDialogComponent, {\n                locals: {\n                    addressForm: this.addressForm,\n                    customFields: this.customFields,\n                    availableCountries: this.availableCountries,\n                },\n                size: 'md',\n                closable: true,\n            })\n            .subscribe(() => {\n                this.changeDetector.markForCheck();\n            });\n    }\n}\n","<ng-template vdrDialogTitle>\n    {{ 'customer.add-customer-to-group' | translate }}\n</ng-template>\n\n<ng-select\n    [items]=\"groups$ | async\"\n    appendTo=\"body\"\n    [addTag]=\"false\"\n    [multiple]=\"true\"\n    bindValue=\"id\"\n    [(ngModel)]=\"selectedGroupIds\"\n    [clearable]=\"true\"\n    [searchable]=\"false\"\n>\n    <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n        <span aria-hidden=\"true\" class=\"ng-value-icon left\" (click)=\"clear(item)\"> × </span>\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n    <ng-template ng-option-tmp let-item=\"item\">\n        <vdr-chip [colorFrom]=\"item.id\">{{ item.name }}</vdr-chip>\n    </ng-template>\n</ng-select>\n\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedGroupIds.length\" class=\"btn btn-primary\">\n        {{ 'customer.add-customer-to-groups-with-count' | translate: {count: selectedGroupIds.length} }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-select-customer-group-dialog',\n    templateUrl: './select-customer-group-dialog.component.html',\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    selectedGroupIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((res) => res.customerGroups.items);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedGroupIds);\n    }\n}\n","<vdr-chip *ngIf=\"customer.user?.id\">\n    <ng-container *ngIf=\"customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"verified-user-icon\"></clr-icon>\n        {{ 'customer.verified' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"!customer.user?.verified\">\n        <clr-icon shape=\"check-circle\" class=\"registered-user-icon\"></clr-icon>\n        {{ 'customer.registered' | translate }}\n    </ng-container>\n</vdr-chip>\n<vdr-chip *ngIf=\"!customer.user?.id\">{{ 'customer.guest' | translate }}</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nimport { Customer } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-status-label',\n    templateUrl: './customer-status-label.component.html',\n    styleUrls: ['./customer-status-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerStatusLabelComponent {\n    @Input() customer: Customer.Fragment;\n}\n","<h4>{{ 'customer.customer-history' | translate }}</h4>\n<div class=\"entry-list\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" *vdrIfPermissions=\"'UpdateCustomer'\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToCustomer()\">\n                {{ 'order.add-note' | translate }}\n            </button>\n        </div>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry\n        *ngFor=\"let entry of history\"\n        [displayType]=\"getDisplayType(entry)\"\n        [iconShape]=\"getTimelineIcon(entry)\"\n        [createdAt]=\"entry.createdAt\"\n        [name]=\"getName(entry)\"\n        [featured]=\"isFeatured(entry)\"\n    >\n        <ng-container [ngSwitch]=\"entry.type\">\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REGISTERED\">\n                <div class=\"title\">\n                    {{ 'customer.history-customer-registered' | translate }}\n                </div>\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\n                </ng-container>\n                <ng-template #namedStrategy>\n                    {{\n                    'customer.history-using-external-auth-strategy'\n                        | translate: { strategy: entry.data.strategy }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_VERIFIED\">\n                <div class=\"title\">\n                    {{ 'customer.history-customer-verified' | translate }}\n                </div>\n                <ng-container *ngIf=\"entry.data.strategy === 'native'; else namedStrategy\">\n                    {{ 'customer.history-using-native-auth-strategy' | translate }}\n                </ng-container>\n                <ng-template #namedStrategy>\n                    {{\n                        'customer.history-using-external-auth-strategy'\n                            | translate: { strategy: entry.data.strategy }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_DETAIL_UPDATED\">\n                <div class=\"flex\">\n                    {{ 'customer.history-customer-detail-updated' | translate }}\n                    <vdr-history-entry-detail>\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                    </vdr-history-entry-detail>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDED_TO_GROUP\">\n                {{\n                    'customer.history-customer-added-to-group'\n                        | translate: { groupName: entry.data.groupName }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_REMOVED_FROM_GROUP\">\n                {{\n                    'customer.history-customer-removed-from-group'\n                        | translate: { groupName: entry.data.groupName }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_CREATED\">\n                {{ 'customer.history-customer-address-created' | translate }}\n                <div class=\"flex\">\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_UPDATED\">\n                {{ 'customer.history-customer-address-updated' | translate }}\n                <div class=\"flex\">\n                    <div class=\"address-string\">{{ entry.data.address }}</div>\n                    <vdr-history-entry-detail>\n                        <vdr-object-tree [value]=\"entry.data.input\"></vdr-object-tree>\n                    </vdr-history-entry-detail>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_ADDRESS_DELETED\">\n                {{ 'customer.history-customer-address-deleted' | translate }}\n                <div class=\"address-string\">{{ entry.data.address }}</div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_UPDATED\">\n                {{ 'customer.history-customer-password-updated' | translate }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_REQUESTED\">\n                {{ 'customer.history-customer-password-reset-requested' | translate }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_PASSWORD_RESET_VERIFIED\">\n                {{ 'customer.history-customer-password-reset-verified' | translate }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_REQUESTED\">\n                <div class=\"flex\">\n                    {{ 'customer.history-customer-email-update-requested' | translate }}\n                    <vdr-history-entry-detail>\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                            entry.data.oldEmailAddress\n                        }}</vdr-labeled-data>\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                            entry.data.newEmailAddress\n                        }}</vdr-labeled-data>\n                    </vdr-history-entry-detail>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_EMAIL_UPDATE_VERIFIED\">\n                <div class=\"flex\">\n                    {{ 'customer.history-customer-email-update-verified' | translate }}\n                    <vdr-history-entry-detail>\n                        <vdr-labeled-data [label]=\"'customer.old-email-address' | translate\">{{\n                            entry.data.oldEmailAddress\n                        }}</vdr-labeled-data>\n                        <vdr-labeled-data [label]=\"'customer.new-email-address' | translate\">{{\n                            entry.data.newEmailAddress\n                        }}</vdr-labeled-data>\n                    </vdr-history-entry-detail>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.CUSTOMER_NOTE\">\n                <div class=\"flex\">\n                    <div class=\"note-text\">\n                        {{ entry.data.note }}\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <vdr-dropdown>\n                        <button class=\"icon-button\" vdrDropdownTrigger>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"updateNote.emit(entry)\"\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </button>\n                            <div class=\"dropdown-divider\"></div>\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"deleteNote.emit(entry)\"\n                                [disabled]=\"!('UpdateCustomer' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </ng-container>\n        </ng-container>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry [isLast]=\"true\"></vdr-timeline-entry>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    Customer,\n    GetCustomerHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-history',\n    templateUrl: './customer-history.component.html',\n    styleUrls: ['./customer-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerHistoryComponent {\n    @Input() customer: Customer.Fragment;\n    @Input() history: GetCustomerHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\n                return 'success';\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'muted';\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'error';\n            default:\n                return 'default';\n        }\n    }\n\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'user';\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return ['assign-user', 'is-solid'];\n            case HistoryEntryType.CUSTOMER_NOTE:\n                return 'note';\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'users';\n        }\n    }\n\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getName(entry: GetCustomerHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            return `${this.customer.firstName} ${this.customer.lastName}`;\n        }\n    }\n\n    addNoteToCustomer() {\n        this.addNote.emit({ note: this.note });\n        this.note = '';\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-customer-status-label [customer]=\"entity$ | async\"></vdr-customer-status-label>\n            <div class=\"last-login\" *ngIf=\"(entity$ | async)?.user?.lastLogin as lastLogin\" [title]=\"lastLogin | localeDate:'medium'\">\n                {{ 'customer.last-login' | translate }}: {{ lastLogin | timeAgo }}\n            </div>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"customer-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"isNew$ | async; else updateButton\"\n            (click)=\"create()\"\n            [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n        >\n            {{ 'common.create' | translate }}\n        </button>\n        <ng-template #updateButton>\n            <button\n                *vdrIfPermissions=\"'UpdateCustomer'\"\n                class=\"btn btn-primary\"\n                (click)=\"save()\"\n                [disabled]=\"!(addressDefaultsUpdated || (detailForm.valid && detailForm.dirty))\"\n            >\n                {{ 'common.update' | translate }}\n            </button>\n        </ng-template>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<form class=\"form\" [formGroup]=\"detailForm.get('customer')\">\n    <vdr-form-field [label]=\"'customer.title' | translate\" for=\"title\" [readOnlyToggle]=\"!(isNew$ | async)\">\n        <input id=\"title\" type=\"text\" formControlName=\"title\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'customer.first-name' | translate\"\n        for=\"firstName\"\n        [readOnlyToggle]=\"!(isNew$ | async)\"\n    >\n        <input id=\"firstName\" type=\"text\" formControlName=\"firstName\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'customer.last-name' | translate\"\n        for=\"lastName\"\n        [readOnlyToggle]=\"!(isNew$ | async)\"\n    >\n        <input id=\"lastName\" type=\"text\" formControlName=\"lastName\" />\n    </vdr-form-field>\n    <vdr-form-field\n        [label]=\"'customer.email-address' | translate\"\n        for=\"emailAddress\"\n        [readOnlyToggle]=\"!(isNew$ | async)\"\n    >\n        <input id=\"emailAddress\" type=\"text\" formControlName=\"emailAddress\" />\n    </vdr-form-field>\n    <vdr-form-field\n           [label]=\"'customer.phone-number' | translate\"\n           for=\"phoneNumber\"\n           [readOnlyToggle]=\"!(isNew$ | async)\"\n       >\n           <input id=\"phoneNumber\" type=\"text\" formControlName=\"phoneNumber\" />\n       </vdr-form-field>\n    <vdr-form-field [label]=\"'customer.password' | translate\" for=\"password\" *ngIf=\"isNew$ | async\">\n        <input id=\"password\" type=\"password\" formControlName=\"password\" />\n    </vdr-form-field>\n\n    <section formGroupName=\"customFields\" *ngIf=\"customFields.length\">\n        <label>{{ 'common.custom-fields' | translate }}</label>\n        <ng-container *ngFor=\"let customField of customFields\">\n            <vdr-custom-field-control\n                *ngIf=\"customFieldIsSet(customField.name)\"\n                entityName=\"Customer\"\n                [customFieldsFormGroup]=\"detailForm.get(['customer', 'customFields'])\"\n                [customField]=\"customField\"\n            ></vdr-custom-field-control>\n        </ng-container>\n    </section>\n</form>\n\n<div class=\"groups\" *ngIf=\"(entity$ | async)?.groups as groups\">\n    <label class=\"clr-control-label\">{{ 'customer.customer-groups' | translate }}</label>\n    <ng-container *ngIf=\"groups.length; else noGroups\">\n        <vdr-chip\n            *ngFor=\"let group of groups\"\n            [colorFrom]=\"group.id\"\n            icon=\"times\"\n            (iconClick)=\"removeFromGroup(group)\"\n            >{{ group.name }}</vdr-chip\n        >\n    </ng-container>\n    <ng-template #noGroups>\n        {{ 'customer.not-a-member-of-any-groups' | translate }}\n    </ng-template>\n    <div>\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"addToGroup()\" *vdrIfPermissions=\"'UpdateCustomerGroup'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'customer.add-customer-to-group' | translate }}\n        </button>\n    </div>\n</div>\n\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\n    <div class=\"clr-col-md-4\">\n        <h3>{{ 'customer.addresses' | translate }}</h3>\n        <vdr-address-card\n            *ngFor=\"let addressForm of getAddressFormControls()\"\n            [availableCountries]=\"availableCountries$ | async\"\n            [isDefaultBilling]=\"defaultBillingAddressId === addressForm.value.id\"\n            [isDefaultShipping]=\"defaultShippingAddressId === addressForm.value.id\"\n            [addressForm]=\"addressForm\"\n            [customFields]=\"addressCustomFields\"\n            [editable]=\"['UpdateCustomer'] | hasPermission\"\n            (setAsDefaultBilling)=\"setDefaultBillingAddressId($event)\"\n            (setAsDefaultShipping)=\"setDefaultShippingAddressId($event)\"\n        ></vdr-address-card>\n        <button class=\"btn btn-secondary\" (click)=\"addAddress()\" *vdrIfPermissions=\"'UpdateCustomer'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'customer.create-new-address' | translate }}\n        </button>\n    </div>\n    <div class=\"clr-col-md-8\">\n        <h3>{{ 'customer.orders' | translate }}</h3>\n        <vdr-data-table\n            [items]=\"orders$ | async\"\n            [itemsPerPage]=\"ordersPerPage\"\n            [totalItems]=\"ordersCount$ | async\"\n            [currentPage]=\"currentOrdersPage\"\n            [emptyStateLabel]=\"'customer.no-orders-placed' | translate\"\n            (itemsPerPageChange)=\"setOrderItemsPerPage($event)\"\n            (pageChange)=\"setOrderCurrentPage($event)\"\n        >\n            <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n            <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\n            <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\n            <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\n            <vdr-dt-column></vdr-dt-column>\n            <ng-template let-order=\"item\">\n                <td class=\"left\">{{ order.code }}</td>\n                <td class=\"left\">{{ order.state }}</td>\n                <td class=\"left\">{{ order.total | localeCurrency: order.currencyCode }}</td>\n                <td class=\"left\">{{ order.updatedAt | localeDate: 'medium' }}</td>\n                <td class=\"right\">\n                    <vdr-table-row-action\n                        iconShape=\"shopping-cart\"\n                        [label]=\"'common.open' | translate\"\n                        [linkTo]=\"['/orders/', order.id]\"\n                    ></vdr-table-row-action>\n                </td>\n            </ng-template>\n        </vdr-data-table>\n    </div>\n</div>\n<div class=\"clr-row\" *ngIf=\"!(isNew$ | async)\">\n    <div class=\"clr-col-md-6\">\n        <vdr-customer-history\n            [customer]=\"entity$ | async\"\n            [history]=\"history$ | async\"\n            (addNote)=\"addNoteToCustomer($event)\"\n            (updateNote)=\"updateNote($event)\"\n            (deleteNote)=\"deleteNote($event)\"\n        ></vdr-customer-history>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateAddressInput,\n    CreateCustomerAddress,\n    CreateCustomerAddressMutation,\n    CreateCustomerInput,\n    Customer,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    GetAvailableCountries,\n    GetCustomer,\n    GetCustomerHistory,\n    GetCustomerQuery,\n    HistoryEntry,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n    SortOrder,\n    UpdateCustomer,\n    UpdateCustomerAddress,\n    UpdateCustomerAddressMutation,\n    UpdateCustomerInput,\n    UpdateCustomerMutation,\n} from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\nimport {\n    concatMap,\n    filter,\n    map,\n    merge,\n    mergeMap,\n    shareReplay,\n    startWith,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\n\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\n\n@Component({\n    selector: 'vdr-customer-detail',\n    templateUrl: './customer-detail.component.html',\n    styleUrls: ['./customer-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerDetailComponent extends BaseDetailComponent<CustomerWithOrders>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    addressCustomFields: CustomFieldConfig[];\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    orders$: Observable<GetCustomer.Items[]>;\n    ordersCount$: Observable<number>;\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\n    fetchHistory = new Subject<void>();\n    defaultShippingAddressId: string;\n    defaultBillingAddressId: string;\n    addressDefaultsUpdated = false;\n    ordersPerPage = 10;\n    currentOrdersPage = 1;\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        private formBuilder: FormBuilder,\n        protected dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n\n        this.customFields = this.getCustomFieldConfig('Customer');\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.detailForm = this.formBuilder.group({\n            customer: this.formBuilder.group({\n                title: '',\n                firstName: ['', Validators.required],\n                lastName: ['', Validators.required],\n                phoneNumber: '',\n                emailAddress: ['', [Validators.required, Validators.email]],\n                password: '',\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            addresses: new FormArray([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.customer\n                    .getCustomerHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.customer?.history.items);\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n        this.orderListUpdates$.complete();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customer', 'customFields', name]);\n    }\n\n    getAddressFormControls(): FormControl[] {\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\n        return formArray.controls as FormControl[];\n    }\n\n    setDefaultBillingAddressId(id: string) {\n        this.defaultBillingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    setDefaultShippingAddressId(id: string) {\n        this.defaultShippingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    addAddress() {\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\n        const newAddress = this.formBuilder.group({\n            fullName: '',\n            company: '',\n            streetLine1: ['', Validators.required],\n            streetLine2: '',\n            city: '',\n            province: '',\n            postalCode: '',\n            countryCode: ['', Validators.required],\n            phoneNumber: '',\n            defaultShippingAddress: false,\n            defaultBillingAddress: false,\n        });\n        if (this.addressCustomFields.length) {\n            const customFieldsGroup = this.formBuilder.group({});\n            for (const fieldDef of this.addressCustomFields) {\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\n            }\n            newAddress.addControl('customFields', customFieldsGroup);\n        }\n        addressFormArray.push(newAddress);\n    }\n\n    setOrderItemsPerPage(itemsPerPage: number) {\n        this.ordersPerPage = +itemsPerPage;\n        this.fetchOrdersList();\n    }\n\n    setOrderCurrentPage(page: number) {\n        this.currentOrdersPage = +page;\n        this.fetchOrdersList();\n    }\n\n    create() {\n        const customerForm = this.detailForm.get('customer');\n        if (!customerForm) {\n            return;\n        }\n        const formValue = customerForm.value;\n        const customFields = customerForm.get('customFields')?.value;\n        const customer: CreateCustomerInput = {\n            title: formValue.title,\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            phoneNumber: formValue.phoneNumber,\n            customFields,\n        };\n        this.dataService.customer\n            .createCustomer(customer, formValue.password)\n            .subscribe(({ createCustomer }) => {\n                switch (createCustomer.__typename) {\n                    case 'Customer':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Customer',\n                        });\n                        if (createCustomer.emailAddress && !formValue.password) {\n                            this.notificationService.notify({\n                                message: _('customer.email-verification-sent'),\n                                translationVars: { emailAddress: formValue.emailAddress },\n                                type: 'info',\n                                duration: 10000,\n                            });\n                        }\n                        this.detailForm.markAsPristine();\n                        this.addressDefaultsUpdated = false;\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\n                        break;\n                    case 'EmailAddressConflictError':\n                        this.notificationService.error(createCustomer.message);\n                }\n            });\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const saveOperations: Array<Observable<\n                        | UpdateCustomer.UpdateCustomer\n                        | CreateCustomerAddress.CreateCustomerAddress\n                        | UpdateCustomerAddress.UpdateCustomerAddress\n                    >> = [];\n                    const customerForm = this.detailForm.get('customer');\n                    if (customerForm && customerForm.dirty) {\n                        const formValue = customerForm.value;\n                        const customFields = customerForm.get('customFields')?.value;\n                        const customer: UpdateCustomerInput = {\n                            id,\n                            title: formValue.title,\n                            emailAddress: formValue.emailAddress,\n                            firstName: formValue.firstName,\n                            lastName: formValue.lastName,\n                            phoneNumber: formValue.phoneNumber,\n                            customFields,\n                        };\n                        saveOperations.push(\n                            this.dataService.customer\n                                .updateCustomer(customer)\n                                .pipe(map(res => res.updateCustomer)),\n                        );\n                    }\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\n                        for (const addressControl of addressFormArray.controls) {\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\n                                const address = addressControl.value;\n                                const input: CreateAddressInput = {\n                                    fullName: address.fullName,\n                                    company: address.company,\n                                    streetLine1: address.streetLine1,\n                                    streetLine2: address.streetLine2,\n                                    city: address.city,\n                                    province: address.province,\n                                    postalCode: address.postalCode,\n                                    countryCode: address.countryCode,\n                                    phoneNumber: address.phoneNumber,\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\n                                    customFields: address.customFields,\n                                };\n                                if (!address.id) {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .createCustomerAddress(id, input)\n                                            .pipe(map(res => res.createCustomerAddress)),\n                                    );\n                                } else {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .updateCustomerAddress({\n                                                ...input,\n                                                id: address.id,\n                                            })\n                                            .pipe(map(res => res.updateCustomerAddress)),\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    return forkJoin(saveOperations);\n                }),\n            )\n            .subscribe(\n                data => {\n                    for (const result of data) {\n                        switch (result.__typename) {\n                            case 'Customer':\n                            case 'Address':\n                                this.notificationService.success(_('common.notify-update-success'), {\n                                    entity: 'Customer',\n                                });\n                                this.detailForm.markAsPristine();\n                                this.addressDefaultsUpdated = false;\n                                this.changeDetector.markForCheck();\n                                this.fetchHistory.next();\n                                break;\n                            case 'EmailAddressConflictError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n\n    addToGroup() {\n        this.modalService\n            .fromComponent(SelectCustomerGroupDialogComponent, {\n                size: 'md',\n            })\n            .pipe(\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\n            )\n            .subscribe({\n                next: res => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: 1,\n                        groupName: res.addCustomersToGroup.name,\n                    });\n                },\n                complete: () => {\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\n                    this.fetchHistory.next();\n                },\n            });\n    }\n\n    removeFromGroup(group: GetCustomer.Groups) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-remove-customer-from-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\n                        : EMPTY,\n                ),\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\n            )\n            .subscribe(result => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: 1,\n                    groupName: group.name,\n                });\n                this.fetchHistory.next();\n            });\n    }\n\n    addNoteToCustomer({ note }: { note: string }) {\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\n            this.fetchHistory.next();\n            this.notificationService.success(_('common.notify-create-success'), {\n                entity: 'Note',\n            });\n        });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: false,\n                    note: entry.data.note,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.customer.updateCustomerNote({\n                            noteId: entry.id,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    protected setFormValues(entity: Customer.Fragment): void {\n        const customerGroup = this.detailForm.get('customer');\n        if (customerGroup) {\n            customerGroup.patchValue({\n                title: entity.title,\n                firstName: entity.firstName,\n                lastName: entity.lastName,\n                phoneNumber: entity.phoneNumber,\n                emailAddress: entity.emailAddress,\n            });\n        }\n\n        if (entity.addresses) {\n            const addressesArray = new FormArray([]);\n            for (const address of entity.addresses) {\n                const { customFields, ...rest } = address as any;\n                const addressGroup = this.formBuilder.group({\n                    ...rest,\n                    countryCode: address.country.code,\n                });\n                addressesArray.push(addressGroup);\n                if (address.defaultShippingAddress) {\n                    this.defaultShippingAddressId = address.id;\n                }\n                if (address.defaultBillingAddress) {\n                    this.defaultBillingAddressId = address.id;\n                }\n\n                if (this.addressCustomFields.length) {\n                    const customFieldsGroup = this.formBuilder.group({});\n                    for (const fieldDef of this.addressCustomFields) {\n                        const key = fieldDef.name;\n                        const value = (address as any).customFields?.[key];\n                        const control = new FormControl(value);\n                        customFieldsGroup.addControl(key, control);\n                    }\n                    addressGroup.addControl('customFields', customFieldsGroup);\n                }\n            }\n            this.detailForm.setControl('addresses', addressesArray);\n        }\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customer', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields?.[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    /**\n     * Refetch the customer with the current order list settings.\n     */\n    private fetchOrdersList() {\n        this.dataService.customer\n            .getCustomer(this.id, {\n                take: this.ordersPerPage,\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\n            })\n            .single$.pipe(\n                map(data => data.customer),\n                filter(notNullOrUndefined),\n            )\n            .subscribe(result => this.orderListUpdates$.next(result));\n    }\n}\n","import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n//# sourceMappingURL=merge.js.map","<ng-template vdrDialogTitle>\n    <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n    <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n</ng-template>\n\n<vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\n    <input id=\"name\" type=\"text\" [(ngModel)]=\"group.name\" [readonly]=\"!(['CreateCustomerGroup', 'UpdateCustomerGroup'] | hasPermission)\" />\n</vdr-form-field>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"save()\" [disabled]=\"!group.name\" class=\"btn btn-primary\">\n        <span *ngIf=\"group.id\">{{ 'customer.update-customer-group' | translate }}</span>\n        <span *ngIf=\"!group.id\">{{ 'customer.create-customer-group' | translate }}</span>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-group-detail-dialog',\n    templateUrl: './customer-group-detail-dialog.component.html',\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupDetailDialogComponent implements Dialog<string> {\n    group: { id?: string; name: string };\n    resolveWith: (result?: string) => void;\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.group.name);\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left> </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"customer-group-list\"></vdr-action-bar-items>\n        <button class=\"btn btn-primary\" *vdrIfPermissions=\"'CreateCustomerGroup'\" (click)=\"create()\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'customer.create-new-customer-group' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n<div class=\"group-wrapper\">\n    <table class=\"table group-list\" [class.expanded]=\"activeGroup$ | async\" *ngIf=\"!(listIsEmpty$ | async); else emptyPlaceholder\">\n        <tbody>\n            <tr *ngFor=\"let group of groups$ | async\" [class.active]=\"group.id === (activeGroup$ | async)?.id\">\n                <td class=\"left align-middle\"><vdr-entity-info [entity]=\"group\"></vdr-entity-info></td>\n                <td class=\"left align-middle\"><vdr-chip [colorFrom]=\"group.id\">{{ group.name }}</vdr-chip></td>\n                <td class=\"text-right align-middle\">\n                    <a\n                        class=\"btn btn-link btn-sm\"\n                        [routerLink]=\"['./', { contents: group.id }]\"\n                        queryParamsHandling=\"preserve\"\n                    >\n                        <clr-icon shape=\"view-list\"></clr-icon>\n                        {{ 'customer.view-group-members' | translate }}\n                    </a>\n                </td>\n                <td class=\"align-middle\">\n                    <button class=\"btn btn-link btn-sm\" (click)=\"update(group)\">\n                        <clr-icon shape=\"edit\"></clr-icon>\n                        {{ 'common.edit' | translate }}\n                    </button>\n                </td>\n                <td class=\"align-middle\">\n                    <vdr-dropdown>\n                        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                            {{ 'common.actions' | translate }}\n                            <clr-icon shape=\"caret down\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"delete(group.id)\"\n                                [disabled]=\"!('DeleteCustomerGroup' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <ng-template #emptyPlaceholder>\n        <vdr-empty-placeholder></vdr-empty-placeholder>\n    </ng-template>\n    <div class=\"group-members\" [class.expanded]=\"activeGroup$ | async\">\n        <ng-container *ngIf=\"activeGroup$ | async as activeGroup\">\n            <div class=\"flex\">\n                <div class=\"header-title-row\">\n                    {{ activeGroup.name }} ({{ membersTotal$ | async }})\n                </div>\n                <div class=\"flex-spacer\"></div>\n                <button type=\"button\" class=\"close-button\" (click)=\"closeMembers()\">\n                    <clr-icon shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <div class=\"controls\">\n                <vdr-dropdown>\n                    <button\n                        type=\"button\"\n                        class=\"btn btn-secondary btn-sm\"\n                        vdrDropdownTrigger\n                        [disabled]=\"selectedCustomerIds.length === 0\"\n                    >\n                        {{ 'common.with-selected' | translate }}\n                        <clr-icon shape=\"caret down\"></clr-icon>\n                    </button>\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                        <button\n                            type=\"button\"\n                            class=\"delete-button\"\n                            (click)=\"removeFromGroup(activeGroup, selectedCustomerIds)\"\n                            vdrDropdownItem\n                            [disabled]=\"!('UpdateCustomerGroup' | hasPermission)\"\n                        >\n                            <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                            {{ 'customer.remove-from-group' | translate }}\n                        </button>\n                    </vdr-dropdown-menu>\n                </vdr-dropdown>\n                <button class=\"btn btn-secondary btn-sm\" (click)=\"addToGroup(activeGroup)\">\n                    {{ 'customer.add-customers-to-group' | translate: { groupName: activeGroup.name } }}\n                </button>\n            </div>\n            <vdr-customer-group-member-list\n                [members]=\"members$ | async\"\n                [route]=\"route\"\n                [totalItems]=\"membersTotal$ | async\"\n                [selectedMemberIds]=\"selectedCustomerIds\"\n                (selectionChange)=\"selectedCustomerIds = $event\"\n                (fetchParamsChange)=\"fetchGroupMembers$.next($event)\"\n            ></vdr-customer-group-member-list>\n        </ng-container>\n    </div>\n</div>\n\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCustomerGroups,\n    GetCustomerGroupWithCustomers,\n    GetZones,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-customer-group-list',\n    templateUrl: './customer-group-list.component.html',\n    styleUrls: ['./customer-group-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupListComponent implements OnInit {\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    listIsEmpty$: Observable<boolean>;\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\n    membersTotal$: Observable<number>;\n    selectedCustomerIds: string[] = [];\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 0,\n        filterTerm: '',\n    });\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        public route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit(): void {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((data) => data.customerGroups.items);\n        const activeGroupId$ = this.route.paramMap.pipe(\n            map((pm) => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedCustomerIds = [])),\n        );\n        this.listIsEmpty$ = this.groups$.pipe(map((groups) => groups.length === 0));\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\n            map(([groups, activeGroupId]) => {\n                if (activeGroupId) {\n                    return groups.find((g) => g.id === activeGroupId);\n                }\n            }),\n        );\n        const membersResult$ = combineLatest(\n            this.activeGroup$,\n            this.fetchGroupMembers$,\n            this.refreshActiveGroupMembers$,\n        ).pipe(\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\n                if (activeGroup) {\n                    return this.dataService.customer\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\n                            skip,\n                            take,\n                            filter: {\n                                emailAddress: {\n                                    contains: filterTerm,\n                                },\n                            },\n                        })\n                        .mapStream((res) => res.customerGroup?.customers);\n                } else {\n                    return of(undefined);\n                }\n            }),\n        );\n\n        this.members$ = membersResult$.pipe(map((res) => res?.items ?? []));\n        this.membersTotal$ = membersResult$.pipe(map((res) => res?.totalItems ?? 0));\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.createCustomerGroup({ name, customerIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    delete(groupId: string) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-delete-customer-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((response) =>\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\n                ),\n\n                switchMap((result) => {\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.customer\n                            .getCustomerGroupList()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\n                    }\n                }),\n            )\n            .subscribe(\n                (result) => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'CustomerGroup',\n                        });\n                    }\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    update(group: GetCustomerGroups.Items) {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.updateCustomerGroup({ id: group.id, name }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\n        this.modalService\n            .fromComponent(AddCustomerToGroupDialogComponent, {\n                locals: {\n                    group,\n                    route: this.route,\n                },\n                size: 'md',\n                verticalAlign: 'top',\n            })\n            .pipe(\n                switchMap((customerIds) =>\n                    customerIds\n                        ? this.dataService.customer\n                              .addCustomersToGroup(group.id, customerIds)\n                              .pipe(mapTo(customerIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: (result) => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: result.length,\n                        groupName: group.name,\n                    });\n                    this.refreshActiveGroupMembers$.next();\n                    this.selectedCustomerIds = [];\n                },\n            });\n    }\n\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: customerIds.length,\n                    groupName: group.name,\n                });\n                this.refreshActiveGroupMembers$.next();\n                this.selectedCustomerIds = [];\n            },\n        });\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <input\n            type=\"text\"\n            name=\"emailSearchTerm\"\n            [formControl]=\"emailSearchTerm\"\n            [placeholder]=\"'customer.search-customers-by-email' | translate\"\n            class=\"search-input ml3\"\n        />\n        <input\n            type=\"text\"\n            name=\"lastNameSearchTerm\"\n            [formControl]=\"lastNameSearchTerm\"\n            [placeholder]=\"'customer.search-customers-by-last-name' | translate\"\n            class=\"search-input ml3\"\n        />\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"customer-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateCustomer'\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'customer.create-new-customer' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'customer.email-address' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'customer.customer-type' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-customer=\"item\">\n        <td class=\"left align-middle\">\n            {{ customer.title }} {{ customer.firstName }} {{ customer.lastName }}\n        </td>\n        <td class=\"left align-middle\">{{ customer.emailAddress }}</td>\n        <td class=\"left align-middle\">\n            <vdr-customer-status-label [customer]=\"customer\"></vdr-customer-status-label>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', customer.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td>\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteCustomer(customer)\"\n                        [disabled]=\"!('DeleteCustomer' | hasPermission)\"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetCustomerList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\nimport { EMPTY, merge } from 'rxjs';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.scss'],\n})\nexport class CustomerListComponent\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\n    implements OnInit {\n    emailSearchTerm = new FormControl('');\n    lastNameSearchTerm = new FormControl('');\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\n            data => data.customers,\n            (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        emailAddress: {\n                            contains: this.emailSearchTerm.value,\n                        },\n                        lastName: {\n                            contains: this.lastNameSearchTerm.value,\n                        },\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            }),\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        merge(this.emailSearchTerm.valueChanges, this.lastNameSearchTerm.valueChanges)\n            .pipe(\n                filter(value => 2 < value.length || value.length === 0),\n                debounceTime(250),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n    }\n\n    deleteCustomer(customer: GetCustomerList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-customer'),\n                body: `${customer.firstName} ${customer.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Customer',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Customer } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Customer',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                title: '',\n                firstName: '',\n                lastName: '',\n                emailAddress: '',\n                phoneNumber: null,\n                addresses: null,\n                user: null,\n            },\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CanDeactivateDetailGuard,\n    createResolveData,\n    Customer,\n    detailBreadcrumb,\n} from '@vendure/admin-ui/core';\n\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerResolver } from './providers/routing/customer-resolver';\n\nexport const customerRoutes: Route[] = [\n    {\n        path: 'customers',\n        component: CustomerListComponent,\n        pathMatch: '',\n        data: {\n            breadcrumb: _('breadcrumb.customers'),\n        },\n    },\n    {\n        path: 'customers/:id',\n        component: CustomerDetailComponent,\n        resolve: createResolveData(CustomerResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: customerBreadcrumb,\n        },\n    },\n    {\n        path: 'groups',\n        component: CustomerGroupListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.customer-groups'),\n        },\n    },\n];\n\nexport function customerBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Customer.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.customers',\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\n        route: 'customers',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { AddressCardComponent } from './components/address-card/address-card.component';\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\nimport { customerRoutes } from './customer.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\n    declarations: [\n        CustomerListComponent,\n        CustomerDetailComponent,\n        CustomerStatusLabelComponent,\n        AddressCardComponent,\n        CustomerGroupListComponent,\n        CustomerGroupDetailDialogComponent,\n        AddCustomerToGroupDialogComponent,\n        CustomerGroupMemberListComponent,\n        SelectCustomerGroupDialogComponent,\n        CustomerHistoryComponent,\n        AddressDetailDialogComponent,\n    ],\n    exports: [AddressCardComponent],\n})\nexport class CustomerModule {}\n"]}