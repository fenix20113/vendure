{"version":3,"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"names":["dataService","form","method","required","transactionId","this","paymentMethods$","settings","getPaymentMethods","mapSingle","data","paymentMethods","items","formValue","value","resolveWith","i18nService","lineQuantities","reasons","map","r","translate","Object","values","reduce","sum","n","order","lines","result","line","id","orderId","getLineInputs","reason","active","entries","orderLineId","quantity","filter","l","changeDetector","fulfillmentHandlerControl","fulfillmentQuantities","getGlobalSettings","single$","subscribe","globalSettings","fulfillCount","getFulfillableCount","trackInventory","max","markForCheck","shippingMethod","getShippingMethodOperations","fulfillmentHandlers","handlers","fulfillmentHandlerDef","find","h","code","shippingLines","fulfillmentHandlerCode","fulfillmentHandler","patchValue","globalTrackInventory","stockOnHand","productVariant","effectiveTracInventory","INHERIT","TRUE","unfulfilledCount","getUnfulfilledCount","Math","min","fulfilled","item","fulfillment","totalCount","total","valid","handler","FulfillmentStateLabelComponent","state","SimpleItemListComponent","customFields","changes","getCustomFields","fulfillments","f","fulfillmentId","itemMap","Map","fulfillmentItemIds","orderItems","i","includes","count","get","name","set","Array","from","key","val","isArray","isObject","toString","customField","transitionState","nextStates","namedStateOrDefault","targetState","s","suggested","nextSuggestedState","LineFulfillmentComponent","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","length","getFulfillments","lineQuantity","counts","undefined","all","LineRefundsComponent","refunds","payments","payment","refundId","cancelled","refund","ModificationDetailComponent","addedItems","removedItems","added","removed","getModifiedLines","surcharges","m","_item","modification","getOrderLineAndItem","itemId","formBuilder","customFieldsConfig","customFieldValues","updateClick","editable","customFieldForm","group","field","addControl","control","emit","markAsPristine","RetryWhenOperator","notifier","source","subscriber","destination","super","err","isStopped","errors","retries","retriesSubscription","Subject","e","error","innerSubscribe","_unsubscribeAndRecycle","next","unsubscribe","_unsubscribe","OrderStateSelectDialogComponent","message","selectedState","modalService","notificationService","getPreModifyingState","pipe","switchMap","manualTransitionOptions","cancellable","retry","transitionToStateOrThrow","catchError","manuallyTransitionToState","options","fromComponent","locals","closable","size","Error","delay","lift","getOrderHistory","type","eq","ORDER_STATE_TRANSITION","sort","createdAt","DESC","history","to","transitionToState","transitionOrderToState","__typename","transitionError","NODE_HEIGHT","elementRef","active$","BehaviorSubject","activeTarget$","isCancellable","cancelledState","node","origin","nativeElement","getBoundingClientRect","nodeHeight","querySelector","height","x","y","index","pos","getPos","asObservable","tap","direction","startPos","endPos","dX","abs","dY","sqrt","transform","setActiveState$","nodes","edges","initialState","activeState$","debounceTime","populateNodes","setTimeout","populateEdges","stateName","nodeComponents","stateNodeMap","states","stateNode","targets","target","targetNode","push","nodeCmp","getNodeFor","toCmp","OrderProcessGraphDialogComponent","serverConfigService","getOrderProcessStates","refundShipping","adjustment","lineRef","refundCount","proratedUnitPriceWithTax","shippingWithTax","settledPayments","amount","summate","cancel","p","selectedPayment","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","refundLines","getOrderLineInput","cancelLines","shipping","paymentId","filterFn","SettleRefundDialogComponent","orderLineCustomFieldsVisible","orderLineCustomFields","discounts","a","PROMOTION","config","promotion","adjustmentSource","split","promotionAdjustment","promotions","couponCode","PaymentDetailComponent","updateNote","deleteNote","addNote","note","noteIsPrivate","expanded","entry","ORDER_FULFILLMENT_TRANSITION","ORDER_PAYMENT_TRANSITION","ORDER_CANCELLATION","ORDER_REFUND_TRANSITION","ORDER_NOTE","ORDER_MODIFIED","ORDER_FULFILLMENT","cancelledItemIds","orderItemIds","modifications","administrator","firstName","lastName","customer","isPublic","addNoteToOrder","PaymentStateLabelComponent","RefundStateLabelComponent","settleRefund","settlePayment","transitionPaymentState","keys","metadata","router","route","orderTransitionService","detailForm","fetchHistory","defaultStates","init","entity$","navigate","relativeTo","getCustomFieldConfig","history$","startWith","mapStream","nextStates$","destroy","activeState","success","customFieldsValue","updateOrderCustomFields","entity","orderAddress","getOrder","transitionPaymentToState","every","hasUnsettledModifications","outstandingPaymentAmount","isSettled","validPayments","pick","amountCovered","totalWithTax","outstandingAmount","currencyCode","addManualPaymentToOrder","transitionToPreModifyingState","refetchOrder","input","createFulfillment","of","mapTo","addFulfillmentToOrder","transitionFulfillmentToState","isRefundable","orderHasSettledPayments","refundOrder","cancelOrder","event","displayPrivacyControls","updateOrderNote","noteId","isPrivate","dialog","title","body","buttons","label","returnValue","res","deleteOrderNote","operations","merge","OrderEditResultType","Refund","Payment","PriceUnchanged","Cancel","OrderEditsPreviewDialogComponent","originalTotalWithTax","refundNote","modifyOrderInput","priceDifference","refundPaymentId","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","recalculateShipping","addedVariants","getSinglePriceValue","price","row","variantInfo","productVariantId","priceWithTax","notNullOrUndefined","addressCustomFields","snapshot","paramMap","takeUntil","destroy$","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","fullName","shippingAddress","company","streetLine1","streetLine2","city","province","postalCode","countryCode","phoneNumber","billingAddressForm","billingAddress","orderLineCustomFieldsFormArray","formGroup","valueChanges","modifyRow","addItemCustomFieldsFormArray","addItemCustomFieldsForm","availableCountries$","getAvailableCountries","countries","shareReplay","take","previousState","dirty","splice","indexOf","isMatchingAddItemRow","reset","addItemSelectedVariant","JSON","stringify","removeAt","surcharge","round","modifyOrder","assertNever","wetRunInput","nextState","languageCode","localStorageService","searchOrderCodeControl","searchLastNameControl","orderStates","filterPresets","setQueryFn","skip","getOrders","refetchOnChannelChange","orders","createQueryOptions","queryParamMap","lastFilters","setQueryParam","replaceUrl","ngOnInit","activePreset$","qpm","distinctUntilChanged","searchTerms$","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","presetName","lastCustomFilters","filters","page","customFilters","orderCodeSearchTerm","customerNameSearchTerm","activeFilterPreset","filterConfig","in","queryParams","orderPlacedAt","between","start","end","after","before","customerLastName","contains","updatedAt","shippingLine","join","applyCustomFilters","setPageNumber","setItemsPerPage","orderRoutes","path","component","breadcrumb","resolve","canDeactivate","orderBreadcrumb","modifyingOrderBreadcrumb","params","breadcrumbKey","getName","breadcrumbs","modifiedBreadcrumbs","slice","link","concat","OrderModule","forChild"],"mappings":"6rEAA4B,Q,0BAAA,6C,uCAiBxB,mBAAkC,yDAAmB,Q,oBAAiC,OACtF,mBAAsB,yDAClB,Q,6CACJ,O,uBAHqD,wCACY,yDAC7D,wGCFD,MAAM,EAWT,YAAoBA,GAAA,KAAAA,cALpB,KAAAC,KAAO,IAAI,IAAU,CACjBC,OAAQ,IAAI,IAAY,GAAI,IAAWC,UACvCC,cAAe,IAAI,IAAY,GAAI,IAAWD,YAKlD,WACIE,KAAKC,gBAAkBD,KAAKL,YAAYO,SACnCC,kBAAkB,KAClBC,UAAUC,GAAQA,EAAKC,eAAeC,OAG/C,SACI,MAAMC,EAAYR,KAAKJ,KAAKa,MAC5BT,KAAKU,YAAY,CACbb,OAAQW,EAAUX,OAClBE,cAAeS,EAAUT,gBAIjC,SACIC,KAAKU,e,sCA5BA,GAA+B,Y,uBAA/B,EAA+B,6eDjB5C,8BACA,iBACI,2B,oBACI,sB,gBAQJ,OACA,2B,oBACI,kBACJ,OACJ,OACA,gC,MAfM,iCACc,uDAER,kDAAiC,aAQzB,yD,wNEZQ,Q,0BAAA,qC,uCA8BR,mBAEI,yGAFJ,O,0CAEI,uCAAqC,mB,wBAKf,Q,8BAAA,kB,yBAtBlC,eAKI,gBACI,iB,uBACJ,OACA,gBAA8B,QAA8B,OAC5D,gBAA6B,QAA6B,OAC1D,gBAAkC,QAAmB,OACrD,iBACI,S,0BACJ,OACA,iBACI,0BAOA,0CACJ,OACJ,Q,6CArBI,oCAGS,0DAEqB,oCACD,mCACK,yBAE9B,0EAIK,mDAA0C,e,sBAgC3D,QACI,Q,oBACJ,Q,MADI,+D,sBAEJ,QACI,Q,oBACJ,Q,MADI,sD,uCAXR,oBAAkC,yDAAmB,Q,oBAAiC,OACtF,oBAEI,yDAIA,gCAGA,gCAGJ,O,uBAbqD,wCAIjD,0EAGe,qCAGA,qCCxDhB,MAAM,EAWT,YAAoBC,GAAA,KAAAA,cAPpB,KAAAC,eAA+C,GAC/C,KAAAC,QAAoB,CAAC,YAAE,wCAAyC,YAAE,sCAO9Db,KAAKa,QAAUb,KAAKa,QAAQC,IAAIC,GAAKf,KAAKW,YAAYK,UAAUD,IALpE,qBACI,OAAOE,OAAOC,OAAOlB,KAAKY,gBAAgBO,OAAO,CAACC,EAAKC,IAAMD,EAAMC,EAAG,GAO1E,WACIrB,KAAKY,eAAiBZ,KAAKsB,MAAMC,MAAMJ,OAAO,CAACK,EAAQC,IAC5C,OAAP,wBAAYD,GAAM,CAAE,CAACC,EAAKC,IAAK,IAChC,IAGP,SACI1B,KAAKU,YAAY,CACbiB,QAAS3B,KAAKsB,MAAMI,GACpBH,MAAOvB,KAAK4B,gBACZC,OAAQ7B,KAAK6B,SAIrB,SACI7B,KAAKU,cAGD,gBACJ,IAAIV,KAAKsB,MAAMQ,OAGf,OAAOb,OAAOc,QAAQ/B,KAAKY,gBACtBE,IAAI,EAAEkB,EAAaC,OAChBD,cACAC,cAEHC,OAAOC,GAAK,EAAIA,EAAEF,W,sCA1ClB,GAA0B,Y,uBAA1B,EAA0B,w0BDVvC,8BAEA,gBACI,gBACI,kBACI,gBACI,aACI,aACA,aAAI,Q,oBAAsC,OAC1C,cAAI,S,qBAAqC,OACzC,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAAoC,OACxC,cAAI,S,qBAAgC,OACxC,OACJ,OACA,wBAyBJ,OACJ,OACA,iBACI,mBAAiC,S,qBAA6C,OAC9E,uBAMI,qDACH,OACL,OACJ,OAEA,gC,MA/CwB,8CACA,8CACA,2CACA,6CACA,yCAIS,sCA2BQ,sDAE7B,gCAAiB,YAAjB,CAAiB,sB,4/BE7CD,Q,0BAAA,sC,yBAqBR,iB,sDAAgC,mD,uCAOhC,mBAGI,6HAHJ,O,0CAEI,8CAA4C,qDAA5C,CAA4C,0C,yBAfxD,eAKI,gBACI,uBACJ,OACA,gBAA8B,QAA8B,OAC5D,gBAA6B,QAA6B,OAC1D,gBAAkC,QAA+B,OACjE,gBAAkC,SAAqC,OACvE,iBACI,0BAQJ,OACJ,Q,kCAnBI,4CAGU,qCAEoB,oCACD,mCACK,uCACA,2CAGzB,oD,uCA0BrB,oBAAkC,yDAAmB,Q,oBAAiC,OACtF,oBAAsB,yDAClB,Q,oBACJ,O,uBAHqD,wCACZ,wCACrC,4DCnCD,MAAM,EAUT,YAAoBtC,EAAkCyC,GAAlC,KAAAzC,cAAkC,KAAAyC,iBANtD,KAAAC,0BAA4B,IAAI,IAChC,KAAAC,sBAAqF,GAOrF,WACItC,KAAKL,YAAYO,SAASqC,oBAAoBC,QAAQC,UAAU,EAAGC,qBAC/D1C,KAAKsC,sBAAwBtC,KAAKsB,MAAMC,MAAMJ,OAAO,CAACK,EAAQC,KAC1D,MAAMkB,EAAe3C,KAAK4C,oBAAoBnB,EAAMiB,EAAeG,gBACnE,OAAO,OAAP,wBACOrB,GAAM,CACT,CAACC,EAAKC,IAAK,CAAEiB,eAAcG,IAAKH,MAErC,IACH3C,KAAKoC,eAAeW,iBAGxB/C,KAAKL,YAAYqD,eACZC,8BACA7C,UAAUC,GAAQA,EAAK6C,qBACvBT,UAAUU,IACPnD,KAAKoD,sBACDD,EAASE,KACLC,IAAI,QAAC,OAAAA,EAAEC,QAAoD,QAAhD,EAAgC,QAAhC,EAAKvD,KAAKsB,MAAMkC,cAAc,UAAE,eAAER,sBAAc,eAAES,2BAC5DN,EAAS,GAClBnD,KAAK0D,mBAAqB,YAAiC1D,KAAKoD,uBAChEpD,KAAKqC,0BAA0BsB,WAAW3D,KAAK0D,oBAC/C1D,KAAKoC,eAAeW,iBAIhC,oBAAoBtB,EAAyBmC,GACzC,MAAM,eAAEf,EAAc,YAAEgB,GAAgBpC,EAAKqC,eACvCC,EACFlB,IAAmB,IAAWmB,QAAUJ,EAAuBf,IAAmB,IAAWoB,KAE3FC,EAAmBlE,KAAKmE,oBAAoB1C,GAClD,OAAOsC,EAAyBK,KAAKC,IAAIH,EAAkBL,GAAeK,EAG9E,oBAAoBzC,GAChB,MAAM6C,EAAY7C,EAAKlB,MAAMY,OAAO,CAACC,EAAKmD,IAASnD,GAAOmD,EAAKC,YAAc,EAAI,GAAI,GACrF,OAAO/C,EAAKQ,SAAWqC,EAG3B,YACI,MAAMG,EAAaxD,OAAOC,OAAOlB,KAAKsC,uBAAuBnB,OACzD,CAACuD,GAAS/B,kBAAmB+B,EAAQ/B,EACrC,GAOJ,OAJI,YACI3C,KAAKoD,sBACLpD,KAAKqC,0BAA0B5B,QAC9BT,KAAKqC,0BAA0BsC,OAClB,EAAIF,EAG9B,SACI,MAAMlD,EAAQN,OAAOc,QAAQ/B,KAAKsC,uBAAuBxB,IAAI,EAAEkB,GAAeW,qBAC1EX,cACAC,SAAUU,KAEd3C,KAAKU,YAAY,CACba,QACAqD,QAAS,YACL5E,KAAK0D,mBACL1D,KAAKqC,0BAA0B5B,SAK3C,SACIT,KAAKU,e,sCAhFA,GAA2B,sB,uBAA3B,EAA2B,mxBDtBxC,8BAEA,gBACI,gBACI,kBACI,gBACI,aACI,aACA,aAAI,Q,oBAAsC,OAC1C,cAAI,S,qBAAqC,OACzC,cAAI,S,qBAAqC,OACzC,cAAI,S,qBAAyC,OAC7C,cAAI,S,qBAAiC,OACzC,OACJ,OACA,uBAuBJ,OACJ,OACA,iBACI,mCACA,cAAI,S,qBAAyC,OAC7C,SACA,kBAAQ,S,0BAAyD,OACjE,oCAMJ,OACJ,OAEA,gC,MA9CwB,8CACA,8CACA,8CACA,kDACA,0CAIS,sCAyBF,gDACnB,kDACJ,sJACQ,gEAEJ,4DAA6C,iCAA7C,CAA6C,0CAA7C,CAA6C,kB,mjCE7CrD,qBCOG,MAAMmE,EAGT,oBACI,OAAQ7E,KAAK8E,OACT,IAAK,UACL,IAAK,UACD,MAAO,UACX,IAAK,YACD,MAAO,UACX,IAAK,YACD,MAAO,U,sCAXVD,I,uBAAAA,EAA8B,4MDR3C,qB,oBACI,2BACA,Q,6CACJ,Q,MAHU,8CAA2C,6BACjB,2CAChC,qD,8JEAI,eACI,gBAAsB,QAAmB,OACzC,qBACA,QACJ,Q,yBAJ+B,qBACL,yBAEtB,8BCGL,MAAME,G,sCAAAA,I,uBAAAA,EAAuB,2NDRpC,gBACI,aACI,qBAKJ,OACJ,Q,MAN6B,kC,4eEI7B,6B,oBACI,QACJ,Q,oBAFoD,8CAChD,4E,8DAOI,4B,8BAEI,iC,wBAGA,Q,8BAAA,uB,yBAPZ,QACI,6BACI,kCAIA,wCAGJ,OACJ,Q,4CATsB,4BAET,oDAA8C,eCLpD,MAAM,EANb,cAUI,KAAAC,aAAmD,GAEnD,YAAYC,GACRjF,KAAKgF,aAAehF,KAAKkF,kBAG7B,kBACI,OAAOlF,KAAKsB,MAAM6D,cAAgBnF,KAAKsB,MAAM6D,aAAa9B,KAAK+B,GAAKA,EAAE1D,KAAO1B,KAAKqF,eAGtF,Y,MACI,MAAMC,EAAU,IAAIC,IACdC,EAAqC,QAAnB,EAAGxF,KAAKwE,mBAAW,eAAEiB,WAAW3E,IAAI4E,GAAKA,EAAEhE,IACnE,IAAK,MAAMD,KAAQzB,KAAKsB,MAAMC,MAC1B,IAAK,MAAMgD,KAAQ9C,EAAKlB,MACpB,GAAIiF,aAAkB,EAAlBA,EAAoBG,SAASpB,EAAK7C,IAAK,CACvC,MAAMkE,EAAQN,EAAQO,IAAIpE,EAAKqC,eAAegC,MACjC,MAATF,EACAN,EAAQS,IAAItE,EAAKqC,eAAegC,KAAMF,EAAQ,GAE9CN,EAAQS,IAAItE,EAAKqC,eAAegC,KAAM,GAKtD,OAAOE,MAAMC,KAAKX,EAAQvD,WAAWjB,IAAI,EAAEgF,EAAM7D,OAAiB6D,OAAM7D,cAG5E,kBACI,MAAM+C,EAAgBhF,KAAKwE,YAAoBQ,aAC/C,OAAIA,EACO/D,OAAOc,QAAQiD,GACjB9C,OAAO,EAAEgE,KAAiB,eAARA,GAClBpF,IAAI,EAAEoF,EAAKC,OAECD,MAAKzF,MADAuF,MAAMI,QAAQD,IAAQ,SAAAE,SAAA,CAASF,GAAOA,EAAOA,EAAYG,cAIxE,GAIf,oBAAoBC,GAChB,OAAOP,MAAMI,QAAQG,IAAgB,SAAAF,SAAA,CAASE,I,sCA/CzC,I,uBAAA,EAA0B,mSDVvC,6B,oBACI,Q,qBACJ,OACA,6B,oBACI,QACJ,OACA,mCAGA,6B,oBACI,kCACJ,OACA,iC,MAZkB,4CACd,4FAEc,4DACd,qEAEe,yEAGD,kDACQ,8BAEY,yC,8JEJ9B,mC,oBAEI,gEAAiC,kB,8EAKrC,QACI,oBAAuC,8DAASC,gBAAA,UAC5C,Q,iEACJ,OACJ,O,uBAFQ,gG,0BAeQ,QACI,sBACA,Q,iEACJ,Q,8BADI,8F,uBAGA,sBACA,Q,2BAAA,4D,wCAbZ,QACI,oBAII,mEAASA,gBAAA,UAET,kCAIA,0CAIJ,OACJ,O,sCATuB,qCAAiC,e,0BAlBpE,gBACI,iCAKA,uBACI,oBACI,sBACJ,OACA,+BACI,iCAiBJ,OACJ,OACJ,Q,oBA7BmB,4CAU6B,6CChB7C,MAAM,GANb,cASc,KAAAA,gBAAkB,IAAI,IAEhC,qB,MACI,IAAKxG,KAAKwE,YACN,OAEJ,MAAM,WAAEiC,GAAezG,KAAKwE,YACtBkC,EAAuBC,GACzBF,EAAWd,SAASgB,GAAeA,EAAcF,EAAW,GAChE,OAAwB,QAAxB,EAAQzG,KAAKwE,mBAAW,eAAEM,OACtB,IAAK,UACD,OAAO4B,EAAoB,WAC/B,IAAK,UACD,OAAOA,EAAoB,aAC/B,QACI,OAAOD,EAAWpD,KAAKuD,GAAW,cAANA,IAIxC,kBACI,IAAK5G,KAAKwE,YACN,MAAO,GAEX,MAAMqC,EAAY7G,KAAK8G,qBACvB,OAAO9G,KAAKwE,YAAYiC,WAAWvE,OAAO0E,GAAKA,IAAMC,I,sBClCrD,qB,sBACA,sB,sBAKA,sB,uBAOA,mBACI,Q,oBACJ,Q,MADI,8D,uCDPC,K,wBAAA,GAAwB,suBDTrC,gBACI,gBACI,cAAK,Q,oBAAqC,OAC1C,gBACI,wCACJ,OACJ,OACA,gBACI,0CAKJ,OACA,uBA+BJ,Q,MA3Ca,4CAE4B,mEAK5B,qCAKiB,gF,uWEItB,mBACI,Q,oBAGJ,Q,qBAHI,8G,uBAIJ,mBACI,Q,oBACJ,Q,MADI,+D,0BAcA,8B,oBAII,QACJ,Q,8BAHI,8CAEA,kD,gEAhBR,iBACI,iBACI,Q,wCAGJ,OACA,8B,oBACI,Q,qBACJ,OACA,8B,qBACI,SACJ,OACA,sCAMJ,Q,yBAhBQ,kIAIc,qDACd,kEAEc,6DACd,2CAGC,iD,0BAvCjB,yBACI,mBACI,4BACA,4BAKA,4BAKJ,OACA,8BACI,yBAGA,yBAKA,yBAGA,yBAmBJ,OACJ,Q,oBA5CmB,kDAEN,qDAKA,kDAM2B,kDAGA,qDAKA,kDAGiB,wCCdlD,MAAME,GANb,cASI,KAAAC,eAAiB,EAEjB,KAAA7B,aAAgF,GAEhF,YAAYF,GACJjF,KAAKyB,OACLzB,KAAKgH,eAAiBhH,KAAKiH,kBAAkBjH,KAAKyB,MAClDzB,KAAKkH,kBAAoBlH,KAAKmH,qBAAqBnH,KAAKgH,eAAgBhH,KAAKyB,KAAKlB,MAAM6G,QACxFpH,KAAKmF,aAAenF,KAAKqH,gBAAgBrH,KAAKyB,OAO9C,kBAAkBA,GACtB,OAAOA,EAAKlB,MAAMY,OAAO,CAACC,EAAKmD,IAASnD,GAAOmD,EAAKC,YAAc,EAAI,GAAI,GAGtE,qBAAqBwC,EAAwBM,GACjD,OAAIN,IAAmBM,EACZ,OAEP,EAAIN,GAAkBA,EAAiBM,EAChC,UAEJ,OAGH,gBACJ7F,GAEA,MAAM8F,EAA8C,GAEpD,IAAK,MAAMhD,KAAQ9C,EAAKlB,MAChBgE,EAAKC,mBAC+BgD,IAAhCD,EAAOhD,EAAKC,YAAY9C,IACxB6F,EAAOhD,EAAKC,YAAY9C,IAAM,EAE9B6F,EAAOhD,EAAKC,YAAY9C,OAIpC,MAAM+F,EAAMhG,EAAKlB,MAAMY,OAAO,CAACgE,EAAcZ,IAClCA,EAAKC,YAAc,IAAIW,EAAcZ,EAAKC,aAAeW,EACjE,IAEH,OAAOlE,OAAOc,QAAQwF,GAAQzG,IAAI,EAAEY,EAAIkE,OAEhCA,QAEApB,YAAaiD,EAAIpE,KAAK+B,GAAKA,EAAE1D,KAAOA,O,uCAtDvCqF,K,wBAAAA,GAAwB,i1BDZrC,iC,KAA4C,oE,6iBEA5C,iB,oBACI,qBACJ,Q,oBAFiC,gFCS1B,MAAMW,GAIT,mB,QACI,MAAMC,EAG6B,QAHtB,EACI,QADJ,EACT3H,KAAK4H,gBAAQ,eAAEzG,OACX,CAACsG,EAAKI,IAAY,IAAIJ,KAAQI,EAAQF,SACtC,WAA2B,QAC1B,GACT,OAAO3H,KAAKyB,KAAKlB,MAAM2B,OAAOwD,IAC1B,GAAmB,OAAfA,EAAEoC,WAAsBpC,EAAEqC,UAC1B,OAAO,EAEX,GAAIrC,EAAEoC,SAAU,CACZ,MAAME,EAASL,EAAQtE,KAAKtC,GAAKA,EAAEW,KAAOgE,EAAEoC,UAC5C,MAAsB,YAAlBE,aAAM,EAANA,EAAQlD,OAMhB,OAAO,IACRsC,Q,0BC/BX,6B,oBAA+E,QAE7E,Q,oBAF0C,qCAAmC,mC,0BAG/E,6B,oBACI,Q,yBACmF,Q,6CAFnB,2CAChE,8J,0BAGJ,6B,oBACI,iCACJ,Q,oBAFiD,4CACvB,yC,0BAE1B,6B,oBACI,iCACJ,Q,oBAFmD,8CACzB,2C,uCDHbM,K,wBAAAA,GAAoB,0MDTjC,wB,KAAO,mC,oHGSA,MAAMO,GANb,cASY,KAAAC,WAAa,IAAI3C,IACjB,KAAA4C,aAAe,IAAI5C,IAE3B,cACI,MAAM,MAAE6C,EAAK,QAAEC,GAAYrI,KAAKsI,mBAChCtI,KAAKkI,WAAaE,EAClBpI,KAAKmI,aAAeE,EAGxB,aAAa3G,GACT,OAAO1B,KAAKsB,MAAMiH,WAAWlF,KAAKmF,GAAKA,EAAE9G,KAAOA,GAGpD,gBACI,MAAO,IAAI1B,KAAKkI,WAAWnG,WAAWjB,IAAI,EAAEW,EAAMmE,OACrCE,KAAMrE,EAAKqC,eAAegC,KAAM7D,SAAU2D,KAI3D,kBACI,MAAO,IAAI5F,KAAKmI,aAAapG,WAAWjB,IAAI,EAAEW,EAAMmE,OACvCE,KAAMrE,EAAKqC,eAAegC,KAAM7D,SAAU2D,KAInD,mB,QACJ,MAAMwC,EAAQ,IAAI7C,IACZ8C,EAAU,IAAI9C,IACpB,IAAK,MAAMkD,KAASzI,KAAK0I,aAAajD,YAAc,GAAI,CACpD,MAAMjE,EAASxB,KAAK2I,oBAAoBF,EAAM/G,IAC9C,GAAIF,EAAQ,CACR,MAAM,KAAEC,EAAI,KAAE8C,GAAS/C,EACvB,GAAI+C,EAAKwD,UAAW,CAChB,MAAMnC,EAAyB,QAApB,EAAGyC,EAAQxC,IAAIpE,UAAK,QAAI,EACnC4G,EAAQtC,IAAItE,EAAMmE,EAAQ,OACvB,CACH,MAAMA,EAAuB,QAAlB,EAAGwC,EAAMvC,IAAIpE,UAAK,QAAI,EACjC2G,EAAMrC,IAAItE,EAAMmE,EAAQ,KAIpC,MAAO,CAAEwC,QAAOC,WAGZ,oBAAoBO,GACxB,IAAK,MAAMnH,KAAQzB,KAAKsB,MAAMC,MAAO,CACjC,MAAMgD,EAAO9C,EAAKlB,MAAM8C,KAAKqC,GAAKA,EAAEhE,KAAOkH,GAC3C,GAAIrE,EACA,MAAO,CAAE9C,OAAM8C,U,uCAnDlB0D,K,wBAAAA,GAA2B,6ODTxC,6B,oBAAoD,QAAqB,OACzE,oCAGA,oCAIA,oCAGA,qC,MAXkB,oCAAkC,gCACjC,yCAGqB,kDAIrB,8CAGA,kD,sHELP,QACI,qCAOJ,Q,mCALQ,wDAAyC,aAAzC,CAAyC,mCAAzC,CAAyC,kB,wCASrD,oBAAyC,yDAAoB,IACzD,sBACA,Q,oBACJ,O,MADI,+C,wCAEJ,oBAEI,iEAIA,sBACA,Q,oBACJ,O,wBAJI,uEAGA,iD,0BA7BZ,gBACI,gBACI,Q,oBACJ,OACA,gBACI,gBACI,gCASJ,OACJ,OACA,gBACI,0BAIA,0BASJ,OACJ,Q,oBA9BQ,uDAGyC,oCACC,6CAY0B,iCAO/D,iCCfN,MAAM,GAMT,YAAoBY,GAAA,KAAAA,cALX,KAAAC,mBAA0C,GAC1C,KAAAC,kBAA6C,GAC5C,KAAAC,YAAc,IAAI,IAE5B,KAAAC,UAAW,EAGX,WACIjJ,KAAKkJ,gBAAkBlJ,KAAK6I,YAAYM,MAAM,IAC9C,IAAK,MAAMC,KAASpJ,KAAK8I,mBACrB9I,KAAKkJ,gBAAgBG,WACjBD,EAAMtD,KACN9F,KAAK6I,YAAYS,QAAQtJ,KAAK+I,kBAAkBK,EAAMtD,QAKlE,gBACI9F,KAAKgJ,YAAYO,KAAKvJ,KAAKkJ,gBAAgBzI,OAC3CT,KAAKkJ,gBAAgBM,iBACrBxJ,KAAKiJ,UAAW,G,uCArBX,IAA8B,Y,wBAA9B,GAA8B,qsBDV3C,wB,KAAmB,0C,meEKnB,MAAMQ,GACF,YAAYC,EAAUC,GAClB3J,KAAK0J,SAAWA,EAChB1J,KAAK2J,OAASA,EAElB,KAAKC,EAAYD,GACb,OAAOA,EAAOlH,UAAU,IAAI,GAAoBmH,EAAY5J,KAAK0J,SAAU1J,KAAK2J,UAGxF,MAAM,WAA4B,KAC9B,YAAYE,EAAaH,EAAUC,GAC/BG,MAAMD,GACN7J,KAAK0J,SAAWA,EAChB1J,KAAK2J,OAASA,EAElB,MAAMI,GACF,IAAK/J,KAAKgK,UAAW,CACjB,IAAIC,EAASjK,KAAKiK,OACdC,EAAUlK,KAAKkK,QACfC,EAAsBnK,KAAKmK,oBAC/B,GAAKD,EAYDlK,KAAKiK,YAASzC,EACdxH,KAAKmK,yBAAsB3C,MAbjB,CACVyC,EAAS,IAAIG,GAAA,EACb,IACI,MAAM,SAAEV,GAAa1J,KACrBkK,EAAUR,EAASO,GAEvB,MAAOI,GACH,OAAOP,MAAMQ,MAAMD,GAEvBF,EAAsB,OAAAI,GAAA,GAAeL,EAAS,IAAI,KAAsBlK,OAM5EA,KAAKwK,yBACLxK,KAAKiK,OAASA,EACdjK,KAAKkK,QAAUA,EACflK,KAAKmK,oBAAsBA,EAC3BF,EAAOQ,KAAKV,IAGpB,eACI,MAAM,OAAEE,EAAM,oBAAEE,GAAwBnK,KACpCiK,IACAA,EAAOS,cACP1K,KAAKiK,YAASzC,GAEd2C,IACAA,EAAoBO,cACpB1K,KAAKmK,yBAAsB3C,GAE/BxH,KAAKkK,aAAU1C,EAEnB,aACI,MAAM,aAAEmD,GAAiB3K,KACzBA,KAAK2K,aAAe,KACpB3K,KAAKwK,yBACLxK,KAAK2K,aAAeA,EACpB3K,KAAK2J,OAAOlH,UAAUzC,O,wCChEF,Q,0BAAA,qC,0BAIpB,mBACI,Q,6CACJ,Q,yBAFyC,gBACrC,6C,wCAKR,mBAA0C,0DACtC,Q,oBACJ,O,MADI,iD,8EADJ,0BAGA,mBAAsB,yDAClB,Q,iEACJ,O,uBALuB,2BAG0C,0CAC7D,6GCLD,MAAM4K,GANb,cAQI,KAAAnE,WAAuB,GACvB,KAAAoE,QAAU,GAEV,KAAAC,cAAgB,GAEhB,SACQ9K,KAAK8K,eACL9K,KAAKU,YAAYV,KAAK8K,eAI9B,SACI9K,KAAKU,e,uCAdAkK,K,wBAAAA,GAA+B,2aDT5C,+BACA,YAAG,Q,oBAAyB,OAC5B,+BACI,mBAA+B,4DAC3B,0BAGJ,OACJ,OACA,iC,MARG,kCAEgC,wCACD,uC,6GEc3B,MAAM,GACT,YACYjL,EACAoL,EACAC,EACArK,GAHA,KAAAhB,cACA,KAAAoL,eACA,KAAAC,sBACA,KAAArK,cAOZ,8BAA8BgB,EAAiB8E,GAC3C,OAAOzG,KAAKiL,qBAAqBtJ,GAASuJ,KACtC,OAAAC,GAAA,GAAUrG,IACN,MAAMsG,EAA0B,CAC5BzJ,UACA8E,aACAoE,QAAS7K,KAAKW,YAAYK,UACtB,YAAE,mDACF,CAAE8D,UAENuG,aAAa,EACbC,MAAO,IAEX,OAAIxG,EACO9E,KAAKuL,yBAAyB5J,EAASmD,GAAOoG,KACjD,OAAAM,GAAA,GAAWzB,GAAO/J,KAAKyL,0BAA0BL,KAG9CpL,KAAKyL,0BAA0BL,MAStD,0BAA0BM,GAOtB,OAAO1L,KAAK+K,aACPY,cAAcf,GAAiC,CAC5CgB,OAAQ,CACJnF,WAAYiF,EAAQjF,WACpB4E,YAAaK,EAAQL,YACrBR,QAASa,EAAQb,SAErBgB,UAAU,EACVC,KAAM,OAETZ,KACG,OAAAC,GAAA,GAAU3J,IACN,GAAIA,EACA,OAAOxB,KAAKuL,yBAAyBG,EAAQ/J,QAASH,GAEtD,GAAKkK,EAAQL,YAGT,OAAO,KAFP,MAAM,IAAIU,MAAM,sCH9ElBrC,EGoFAO,GAAUA,EAAOiB,KAAK,OAAAc,GAAA,GAAM,KAAO,aAAKN,EAAQJ,QHnF9D3B,GAAWA,EAAOsC,KAAK,IAAIxC,GAAkBC,EAAUC,MAD5D,IAAmBD,EG4Fd,qBAAqB/H,GACzB,OAAO3B,KAAKL,YAAY2B,MACnB4K,gBAAgBvK,EAAS,CACtBO,OAAQ,CACJiK,KAAM,CACFC,GAAI,IAAiBC,yBAG7BC,KAAM,CACFC,UAAW,IAAUC,QAG5BpM,UAAUoB,GAAUA,EAAOF,OAC3B4J,KACG,OAAApK,GAAA,GAAIU,IACA,MAAM+C,EAAO/C,aAAM,EAANA,EAAQiL,QAAQlM,MAAM8C,KAAKqC,GAAmB,cAAdA,EAAErF,KAAKqM,IACpD,OAAInI,EACOA,EAAKlE,KAAK4F,UAEjB,KAMZ,yBAAyBtE,EAAiBmD,GAC9C,OAAO9E,KAAKL,YAAY2B,MAAMqL,kBAAkBhL,EAASmD,GAAOoG,KAC5D,OAAApK,GAAA,GAAI,EAAG8L,6BACH,OAAQA,aAAsB,EAAtBA,EAAwBC,YAC5B,IAAK,QACD,OAAOD,aAAsB,EAAtBA,EAAwB9H,MACnC,IAAK,4BAED,MADA9E,KAAKgL,oBAAoBV,MAAMsC,aAAsB,EAAtBA,EAAwBE,iBACjD,IAAIf,MAAMa,aAAsB,EAAtBA,EAAwBE,sB,uCA7GnD,IAAsB,0C,0BAAtB,GAAsB,QAAtB,GAAsB,qBAFnB,S,8BChBT,MAAMC,GAAc,G,0BCOvB,gBACI,gBAEA,qBACA,gBACI,Q,6CACJ,OACJ,Q,oBAFQ,4DCOL,MAAM,GAWT,YAAoBC,GAAA,KAAAA,aAPpB,KAAAC,QAAU,IAAIC,GAAA,GAAyB,GACvC,KAAAC,cAAgB,IAAID,GAAA,GAAyB,GAC7C,KAAAE,eAAgB,EAGhB,KAAAC,eAAiB,YAIjB,YAAYpI,GACRjF,KAAKoN,gBAAkBpN,KAAKsN,KAAKZ,GAAGrJ,KAAMuD,GAAiB,cAAXA,EAAEd,MAC9Cb,EAAQnD,QACR9B,KAAKiN,QAAQxC,KAAKzK,KAAK8B,QAI/B,OAAOyL,EAA2B,O,QACjBvN,KAAKgN,WAAWQ,cAAcC,wBAA3C,MACMC,EACkF,QADxE,EACwC,QADxC,EACZ1N,KAAKgN,WAAWQ,cAAcG,cAAc,gBAAQ,eAAEF,wBAAwBG,cAAM,QAAI,EAC5F,MAAO,CACHC,EAAG,GACHC,EAAG9N,KAAK+N,MAAQhB,IAA0B,WAAXQ,EAAsBG,EAAa,IAI1E,WACI,MAAMM,EAAMhO,KAAKiO,SACjB,MAAO,CACH,SAAUD,EAAIF,EACd,UAAWE,EAAIH,I,uCAlCd,IAAyB,Y,wBAAzB,GAAyB,0UDnBtC,gB,gBACI,gB,gBAII,Q,6CACJ,OACA,uBAQJ,Q,MAfiD,mCAAvB,6BAGlB,wDAEA,wDAE4B,uC,w3CEK7B,MAAM,GAMT,WACI7N,KAAKiN,QAAUjN,KAAKiG,KAAKgH,QACpBiB,eACAhD,KAAK,OAAAiD,GAAA,GAAKrM,GAAW9B,KAAK0M,GAAGS,cAAc1C,KAAK3I,KAGzD,WACI,MAAMsM,EAAYpO,KAAKiG,KAAK8H,MAAQ/N,KAAK0M,GAAGqB,MAAQ,OAAS,KACvDM,EAAWrO,KAAKiG,KAAKgI,OAAqB,SAAdG,EAAuB,SAAW,OAC9DE,EAAStO,KAAK0M,GAAGuB,OAAqB,SAAdG,EAAuB,MAAQ,UACvDG,EAAKnK,KAAKoK,IAAIH,EAASR,EAAIS,EAAOT,GAClCY,EAAKrK,KAAKoK,IAAIH,EAASP,EAAIQ,EAAOR,GAClC1G,EAAShD,KAAKsK,KAAK,SAAAH,EAAM,GAAI,SAAAE,EAAM,IACzC,OAAO,OAAP,QACI,SAAUJ,EAASP,EACnB,UAAWO,EAASR,GAAmB,SAAdO,EAAuB,GAAK,IAAmB,GAAbpO,KAAK+N,MAChE,YAAa3G,EACb,WAAY,GACM,OAAdgH,EACE,CACIO,UAAW,kBACX,mBAAoB,OAExB,K,wCCzClB,QACI,mCAII,6FAAsC,6D,gBAEzC,OACL,O,+CANQ,uBAAc,UAAd,CAAc,6C,0BAOtB,QACI,mCACJ,Q,yBAD4B,4BAAkB,UAAlB,CAAkB,kB,uCDEjC,K,wBAAA,GAAyB,4MEZtC,gB,gBAMI,qBACJ,Q,MAHI,mCADA,6BAFA,mCAAiC,4B,8lBC0B9B,MAAM,GAUT,YAAoBvM,GAAA,KAAAA,iBAPpB,KAAAwM,gBAAkB,IAAI1B,GAAA,OAAoC1F,GAE1D,KAAAqH,MAAqB,GACrB,KAAAC,MAAkG,GAMlG,kBAEI,OAAO9O,KAAK6O,MAAMzH,OAAS2F,GAG/B,WACI/M,KAAK4O,gBAAgBnE,KAAKzK,KAAK+O,cAC/B/O,KAAKgP,aAAehP,KAAK4O,gBAAgB1D,KAAK,OAAA+D,GAAA,GAAa,MAG/D,YAAYhK,GACRjF,KAAKkP,gBAGT,kBACIC,WAAW,IAAMnP,KAAKoP,iBAG1B,YAAYC,GACRrP,KAAK4O,gBAAgBnE,KAAK4E,GAG9B,aACIrP,KAAK4O,gBAAgBnE,KAAKzK,KAAK+O,cAGnC,WAAWjK,GACP,GAAI9E,KAAKsP,eACL,OAAOtP,KAAKsP,eAAejM,KAAMhC,GAAMA,EAAEiM,KAAKxH,OAAShB,GAIvD,gB,QACJ,MAAMyK,EAAe,IAAIhK,IACzB,IAAK,MAAMT,KAAS9E,KAAKwP,OACrBD,EAAaxJ,IAAIjB,EAAMgB,KAAM,CACzBA,KAAMhB,EAAMgB,KACZ4G,GAAI,KAIZ,IAAK,MAAO5G,EAAM2J,KAAcF,EAAaxN,UAAW,CACpD,MAAM2N,EAAsD,QAA/C,EAA2C,QAA3C,EAAG1P,KAAKwP,OAAOnM,KAAMuD,GAAMA,EAAEd,OAASA,UAAK,eAAE4G,UAAE,QAAI,GAChE,IAAK,MAAMiD,KAAUD,EAAS,CAC1B,MAAME,EAAaL,EAAa1J,IAAI8J,GAChCC,GACAH,EAAU/C,GAAGmD,KAAKD,IAI9B5P,KAAK6O,MAAQ,IAAIU,EAAarO,UAAUgB,OAAQb,GAAiB,cAAXA,EAAEyE,MAGpD,gBACJ,IAAK,MAAMwH,KAAQtN,KAAK6O,MAAO,CAC3B,MAAMiB,EAAU9P,KAAK+P,WAAWzC,EAAKxH,MACrC,IAAIiI,EAAQ,EACZ,IAAK,MAAMrB,KAAMY,EAAKZ,GAAI,CACtB,MAAMsD,EAAQhQ,KAAK+P,WAAWrD,EAAG5G,MAC7BgK,GAAWE,GAASF,IAAYE,IAChChQ,KAAK8O,MAAMe,KAAK,CACZnD,GAAIsD,EACJ/J,KAAM6J,EACN/B,UAEJA,MAIZ/N,KAAK8O,MAAQ,IAAI9O,KAAK8O,OACtB9O,KAAKoC,eAAeW,gB,uBC7GA,Q,0BAAA,4C,uCD2Bf,IAA0B,Y,wBAA1B,GAA0B,gE,GAAA,K,KAQrB,GAAyB,G,8VFnC3C,gCASA,iC,MATgC,wBASD,kC,2MIOxB,MAAMkN,GAGT,YAAoBC,GAAA,KAAAA,sBADpB,KAAAV,OAA8B,GAG9B,WACIxP,KAAKwP,OAASxP,KAAKkQ,oBAAoBC,yB,uCANlCF,IAAgC,Y,wBAAhCA,GAAgC,sJDhB7C,+BAEA,qC,MAAyB,gCAAiB,gC,wGEFd,Q,0BAAA,gD,0BAwCQ,iBACI,QACA,iBACI,Q,oCAKJ,OACJ,Q,sDARI,oCAEI,gG,0BARhB,uBACI,iBACI,oBAA4B,sBAAkC,OAClE,OACA,4BACI,wBAUJ,OACJ,Q,yBAXyD,2B,0BAN7D,QACI,iCAiBJ,Q,oBAjBmB,+B,wCAqBvB,mBAEI,kHAA8C,mHAFlD,O,0CAEI,gDAA8C,mB,wCAS9C,mBAKI,gHALJ,O,0CAII,qDAAmD,0C,wCAOvD,mBAKI,gHALJ,O,0CAII,qDAAmD,0C,0BAhEnE,gBACI,gBACI,iB,uBACJ,OACA,gBAA8B,QAA8B,OAC5D,gBAA6B,QAA6B,OAC1D,gBACI,QACA,+BACJ,OACA,iBACI,S,0BACJ,OACA,iBACI,kBACI,S,0BACA,kCAmBJ,OACJ,OACA,iBACI,2BAQJ,OACA,iBACI,kBACI,2BAOJ,OACJ,OACA,iBACI,kBACI,2BAOJ,OACJ,OACJ,Q,kCAnEa,2DAEqB,oCACD,mCAEzB,iCACkB,uBAAa,6BAG/B,0EAII,kFACe,iCAuBd,uDAYI,uDAWA,wD,0BA6BT,oBAKI,Q,yBAEJ,Q,kCALI,kBAAmB,gCAGnB,uF,sEAgCR,iBACI,Q,gEAQJ,Q,oBARI,+J,uBASJ,iBACI,Q,oBACJ,Q,MADI,8D,iEAUZ,QACI,Q,6CAIJ,Q,qBAJI,oH,uBAMA,Q,0BAAA,sD,wCATR,oBAAkC,yDAAmB,Q,oBAAiC,OACtF,oBAAsB,yDAClB,iCAMA,0CAGJ,O,iCAXqD,wCACZ,wCACtB,qCAAqB,eClJrC,MAAM,GAYT,YAAoBtP,GAAA,KAAAA,cALpB,KAAAC,eAAsD,GACtD,KAAAwP,gBAAiB,EACjB,KAAAC,WAAa,EACb,KAAAxP,QAAoB,CAAC,YAAE,wCAAyC,YAAE,sCAG9Db,KAAKa,QAAUb,KAAKa,QAAQC,IAAIC,GAAKf,KAAKW,YAAYK,UAAUD,IAGpE,kBAMI,OALkBf,KAAKsB,MAAMC,MAAMJ,OAAO,CAACuD,EAAOjD,KAC9C,MAAM6O,EAAUtQ,KAAKY,eAAea,EAAKC,IACnC6O,EAAeD,EAAQtI,QAAUsI,EAAQrO,UAAa,EAC5D,OAAOyC,EAAQjD,EAAK+O,yBAA2BD,GAChD,IACiBvQ,KAAKoQ,eAAiBpQ,KAAKsB,MAAMmP,gBAAkB,GAAKzQ,KAAKqQ,WAGrF,2BACI,OAAOrQ,KAAK0Q,gBACP5P,IAAI+G,GACoBA,EAAQ8I,OACA,SAAAC,QAAA,CACzB/I,EAAQF,QAAQzF,OAAOnB,GAAiB,WAAZA,EAAE+D,OAC9B,UAIP3D,OAAO,CAACC,EAAKuP,IAAWvP,EAAMuP,EAAQ,GAG/C,6BAA6BlP,G,QACzB,MAAMkG,EAG6B,QAHtB,EACU,QADV,EACT3H,KAAKsB,MAAMsG,gBAAQ,eAAEzG,OACjB,CAACsG,EAAKI,IAAY,IAAIJ,KAAQI,EAAQF,SACtC,WAA2B,QAC1B,GAYT,OAAO,EAVYlG,EAAKlB,MAAM2B,OAAOwD,IACjC,GAAIA,EAAEqC,UACF,OAAO,EAEX,GAAkB,MAAdrC,EAAEoC,SACF,OAAO,EAEX,MAAME,EAASL,EAAQtE,KAAKtC,GAAKA,EAAEW,KAAOgE,EAAEoC,UAC5C,MAAyB,YAAlBE,aAAM,EAANA,EAAQlD,SAEGsC,OAG1B,WACIpH,KAAKY,eAAiBZ,KAAKsB,MAAMC,MAAMJ,OAAO,CAACK,EAAQC,IAC5C,OAAP,wBACOD,GAAM,CACT,CAACC,EAAKC,IAAK,CACPO,SAAU,EACV+F,QAAQ,EACR6I,QAAQ,KAGjB,IACH7Q,KAAK0Q,iBAAmB1Q,KAAKsB,MAAMsG,UAAY,IAAI1F,OAAO4O,GAAiB,YAAZA,EAAEhM,OAC7D9E,KAAK0Q,gBAAgBtJ,SACrBpH,KAAK+Q,gBAAkB/Q,KAAK0Q,gBAAgB,IAIpD,mBAAmBjP,GACQ,KAAnBA,aAAI,EAAJA,EAAMQ,YACNR,EAAKoP,QAAS,EACdpP,EAAKuG,QAAS,GAItB,cAII,OAHe/G,OAAOC,OAAOlB,KAAKY,gBAAgBO,OAAO,CAAC6P,EAAavP,IAC5DuP,GAAgB,EAAIvP,EAAKQ,UAAYR,EAAKuG,QAClD,GAIP,eAII,OAHe/G,OAAOC,OAAOlB,KAAKY,gBAAgBO,OAAO,CAAC8P,EAAcxP,IAC7DwP,GAAiB,EAAIxP,EAAKQ,UAAYR,EAAKoP,QACnD,GAIP,YACI,OAAI7Q,KAAKgR,iBAEDhR,KAAK+Q,iBACL/Q,KAAK6B,QACL,EAAI7B,KAAKkR,aACTlR,KAAKkR,aAAelR,KAAKmR,wBAEtBnR,KAAKiR,kBACHjR,KAAK6B,OAKtB,SACI,MAAMgG,EAAU7H,KAAK+Q,gBACrB,GAAIlJ,EAAS,CACT,MAAMuJ,EAAcpR,KAAKqR,kBAAkB5P,GAAQA,EAAKuG,QAClDsJ,EAActR,KAAKqR,kBAAkB5P,GAAQA,EAAKoP,QAExD7Q,KAAKU,YAAY,CACbsH,OAAQ,CACJzG,MAAO6P,EACPvP,OAAQ7B,KAAK6B,OACb0P,SAAUvR,KAAKoQ,eAAiBpQ,KAAKsB,MAAMiQ,SAAW,EACtDlB,WAAYrQ,KAAKqQ,WACjBmB,UAAW3J,EAAQnG,IAEvBmP,OAAQ,CACJtP,MAAO+P,EACP3P,QAAS3B,KAAKsB,MAAMI,GACpBG,OAAQ7B,KAAK6B,WAM7B,SACI7B,KAAKU,cAGD,kBAAkB+Q,GACtB,OAAOxQ,OAAOc,QAAQ/B,KAAKY,gBACtBsB,OAAO,EAAEF,EAAaP,KAAU,EAAIA,EAAKQ,UAAYwP,EAAShQ,IAC9DX,IAAI,EAAEkB,EAAaP,OAChBO,cACAC,SAAUR,EAAKQ,a,uBCnKH,Q,0BAAA,sC,wCAUxB,mBAAkC,yDAAmB,Q,oBAAiC,OACtF,mBAAsB,yDAClB,Q,oBACJ,O,uBAHqD,wCACZ,0CACrC,uD,uCDSK,IAA0B,Y,wBAA1B,GAA0B,0uDDrBvC,+BAEA,gBACI,gBACI,kBACI,gBACI,aACI,aACA,aAAI,Q,oBAAsC,OAC1C,cAAI,S,qBAAqC,OACzC,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAAoC,OACxC,cAAI,S,qBAA6C,OACjD,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAAgC,OACpC,cAAI,S,qBAAgC,OACxC,OACJ,OACA,yBAsEJ,OACJ,OACA,iBACI,eACI,mBAAiC,S,qBAAoD,OACrF,uBAQI,qD,qBACH,OACL,OAEA,eACI,gCACI,iBAAO,S,qBAA2C,OAClD,oBAAiC,8DAC7B,2BAQJ,OACJ,OAEA,gCACI,oBAAmC,6DAAnC,OACA,iBACI,S,+CAGJ,OACJ,OACA,+BACI,iBAAO,S,qBAA2C,OAClD,iCAII,yDACH,OACL,OACA,kBACI,kBACI,S,+CAEJ,OACA,kBACI,S,+CAEJ,OACA,0BAUA,yBAGJ,OACJ,OACJ,OACJ,OAEA,kC,MA5JwB,8CACA,8CACA,2CACA,6CACA,sDACA,2CACA,yCACA,yCAGS,sCA0EY,6DAE7B,6DAA8C,kBAA9C,CAA8C,sEAA9C,CAA8C,YAA9C,CAA8C,oBAavC,oDAC0B,0CAA6B,6BAElC,0CAWO,yCAA4B,6BAE3D,kHAMG,oDAGH,0CAA2B,oCAA3B,CAA2B,wBAKf,0CAEZ,wHAIA,2GAG6B,2EAUE,8D,uiDGjJ5C,MAAMyP,GANb,cAQI,KAAA3R,cAAgB,GAGhB,SACIC,KAAKU,YAAYV,KAAKD,eAG1B,SACIC,KAAKU,e,uCAVAgR,K,wBAAAA,GAA2B,oUDXxC,+BACA,cACI,Q,oBACJ,OACA,8BACI,gBAAO,Q,oBAAwC,OAC/C,kBAAqC,4DAArC,OACJ,OAEA,gC,MAPI,sGAGO,+CAC8B,0C,8SESrB,iB,sDAAgC,mD,0BA2BpB,iBACI,eAAoE,QAElE,OACF,iBACI,Q,yBACA,gB,oBACI,Q,yBACJ,OACJ,OACJ,Q,mCAT8B,iDAA0C,4BAIhE,qEACuB,kDACnB,gE,0BAZpB,uBACI,iBACI,Q,oBACJ,OACA,4BACI,0BAWJ,OACJ,Q,yBAfQ,2DAGiD,2B,0BAN7D,QACI,iCAkBJ,Q,oBAlBmB,+B,0BA6BK,kBAA4B,QAAiB,Q,8BAAvC,sBAAsB,uB,sBAIxB,sB,sBAGA,sB,0BAJJ,gCAGA,iC,8BAHa,0BAGA,mC,yBAKb,Q,8BAAA,uB,0BAfhB,iBACI,8B,2BACI,iBACI,gCAGA,gCAQA,gCAGJ,OACJ,OACJ,Q,yBAlBsB,yCACG,uCACA,wCAGA,wC,0BATrC,aACI,gBACI,iBACI,wBAoBJ,OACJ,OACJ,Q,yBAtBwD,2B,0BAJ5D,QACI,uBA0BJ,Q,oBA1BS,+B,0BA/Cb,QACI,gBACI,gBACI,wBACJ,OACA,gBAA8B,QAA8B,OAC5D,gBAA6B,QAA6B,OAC1D,gBACI,Q,0BACA,iB,qBACI,S,0BACJ,OACJ,OACA,iBACI,SACA,+BACA,mCACJ,OACA,iBACI,S,0BACA,iB,qBACI,S,0BACJ,OAEA,kCAoBJ,OACJ,OACA,kCA4BJ,Q,kCAzE2B,4CAET,qCAEoB,oCACD,mCAEzB,0EACuB,oDACnB,mEAIJ,iCACkB,uBAAa,6BACT,uBAAa,4BAGnC,0EACuB,oDACnB,mEAGW,2CAsBR,+C,0BA6BnB,gBACI,gBAA+C,QAA2B,OAC1E,gBAA6B,QAAmB,OAChD,gBACA,gBACI,Q,yBACA,gB,qBACI,S,0BACJ,OACJ,OACJ,Q,kCATmD,4BAClB,oBAGzB,oEACuB,mDACnB,gE,0BAOJ,mBAA4E,QAE1E,Q,oBAF0E,iB,0BAHpF,gBACI,gBACI,eAA6C,QAA0B,OACvE,6BAGJ,OACA,eACI,Q,yBACA,gB,oBACI,S,0BACJ,OACJ,OACJ,Q,kCAXW,iDAA0C,4BAClC,6DAKX,qEACuB,kDACnB,iECnGb,MAAM,GANb,cASI,KAAAC,8BAA+B,EAE/B,mCACI,OAAO3R,KAAK2R,6BAA+B3R,KAAK4R,sBAAwB,GAG5E,iBACI,OAAQ5R,KAAK2R,8BAAgC,EAAI3R,KAAK4R,sBAAsBxK,OAGhF,WACIpH,KAAK2R,6BAA+B3R,KAAK4R,sBAAsBxK,OAAS,EAG5E,8BACIpH,KAAK2R,8BAAgC3R,KAAK2R,6BAG9C,iBAAiBlQ,GACb,OAAOA,EAAKoQ,UAAU3P,OAAO4P,GAAKA,EAAE3F,OAAS,IAAe4F,WAGhE,oBAAoBtQ,GAChB,OAAOzB,KAAK4R,sBACP9Q,IAAIkR,KAGGA,SACAvR,MAHWgB,EAAauD,aAAagN,EAAOlM,SAMnD5D,OAAOkH,KACGpJ,KAAK2R,8BAAqD,MAAfvI,EAAM3I,OAIpE,iBAAiBwR,GAEb,MAAO,CAAC,aAAc,aADXA,EAAUC,iBAAiBC,MAAM,KAAK,IAIrD,2BACI7Q,EACA8Q,GAEA,MAAM1Q,EAAK0Q,EAAoBF,iBAAiBC,MAAM,KAAK,GACrDF,EAAY3Q,EAAM+Q,WAAWhP,KAAKyN,GAAKA,EAAEpP,KAAOA,GACtD,GAAIuQ,EACA,OAAOA,EAAUK,iBAAc9K,G,uCAnD9B,K,wBAAA,GAAmB,8zCDThC,kBACI,gBACI,aACI,aACA,aAAI,Q,oBAAsC,OAC1C,aAAI,Q,oBAAqC,OACzC,cAAI,S,qBAAoC,OACxC,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAA+B,OACvC,OACJ,OACA,iBACI,mCA2EA,yBAWA,yBAcA,gBACI,gBAAkC,S,qBAAmC,OACrE,gBACA,gBACI,S,0BACA,iB,qBACI,S,0BACJ,OACJ,OACJ,OACA,gBACI,gBAAkC,S,qBAAkC,OACpE,gBAA6B,SAAkD,OAC/E,iBACA,gBACI,S,0BACA,iB,qBACI,S,0BACJ,OACJ,OACJ,OACA,iBACI,gBAAkC,S,qBAA+B,OACjE,gBACA,gBACI,S,0BACA,iB,qBACI,S,0BACJ,OACJ,OACJ,OACJ,OACJ,Q,MA5IgB,8CACA,6CACA,6CACA,2CACA,wCAIuB,sCA2Ea,2CAWM,0CAeZ,4CAG9B,+EACuB,oDACnB,wEAK0B,2CACL,8IAGzB,+EACuB,oDACnB,wEAK0B,wCAG9B,4EACuB,oDACnB,uE,y+DErIpB,6B,oBACI,QACJ,Q,oBAF+C,8CAC3C,+C,0BAEJ,6B,oBACI,QACJ,Q,oBAFgD,+CAC5C,gDCAG,MAAM+K,I,uCAAAA,K,wBAAAA,GAAsB,8LDVnC,6B,oBACI,QACJ,OACA,6B,oBACI,Q,yBACJ,OACA,oCAGA,oCAGA,6B,qBACI,6BACJ,Q,MAdkB,+CACd,wCAEc,gDACd,kEAEe,4CAGA,6CAGD,2DACG,2C,iHECT,kBACI,Q,oBACJ,Q,MADI,6E,uBAEJ,kBACI,Q,oBACJ,Q,MADI,kE,uBAgBA,iBACI,Q,oBACJ,Q,MADI,iE,uBAEJ,iBACI,Q,oBACJ,Q,MADI,iE,sEAGA,Q,oDAAA,2F,0BARR,QACI,wBAGA,wBAGA,gCAMJ,Q,8BAZwB,6CAGA,6CAGP,uE,uBAcT,sBAA6D,Q,oBAE3D,Q,MAF2D,sD,uBAG7D,sBAA4D,Q,oBAE1D,Q,MAF0D,0D,0BANhE,QACI,Q,oBACA,iBAAQ,Q,yBAAmE,OAC3E,6BAGA,6BAGA,mCACI,qCAIJ,OACJ,Q,8BAdI,uEACQ,2DACuB,iCAGF,kCAKrB,8BAAe,mB,0BAf/B,QACI,iBACI,Q,oBACJ,OACA,mCAgBJ,Q,uCAlBQ,+DAEW,+D,0BAuBX,mCACI,gCAIJ,Q,8BAHQ,0BAAmB,sC,0BAP/B,QACI,iBACI,Q,oBACJ,OACA,Q,oBACA,6CAMJ,Q,mDATQ,gEAEJ,2GAC2B,sC,6EAQ3B,Q,wEAAA,4I,0BAdR,QACI,iCAYA,0CAWJ,Q,wCAvBmB,2CAAmC,e,0BAwBtD,QACI,Q,oBAIJ,Q,8BAJI,oH,0BAOA,mCACI,8B,oBACI,QACJ,OACA,8B,oBACI,kCACJ,OACJ,Q,wCANsB,4DACd,oCAEc,iDACQ,yB,gEAPlC,QACI,Q,oBACA,6CAQJ,Q,uCATI,sGAC2B,6C,0BAW3B,mCACI,oCAIJ,Q,8BAHQ,mCAAgC,kB,0BAJ5C,QACI,Q,oBACA,6CAMJ,Q,uCAPI,oEAC2B,0C,0BAQ3B,QACI,iBACI,Q,oBACJ,OACA,Q,oBACJ,Q,mDAHQ,sEAEJ,8G,0BAEJ,QACI,iBACI,Q,oBACJ,OACA,Q,oBACJ,Q,mDAHQ,oEAEJ,8G,0BAEJ,QACI,Q,oBAIJ,Q,+BAJI,yG,0BAKJ,mCACI,oCAIJ,Q,8BAHQ,mCAAgC,kB,0BArB5C,QACI,iCAMA,iCAMA,iCAMA,6CAMJ,Q,uCAxBmB,6CAMA,2CAMA,oEAMY,0C,uBAUnB,kBAA4D,Q,oBAE1D,Q,MAF0D,yC,uBAG5D,kBAA8D,Q,oBAE5D,Q,MAF4D,0C,wCAN1E,QACI,iBACI,iBACI,yBAGA,yBAGA,QACJ,OACA,iBACA,uBACI,oBACI,sBACJ,OACA,gCACI,qBAGI,uEAASC,WAAA,U,yBAGT,uBACA,S,qBACJ,OACA,kBACA,qBAGI,uEAASC,WAAA,U,yBAGT,uBACA,S,qBACJ,OACJ,OACJ,OACJ,OACJ,O,iCApCmB,gCAGA,iCAGP,kCAYQ,mDAGA,+CAOA,oDAGA,mD,oFAMpB,QACI,Q,oBACA,mBACI,eAAuE,QAErE,OACN,OACJ,Q,8BANI,qEAEO,yDAAoE,iC,0BAK/E,QACI,Q,oBACA,mBACK,kBAAoC,QAA2B,OAAO,OAE/E,Q,8BAJI,qEAEyC,iC,wCA9KrD,gCAQI,qFAEA,WACI,iCAcA,iCAqBA,iCAyBA,iCAMA,iCAWA,iCASA,iCA0BA,mCAwCA,kCAQA,kCAMJ,OACJ,O,qCAhLI,wCAAqC,iCAArC,CAAqC,wBAArC,CAAqC,oBAArC,CAAqC,2BAArC,CAAqC,2CAQvB,gCACK,2DAcA,mDAqBA,6DAyBA,4DAMA,uDAWA,sDASA,iEA0BA,+CAwCA,yDAQA,0DCjLpB,MAAM,GANb,cASc,KAAAC,QAAU,IAAI,IACd,KAAAF,WAAa,IAAI,IACjB,KAAAC,WAAa,IAAI,IAC3B,KAAAE,KAAO,GACP,KAAAC,eAAgB,EAChB,KAAAC,UAAW,EACF,KAAA1G,KAAO,IAEhB,eAAe2G,GACX,GAAIA,EAAM3G,OAAS,IAAiBE,uBAAwB,CACxD,GAAsB,cAAlByG,EAAMzS,KAAKqM,GACX,MAAO,UAEX,GAAsB,cAAlBoG,EAAMzS,KAAKqM,GACX,MAAO,QAGf,OAAIoG,EAAM3G,OAAS,IAAiB4G,8BACV,cAAlBD,EAAMzS,KAAKqM,GACJ,UAGXoG,EAAM3G,OAAS,IAAiB6G,0BACV,aAAlBF,EAAMzS,KAAKqM,IAAuC,cAAlBoG,EAAMzS,KAAKqM,GAI/CoG,EAAM3G,OAAS,IAAiB8G,mBACzB,QAEPH,EAAM3G,OAAS,IAAiB+G,wBACzB,UAEJ,UATQ,QAYnB,gBAAgBJ,GACZ,GAAIA,EAAM3G,OAAS,IAAiBE,uBAAwB,CACxD,GAAsB,cAAlByG,EAAMzS,KAAKqM,GACX,MAAO,CAAC,mBAAoB,YAEhC,GAAsB,cAAlBoG,EAAMzS,KAAKqM,GACX,MAAO,MAGf,GAAIoG,EAAM3G,OAAS,IAAiB6G,0BACV,YAAlBF,EAAMzS,KAAKqM,GACX,MAAO,cAGf,GAAIoG,EAAM3G,OAAS,IAAiBgH,WAChC,MAAO,OAEX,GAAIL,EAAM3G,OAAS,IAAiBiH,eAChC,MAAO,SAEX,GAAIN,EAAM3G,OAAS,IAAiB4G,6BAA8B,CAC9D,GAAsB,YAAlBD,EAAMzS,KAAKqM,GACX,MAAO,QAEX,GAAsB,cAAlBoG,EAAMzS,KAAKqM,GACX,MAAO,SAKnB,WAAWoG,GACP,OAAQA,EAAM3G,MACV,KAAK,IAAiBE,uBAClB,MACsB,cAAlByG,EAAMzS,KAAKqM,IACO,cAAlBoG,EAAMzS,KAAKqM,IACO,YAAlBoG,EAAMzS,KAAKqM,GAGnB,KAAK,IAAiBsG,yBAClB,MAAyB,YAAlBF,EAAMzS,KAAKqM,IAAsC,cAAlBoG,EAAMzS,KAAKqM,GACrD,KAAK,IAAiBqG,6BAClB,MAAyB,cAAlBD,EAAMzS,KAAKqM,IAAwC,YAAlBoG,EAAMzS,KAAKqM,GACvD,KAAK,IAAiByG,WACtB,KAAK,IAAiBC,eAClB,OAAO,EACX,QACI,OAAO,GAInB,eAAeN,GACX,IACKA,EAAM3G,OAAS,IAAiBkH,mBAC7BP,EAAM3G,OAAS,IAAiB4G,+BACpC/S,KAAKsB,MAAM6D,aAEX,OAAOnF,KAAKsB,MAAM6D,aAAa9B,KAAK+B,GAAKA,EAAE1D,KAAOoR,EAAMzS,KAAKgF,eAIrE,WAAWyN,GACP,GAAIA,EAAM3G,OAAS,IAAiB6G,0BAA4BhT,KAAKsB,MAAMsG,SACvE,OAAO5H,KAAKsB,MAAMsG,SAASvE,KAAKyN,GAAKA,EAAEpP,KAAOoR,EAAMzS,KAAKmR,WAIjE,kBAAkBsB,GACd,MAAMxN,EAAU,IAAIC,IACd+N,EAA6BR,EAAMzS,KAAKkT,aAC9C,IAAK,MAAM9R,KAAQzB,KAAKsB,MAAMC,MAC1B,IAAK,MAAMgD,KAAQ9C,EAAKlB,MACpB,GAAI+S,EAAiB3N,SAASpB,EAAK7C,IAAK,CACpC,MAAMkE,EAAQN,EAAQO,IAAIpE,EAAKqC,eAAegC,MACjC,MAATF,EACAN,EAAQS,IAAItE,EAAKqC,eAAegC,KAAMF,EAAQ,GAE9CN,EAAQS,IAAItE,EAAKqC,eAAegC,KAAM,GAKtD,OAAOE,MAAMC,KAAKX,EAAQvD,WAAWjB,IAAI,EAAEgF,EAAM7D,OAAiB6D,OAAM7D,cAG5E,gBAAgBP,GACZ,OAAO1B,KAAKsB,MAAMkS,cAAcnQ,KAAKmF,GAAKA,EAAE9G,KAAOA,GAGvD,QAAQoR,GACJ,MAAM,cAAEW,GAAkBX,EAC1B,GAAIW,EACA,MAAO,GAAGA,EAAcC,aAAaD,EAAcE,WAChD,CACH,MAAMC,EAAW5T,KAAKsB,MAAMsS,SAC5B,GAAIA,EACA,MAAO,GAAGA,EAASF,aAAaE,EAASD,WAGjD,MAAO,GAGX,iBACI3T,KAAK0S,QAAQnJ,KAAK,CAAEoJ,KAAM3S,KAAK2S,KAAMkB,UAAW7T,KAAK4S,gBACrD5S,KAAK2S,KAAO,GACZ3S,KAAK4S,eAAgB,G,uCAhJhB,K,wBAAA,GAAqB,omDDhBlC,aAAI,Q,oBAAuC,OAC3C,gBACI,+BACI,gBACI,qBAAU,mDAA4C,OACtD,mBAAqD,+BAAS,EAAAkB,mBAC1D,Q,oBACJ,OACJ,OACA,iBACI,gCACI,mBAAmC,4DAAnC,OACA,iBAAO,S,qBAAyC,OACpD,OACA,yBAGA,yBAGJ,OACJ,OACA,yCAmLA,iCACI,kBACI,S,qBACJ,OACJ,OACJ,Q,MA9MI,+CACoB,oCACqC,4BAEvC,+BACwB,iCAC9B,mDAKmC,wCAC5B,kDAEJ,qCAGA,sCAMO,kCAkLF,0BAAe,8BAAf,CAAe,eAE3B,kE,+vCE1MR,qBCOG,MAAMC,GAGT,oBACI,OAAQ/T,KAAK8E,OACT,IAAK,aACD,MAAO,UACX,IAAK,UACD,MAAO,UACX,IAAK,WACL,IAAK,YACD,MAAO,U,sBClBnB,qB,uCDOSiP,K,wBAAAA,GAA0B,wMDRvC,qB,oBACI,4BACA,Q,6CACJ,Q,MAHU,8CAA2C,6BACjB,yCAChC,qD,yGGMG,MAAMC,GAGT,oBACI,OAAQhU,KAAK8E,OACT,IAAK,UACD,MAAO,UACX,IAAK,UACD,MAAO,UACX,IAAK,SACD,MAAO,U,0BCdX,QAA4C,QAA4B,Q,oBAA5B,8C,0BAuB5C,8B,oBACI,QACJ,Q,8BAFkB,+CACd,uC,0BAEJ,8B,oBACI,QACJ,Q,8BAFkB,8CACd,gC,0BAEJ,8B,oBACI,6BACJ,Q,8BAFkB,gDACG,kC,wCAGzB,iBACI,oBAAuC,uEAASmP,aAAA,UAC5C,Q,oBACJ,OACJ,O,MAFQ,uD,0BA1BZ,QACI,gBACI,qBACA,Q,oBACA,iBACA,mCACJ,OACA,gBACI,8B,oBACI,S,sBACJ,OACA,+B,qBACI,S,0BACJ,OACA,sCAGA,sCAGA,sCAGJ,OACA,wBAKJ,Q,kCA1BQ,0DAEwB,8BAGN,qDACd,uDAEc,uDACd,yDAE4D,qCAGD,8BAGE,4CAI3C,0C,wCAO1B,oBAGI,uDAAS,EAAAC,cAAA,kBAET,Q,oBACJ,O,MADI,wD,uCDzCCF,K,wBAAAA,GAAyB,uMDRtC,qB,oBACI,4BACA,Q,6CACJ,Q,MAHU,8CAA2C,6BACjB,yCAChC,qD,yKE6DoB,QACI,sBACA,Q,iEAIJ,Q,8BAJI,8F,uBAMA,sBACA,Q,2BAAA,wD,wCAhBZ,QACI,oBAII,qEAAS,EAAAG,uBAAA,oCAET,kCAOA,0CAIJ,OACJ,O,sCAZuB,qCAAiC,e,0BApBpE,iBACI,2BAOA,uBACI,oBACI,sBACJ,OACA,+BACI,gCAoBJ,OACJ,OACJ,Q,oBAhCS,8DAUuC,6CC9C7C,MAAM,GANb,cASc,KAAAD,cAAgB,IAAI,IACpB,KAAAC,uBAAyB,IAAI,IAC7B,KAAAF,aAAe,IAAI,IAE7B,kBAAkBjM,GACd,QAASA,GAAU/G,OAAOmT,KAAKpM,EAAOqM,UAAUjN,OAAS,EAG7D,kBACI,OAAKpH,KAAK6H,QAGH7H,KAAK6H,QAAQpB,WAAWvE,OAAO0E,GAAW,YAANA,GAFhC,I,wCCLX,oBAMI,wFAEA,Q,6CAEJ,O,qCAFI,2H,wCAGJ,oBAGI,iEAA2B,gCAE3B,Q,oBACJ,O,MADI,oE,wCAUI,QACI,oBAAkD,yEAC9C,sBACA,Q,oBACJ,OACA,iBACJ,O,MAHQ,sD,uBAYJ,QACI,Q,oBACJ,Q,MADI,iE,uBAGA,Q,0BAAA,6C,wCAZR,oBAKI,sFAEA,sBACA,iCAGA,0CAGJ,O,+CANmB,kDAAsC,e,uCDjD5D,K,wBAAA,GAAyB,+6BDVtC,gBACI,gBACI,cACI,Q,oBACA,gCACJ,OACA,gBACI,oCACJ,OACJ,OACA,gBACI,+BACJ,OACA,mCA8BA,wBAoCJ,Q,MA5EY,gDACe,6CAGU,sCAIT,kCAAmB,+BAEV,0CA8BP,mD,8cE0BV,oBAKI,0FAEA,sBACA,Q,iEAIJ,O,4BAJI,8F,0BAVR,QACI,iBACA,4B,gBAaJ,Q,qBAZ8B,iD,wCAtE9C,yBACI,sBACI,gBACI,4B,gBACA,kCACI,mBAEI,mE,oBAGA,qBACJ,OACJ,OACJ,OACJ,OAEA,uBACI,kCACA,2BAWA,2BAOA,oBAAgC,+DAC5B,S,qBACJ,OACA,wBACI,oBACI,uBACJ,OACA,gCACI,iCAOA,4BAgBA,iC,iBAgBA,kBACA,qBAAkD,4FAC9C,uBACA,S,qBACJ,OACJ,OACJ,OACJ,OACJ,O,2CAxF6B,4CACM,8BAIf,6DAYP,+HAWA,6FAKoD,iDACrD,wDAOmB,wDAWV,wDAYU,uEAmBX,wE,0BAyBA,aACI,aAAI,QAAqB,OACzB,aAAI,Q,kBAAiC,OACrC,aAAI,Q,yBAAsD,OAC1D,aAAI,S,0BAAuD,OAC/D,Q,uCAJQ,4BACA,sCACA,iDACA,oD,uBA0BJ,aACI,Q,oBACJ,Q,MADI,0D,uBAGJ,aACI,Q,oBACJ,Q,MADI,yD,wCAOZ,oCAII,2EAAuC,uFAAvC,CAAuC,oEAG1C,O,2CALG,oCAAmC,c,0BAH3C,QACI,2CAQJ,Q,yBAP4B,oC,wCAQ5B,QACI,kCAGI,8GACH,OACL,O,0CAJQ,8BAA2B,Y,wCAvE/C,cACI,iBACI,iBACI,6BAIA,aAAI,Q,oBAAqC,OACzC,mBACI,gBACI,aACI,cAAI,S,qBAAsC,OAC1C,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAAkC,OACtC,cAAI,S,qBAAmC,OAC3C,OACJ,OACA,iBACI,0BAMJ,OACJ,OAEA,gCAGI,8DAA2B,8DAA3B,CAA2B,+D,iBAG9B,OACL,OACA,kBACI,2CAGI,6EACH,OACD,kBACI,kBACI,S,qBACJ,OACA,kBACI,kBACI,iCACA,uBAGA,oCACA,uBAGA,oCACJ,OACJ,OACJ,OACA,iCAUA,kCAOJ,OACJ,OACJ,O,gCA1EgB,wBAAe,iDAGf,6CAIY,+CACA,2CACA,2CACA,4CAIY,qCAUxB,wBAAe,kCASf,kDAAmC,oCAM/B,mDAIwB,oCACf,sEAGkB,0CAClB,qEAGkB,yCAIpB,mDAUuB,wCCvH3C,MAAM,WACD,IAqBR,YACI0N,EACAC,EACArE,EACQ9N,EACEzC,EACFqL,EACAD,EACAyJ,GAER1K,MAAMyK,EAAOD,EAAQpE,EAAqBvQ,GANlC,KAAAyC,iBACE,KAAAzC,cACF,KAAAqL,sBACA,KAAAD,eACA,KAAAyJ,yBA3BZ,KAAAC,WAAa,IAAI,IAAU,IAG3B,KAAAC,aAAe,IAAItK,GAAA,EAGF,KAAAuK,cAAgB,CAC7B,cACA,mBACA,oBACA,iBACA,mBACA,UACA,qBACA,YACA,YACA,YACA,8BAeJ,WACI3U,KAAK4U,OACL5U,KAAK6U,QAAQ3J,KAAK,aAAK,IAAIzI,UAAUnB,IACb,cAAhBA,EAAMwD,OACN9E,KAAKsU,OAAOQ,SAAS,CAAC,KAAM,UAAW,CAAEC,WAAY/U,KAAKuU,UAGlEvU,KAAKgF,aAAehF,KAAKgV,qBAAqB,SAC9ChV,KAAK4R,sBAAwB5R,KAAKgV,qBAAqB,aACvDhV,KAAKiV,SAAWjV,KAAK0U,aAAaxJ,KAC9B,OAAAgK,GAAA,GAAU,MACV,OAAA/J,GAAA,GAAU,IACCnL,KAAKL,YAAY2B,MACnB4K,gBAAgBlM,KAAK0B,GAAI,CACtB4K,KAAM,CACFC,UAAW,IAAUC,QAG5B2I,UAAU9U,IAAO,aAAW,QAAX,EAACA,EAAKiB,aAAK,eAAEmL,QAAQlM,UAGnDP,KAAKoV,YAAcpV,KAAK6U,QAAQ3J,KAC5B,OAAApK,GAAA,GAAIQ,IACyBtB,KAAK2U,cAAchP,SAASrE,EAAMwD,OAErDxD,EAAMmF,WACNnF,EAAMmF,WAAWvE,OAAO0E,IAAM5G,KAAK2U,cAAchP,SAASiB,MAK5E,cACI5G,KAAKqV,UAGT,mBACIrV,KAAK6U,QACA3J,KACG,aAAK,GACL,OAAAC,GAAA,GAAU7J,GACNtB,KAAK+K,aAAaY,cAAcsE,GAAkC,CAC9DpE,UAAU,EACVD,OAAQ,CACJ0J,YAAahU,EAAMwD,WAKlCrC,YAGT,kBAAkBqC,GACd9E,KAAKL,YAAY2B,MAAMqL,kBAAkB3M,KAAK0B,GAAIoD,GAAOrC,UAAU,EAAGmK,6BAClE,OAAQA,aAAsB,EAAtBA,EAAwBC,YAC5B,IAAK,QACD7M,KAAKgL,oBAAoBuK,QAAQ,YAAE,uCAAwC,CAAEzQ,UAC7E9E,KAAK0U,aAAajK,OAClB,MACJ,IAAK,4BACDzK,KAAKgL,oBAAoBV,MAAMsC,EAAuBE,oBAKtE,0BAA0BxL,GACtBtB,KAAKwU,uBACA/I,0BAA0B,CACvB9J,QAASL,EAAMI,GACf+E,WAAYnF,EAAMmF,WAClB4E,aAAa,EACbR,QAAS,YAAE,8CACXS,MAAO,IAEV7I,YAGT,wBACIzC,KAAKL,YAAY2B,MACZqL,kBAAkB3M,KAAK0B,GAAI,aAC3Be,UAAU,EAAGmK,6BACV,OAAQA,aAAsB,EAAtBA,EAAwBC,YAC5B,IAAK,QACD7M,KAAKsU,OAAOQ,SAAS,CAAC,YAAa,CAAEC,WAAY/U,KAAKuU,QACtD,MACJ,IAAK,4BACDvU,KAAKgL,oBAAoBV,MAAMsC,EAAuBE,oBAK1E,mBAAmB0I,GACfxV,KAAKL,YAAY2B,MACZmU,wBAAwB,CACrB/T,GAAI1B,KAAK0B,GACTsD,aAAcwQ,IAEjB/S,UAAU,KACPzC,KAAKgL,oBAAoBuK,QAAQ,YAAE,gCAAiC,CAAEG,OAAQ,YAI1F,qBAAqBC,GACjB,OAAKA,EAGE1U,OAAOC,OAAOyU,GAChBzT,OAAOiE,GAAe,iBAARA,GACdjE,OAAOT,KAAUA,GAJX,GAOf,cAAcoG,GACV7H,KAAKL,YAAY2B,MAAM4S,cAAcrM,EAAQnG,IAAIe,UAAU,EAAGyR,oBAC1D,OAAQA,EAAcrH,YAClB,IAAK,UAC2B,YAAxBqH,EAAcpP,MACd9E,KAAKgL,oBAAoBuK,QAAQ,YAAE,iCAEnCvV,KAAKgL,oBAAoBV,MAAM,YAAE,+BAErCtK,KAAKL,YAAY2B,MAAMsU,SAAS5V,KAAK0B,IAAIc,QAAQC,YACjDzC,KAAK0U,aAAajK,OAClB,MACJ,IAAK,4BACL,IAAK,8BACL,IAAK,qBACDzK,KAAKgL,oBAAoBV,MAAM4J,EAAcrJ,YAK7D,wBAAuB,QAAEhD,EAAO,MAAE/C,IAC9B9E,KAAKL,YAAY2B,MACZuU,yBAAyBhO,EAAQnG,GAAIoD,GACrCrC,UAAU,EAAGoT,+BACV,OAAQA,EAAyBhJ,YAC7B,IAAK,UACD7M,KAAKgL,oBAAoBuK,QAAQ,YAAE,+CAAgD,CAC/EzQ,UAEJ9E,KAAKL,YAAY2B,MAAMsU,SAAS5V,KAAK0B,IAAIc,QAAQC,YACjDzC,KAAK0U,aAAajK,OAClB,MACJ,IAAK,8BACDzK,KAAKgL,oBAAoBV,MAAMuL,EAAyBhL,YAM5E,kBAAkBvJ,GAId,OAH0BA,EAAMC,MAC3BJ,OAAO,CAACZ,EAAOkB,IAAS,IAAIlB,KAAUkB,EAAKlB,OAAQ,IACnDuV,MAAMvR,KAAUA,EAAKC,eAGrBxE,KAAK+V,0BAA0BzU,IACS,IAAzCtB,KAAKgW,yBAAyB1U,KAC7BA,EAAMmF,WAAWd,SAAS,YACvBrE,EAAMmF,WAAWd,SAAS,qBAC1BrE,EAAMmF,WAAWd,SAAS,cAItC,0BAA0BrE,GACtB,OAAO,EAAIA,EAAMkS,cAActR,OAAOsG,IAAMA,EAAEyN,WAAW7O,OAG7D,iCAAiC9F,GAC7B,OAAO,SAAAsP,QAAA,CACHtP,EAAMkS,cAActR,OAAOsG,IAAMA,EAAEyN,WACnC,eAIR,yBAAyB3U,G,QACrB,MAEM4U,EAAmF,QAAtE,EAAiB,QAAjB,EAAG5U,EAAMsG,gBAAQ,eAAE1F,OAFd4O,GACR,cAAZA,EAAEhM,OAAqC,aAAZgM,EAAEhM,OAAoC,UAAZgM,EAAEhM,OACEhE,IAAIgQ,GAAK,OAAAqF,QAAA,CAAKrF,EAAG,CAAC,mBAAU,QAAK,GACxFsF,EAAgB,SAAAxF,QAAA,CAAQsF,EAAe,UAC7C,OAAO5U,EAAM+U,aAAeD,EAGhC,iBAAiB9U,GACbtB,KAAK+K,aACAY,cAAc,EAAiC,CAC5CE,UAAU,EACVD,OAAQ,CACJ0K,kBAAmBtW,KAAKgW,yBAAyB1U,GACjDiV,aAAcjV,EAAMiV,gBAG3BrL,KACG,OAAAC,GAAA,GAAU3J,GACFA,EACOxB,KAAKL,YAAY2B,MAAMkV,wBAAwB,CAClD7U,QAAS3B,KAAK0B,GACd3B,cAAeyB,EAAOzB,cACtBF,OAAQ2B,EAAO3B,OACfwU,SAAU7S,EAAO6S,UAAY,KAG1B,MAGf,OAAAlJ,GAAA,GAAU,EAAGqL,8BACT,OAAQA,EAAwB3J,YAC5B,IAAK,QAED,OADA7M,KAAKgL,oBAAoBuK,QAAQ,YAAE,uCAC5BvV,KAAKwU,uBAAuBiC,8BAC/BnV,EAAMI,GACNJ,EAAMmF,YAEd,IAAK,0BAED,OADAzG,KAAKgL,oBAAoBV,MAAMkM,EAAwB3L,SAChD,KACX,QACI,OAAO,SAItBpI,UAAUjB,IACHA,GACAxB,KAAK0W,aAAa,CAAElV,aAKpC,eACIxB,KAAK6U,QACA3J,KACG,aAAK,GACL,OAAAC,GAAA,GAAU7J,GACCtB,KAAK+K,aAAaY,cAAc,EAA6B,CAChEG,KAAM,KACNF,OAAQ,CACJtK,YAIZ,OAAA6J,GAAA,GAAUwL,GACFA,EACO3W,KAAKL,YAAY2B,MAAMsV,kBAAkBD,GAEzC,OAAAE,GAAA,QAAGrP,IAGlB,OAAA2D,GAAA,GAAU3J,GAAUxB,KAAK0W,aAAalV,GAAQ0J,KAAK,OAAA4L,GAAA,GAAMtV,MAE5DiB,UAAUjB,IACP,GAAIA,EACA,OAAQA,EAAOuV,sBAAsBlK,YACjC,IAAK,cACD7M,KAAKgL,oBAAoBuK,QAAQ,YAAE,qCACnC,MACJ,IAAK,+BACL,IAAK,+BACL,IAAK,6BACDvV,KAAKgL,oBAAoBV,MAAM9I,EAAOuV,sBAAsBlM,YAOpF,sBAAsBnJ,EAAYoD,GAC9B9E,KAAKL,YAAY2B,MACZ0V,6BAA6BtV,EAAIoD,GACjCoG,KAAK,OAAAC,GAAA,GAAU3J,GAAUxB,KAAK0W,aAAalV,KAC3CiB,UAAU,KACPzC,KAAKgL,oBAAoBuK,QAAQ,YAAE,6CAI/C,eAAejU,GACX,MAAM2V,EAAejX,KAAKkX,wBAAwB5V,GAC9B,sBAAhBA,EAAMwD,QAAkD,IAAjBxD,EAAMQ,QAAoBmV,EAGjEjX,KAAKmX,YAAY7V,GAFjBtB,KAAKoX,YAAY9V,GAMzB,aAAa0G,GACThI,KAAK+K,aACAY,cAAc+F,GAA6B,CACxC5F,KAAM,KACNF,OAAQ,CACJ5D,YAGPkD,KACG,OAAAC,GAAA,GAAUpL,GACFA,EACOC,KAAKL,YAAY2B,MAAM2S,aAC1B,CACIlU,gBACA2B,GAAIsG,EAAOtG,IAEf1B,KAAK0B,IAGF,OAAAmV,GAAA,QAAGrP,KAKrB/E,UAAUjB,IACHA,GACAxB,KAAKgL,oBAAoBuK,QAAQ,YAAE,kCAKnD,QAAQ8B,GACJ,MAAM,KAAE1E,EAAI,SAAEkB,GAAawD,EAC3BrX,KAAKL,YAAY2B,MACZwS,eAAe,CACZpS,GAAI1B,KAAK0B,GACTiR,OACAkB,aAEH3I,KAAK,OAAAC,GAAA,GAAU3J,GAAUxB,KAAK0W,aAAalV,KAC3CiB,UAAUjB,IACPxB,KAAKgL,oBAAoBuK,QAAQ,YAAE,gCAAiC,CAChEG,OAAQ,WAKxB,WAAW5C,GACP9S,KAAK+K,aACAY,cAAc,IAAyB,CACpCE,UAAU,EACVD,OAAQ,CACJ0L,wBAAwB,EACxB3E,KAAMG,EAAMzS,KAAKsS,KACjBC,eAAgBE,EAAMe,YAG7B3I,KACG,OAAAC,GAAA,GAAU3J,GACFA,EACOxB,KAAKL,YAAY2B,MAAMiW,gBAAgB,CAC1CC,OAAQ1E,EAAMpR,GACdmS,UAAWrS,EAAOiW,UAClB9E,KAAMnR,EAAOmR,OAGV,OAIlBlQ,UAAUjB,IACPxB,KAAK0U,aAAajK,OAClBzK,KAAKgL,oBAAoBuK,QAAQ,YAAE,gCAAiC,CAChEG,OAAQ,WAKxB,WAAW5C,GACP,OAAO9S,KAAK+K,aACP2M,OAAO,CACJC,MAAO,YAAE,8BACTC,KAAM9E,EAAMzS,KAAKsS,KACjBkF,QAAS,CACL,CAAE1L,KAAM,YAAa2L,MAAO,YAAE,kBAC9B,CAAE3L,KAAM,SAAU2L,MAAO,YAAE,iBAAkBC,aAAa,MAGjE7M,KAAK,OAAAC,GAAA,GAAU6M,GAAQA,EAAMhY,KAAKL,YAAY2B,MAAM2W,gBAAgBnF,EAAMpR,IAAM,OAChFe,UAAU,KACPzC,KAAK0U,aAAajK,OAClBzK,KAAKgL,oBAAoBuK,QAAQ,YAAE,gCAAiC,CAChEG,OAAQ,WAKxB,wBAAwBpU,G,MACpB,SAAuB,QAAf,EAACA,EAAMsG,gBAAQ,eAAEvE,KAAKyN,GAAiB,YAAZA,EAAEhM,QAGjC,YAAYxD,GAChBtB,KAAK+K,aACAY,cAAc,EAA4B,CACvCG,KAAM,KACNF,OAAQ,CACJtK,WAGP4J,KACG,OAAAC,GAAA,GAAUwL,GACFA,EACO3W,KAAKL,YAAY2B,MAAM8V,YAAYT,GAEnC,OAAAE,GAAA,QAAGrP,IAGlB,OAAA2D,GAAA,GAAU3J,GAAUxB,KAAK0W,aAAalV,KAEzCiB,UAAUjB,IACHA,GACAxB,KAAKgL,oBAAoBuK,QAAQ,YAAE,oCAK3C,YAAYjU,GAChBtB,KAAK+K,aACAY,cAAc,GAA4B,CACvCG,KAAM,KACNF,OAAQ,CACJtK,WAGP4J,KACG,OAAAC,GAAA,GAAUwL,I,MACN,IAAKA,EACD,OAAO,OAAAE,GAAA,QAAGrP,GAGd,MAAM0Q,EAEF,GAeJ,OAdIvB,EAAM3O,OAAOzG,MAAM6F,QACnB8Q,EAAWrI,KACP7P,KAAKL,YAAY2B,MACZ6V,YAAYR,EAAM3O,QAClBkD,KAAK,OAAApK,GAAA,GAAIkX,GAAOA,EAAIb,gBAGX,QAAtB,EAAIR,EAAM9F,OAAOtP,aAAK,eAAE6F,SACpB8Q,EAAWrI,KACP7P,KAAKL,YAAY2B,MACZ8V,YAAYT,EAAM9F,QAClB3F,KAAK,OAAApK,GAAA,GAAIkX,GAAOA,EAAIZ,eAG1B,OAAAe,GAAA,MAASD,MAGvBzV,UAAUjB,IACP,GAAIA,EACA,OAAQA,EAAOqL,YACX,IAAK,QACD7M,KAAK0W,aAAalV,GAAQiB,YAC1BzC,KAAKgL,oBAAoBuK,QAAQ,YAAE,kCACnC,MACJ,IAAK,SACDvV,KAAK0W,aAAalV,GAAQiB,YACL,WAAjBjB,EAAOsD,MACP9E,KAAKgL,oBAAoBV,MAAM,YAAE,8BAEjCtK,KAAKgL,oBAAoBuK,QAAQ,YAAE,+BAEvC,MACJ,IAAK,wBACL,IAAK,qBACL,IAAK,4BACL,IAAK,yBACL,IAAK,+BACL,IAAK,uBACL,IAAK,uBACL,IAAK,4BACL,IAAK,wBACL,IAAK,6BACDvV,KAAKgL,oBAAoBV,MAAM9I,EAAOqJ,YAOtD,aAAarJ,GAEjB,OADAxB,KAAK0U,aAAajK,OACdjJ,EACOxB,KAAKL,YAAY2B,MAAMsU,SAAS5V,KAAK0B,IAAIc,QAEzC,OAAAqU,GAAA,QAAGrP,GAIR,cAAckO,K,uCAtgBf,IAAoB,mF,wBAApB,GAAoB,27CD3CjC,oC,gBA6FA,yB,uBA7FiB,iCA6FX,2C,gVE1FM0C,G,iDCHgB,Q,0BAAA,8C,0BAWpB,mBAII,Q,yBAEJ,Q,mCAJI,kBAEA,uF,wCARZ,cACA,+BACI,gBAAO,Q,oBAA2C,OAClD,mBAAiC,2EAC7B,0BAOJ,OACJ,OACI,kBAAiC,Q,oBAAoD,OACrF,sBAAU,sEAAgE,OAC9E,O,uBAbW,kDAC0B,0CAEL,yCAQK,2DACvB,sC,wCAGV,oBAAkC,yDAAmB,Q,oBAAiC,OACtF,oBAAsB,yDAClB,Q,oBACJ,O,uBAHqD,wCACZ,iEACrC,mDDvBR,SAAYA,GACR,IAAAC,OAAA,YACA,IAAAC,QAAA,aACA,IAAAC,eAAA,oBACA,IAAAC,OAAA,YAJJ,CAAYJ,QAAmB,KAiCxB,MAAMK,GAWT,sBACI,OAAOzY,KAAKsB,MAAM+U,aAAerW,KAAK0Y,qBAG1C,WACI1Y,KAAK2Y,WAAa3Y,KAAK4Y,iBAAiBjG,MAAQ,GAGpD,SACI3S,KAAKU,YAAY,CACbc,OAAQ4W,GAAoBI,SAIpC,SACQ,EAAIxY,KAAK6Y,gBACT7Y,KAAKU,YAAY,CACbc,OAAQ4W,GAAoBE,UAEzBtY,KAAK6Y,gBAAkB,EAC9B7Y,KAAKU,YAAY,CACbc,OAAQ4W,GAAoBC,OAE5BS,gBAAiB9Y,KAAK+Q,gBAAiBrP,GACvCiX,WAAY3Y,KAAK2Y,aAGrB3Y,KAAKU,YAAY,CACbc,OAAQ4W,GAAoBG,kB,uCAvC/BE,K,wBAAAA,GAAgC,ogBCpC7C,+BACA,4BAEA,eACI,Q,oBACA,iBAAQ,Q,yBAA0D,OACtE,OACA,wBAgBA,gC,MAtBiB,8BAAe,iDAG5B,uEACQ,+DAEN,2C,mNCPN,yBACI,sBACI,gBACI,4B,gBACA,kCACJ,OACJ,OAEA,uBACI,mBAAkC,yFAC9B,Q,oBACJ,OACJ,OACJ,O,gCAV6B,2CACM,8BAMvB,6D,uBAgBY,aAAyC,Q,oBAAwC,Q,MAAxC,gD,0BAYrC,iB,sDAEI,mD,0DAyBJ,QACI,sCAMJ,Q,mDALQ,8BAA2B,2EAA3B,CAA2B,e,0BAHvC,gBACI,iCAQJ,Q,qBAR0C,iD,wCAlC9C,gBAMI,gBACI,wBAIJ,OACA,gBAA8B,QAA8B,OAC5D,gBAA6B,QAA6B,OAC1D,gBACI,Q,yBACA,kB,qBACI,S,0BACJ,OACJ,OACA,iBACI,oBAII,2GAJJ,OAMA,+BACA,mCAIJ,OACA,wBAUA,iBACI,S,0BACA,kB,qBACI,S,0BACJ,OACJ,OACJ,O,mDA9CI,oCAA0C,gCAKjC,qCAIqB,oCACD,mCAEzB,mEACuB,oDACnB,6DAOA,iCAGc,uBAAa,uBAE3B,uBAAa,sBAIhB,oDAWD,oEACuB,oDACnB,8D,0BASJ,iB,sDAEI,kD,0BAuBJ,QACI,sCAMJ,Q,mDALQ,8BAA2B,yEAA3B,CAA2B,e,0BAHvC,gBACI,iCAQJ,Q,qBAR0C,iD,wCA9B9C,gBAII,gBACI,wBAIJ,OACA,gBAA8B,QAAkC,OAChE,gBAA6B,QAAmB,OAChD,gBACI,Q,yBACA,kB,qBACI,S,0BACJ,OACJ,OACA,iBACI,oBAII,gHAJJ,OAMA,qBAA4B,oFACxB,uBACJ,OACJ,OACA,wBAUA,iBACI,S,oBAIA,kB,qBACI,S,oBAIJ,OACJ,OACJ,O,mDA7Ca,oCAIqB,mCACD,oBAEzB,+DACuB,oDACnB,yDAOA,iCAOH,oDAWD,+EAIuB,oDACnB,yE,sBAYR,a,0BALJ,gBACI,gBAA+C,QAA2B,OAC1E,gBAA6B,QAAmB,OAChD,gBACA,aACA,sBACA,gBACI,Q,0BACA,kB,qBACI,S,0BACJ,OACJ,OACJ,Q,gDAXmD,4BAClB,oBAGxB,oDAED,+DACuB,mDACnB,0D,sBAiBR,a,0BAEI,QACI,Q,yBACA,iB,oBACI,Q,yBACJ,OACJ,Q,mCAJI,8DACuB,kDACnB,wD,wCAlBhB,gBAII,gBACI,QACA,oBAA4B,oFACxB,sBACJ,OACJ,OACA,gBAA6B,QAAmB,OAChD,gBACA,aACA,sBACA,iBACI,kCAMJ,OACJ,O,sCAjBQ,oCAKyB,oBAGxB,oDAEc,8C,sBAYnB,a,0BAmBI,iB,4CAEI,qC,0BAHR,iBACI,wBAKA,cACI,oBAAoB,QAA+C,OACnE,gBAAO,QAAgC,OACvC,cACI,Q,yBAIJ,OACJ,OACJ,Q,mCAdS,2DAKmB,0DACb,2CAEH,iG,0BAOZ,QACI,sCAOJ,Q,mCANQ,mDAAoC,gBAApC,CAAoC,kDAApC,CAAoC,e,wCAtBhD,gCACI,kCAAkC,qFAClC,OACA,yBAiBA,iCASA,oBAGI,oGAEA,Q,oBACJ,OACJ,O,wBAjCU,8CAiBgC,gDAWlC,sFAGA,2D,6EAOR,gCACI,kBAAkC,gGAC9B,4B,oBACK,mBACH,OACF,4B,oBACK,mBACH,OACF,4B,oBACK,iCAKJ,OACD,6B,qBAMK,oBAKH,OACF,6B,qBACK,gCACI,oBAK+B,OACvC,OACD,6B,qBACK,oBACH,OACF,qBAQI,S,qBACJ,OACJ,OACJ,O,uDAjDU,0CACc,sDAGA,qDAGA,gDAER,4CAMJ,oIAWY,mDASA,0DAKZ,sIAMA,yD,0BAOZ,gCACI,8B,gBAKJ,Q,qBAJQ,gDAAiC,qDAAjC,CAAiC,uC,0BAQzC,gCACI,8B,gBAKJ,Q,qBAJQ,+CAAgC,qDAAhC,CAAgC,uC,gEAepC,aACI,Q,oBAIJ,Q,qBAJI,wJ,0BAKJ,aACI,Q,oBAIJ,Q,qBAJI,2K,0BAKJ,aACI,Q,oBAIJ,Q,qBAJI,iK,uBAKJ,aACI,Q,oBACJ,Q,MADI,gF,uBAEJ,aACI,Q,oBACJ,Q,MADI,+E,wCA7T5B,cACI,gBACI,gBACI,kBACI,gBACI,aACI,aACA,aAAI,Q,oBAAsC,OAC1C,cAAI,S,qBAAqC,OACzC,cAAI,S,qBAAoC,OACxC,cAAI,S,qBAAkC,OACtC,uBACA,cAAI,S,qBAA+B,OACvC,OACJ,OACA,iBACI,yBAkDA,yBAoDA,0BAaA,yBAuBA,iBACI,iBAAkC,S,qBAAkC,OACpE,iBAA6B,SAAkD,OAC/E,iBACA,uBACA,iBACI,S,0BACA,kB,qBACI,S,0BACJ,OACJ,OACJ,OACJ,OACJ,OAEA,iBAAgB,S,qBAAuC,OACvD,yBACI,+BACI,+BAAqB,S,qBAA2C,OAChE,2CAqCJ,OAEA,+BACI,+BAAqB,S,qBAAuC,OAC5D,6CAmDJ,OACA,+BACI,+BAAqB,S,qBAA+C,OACpE,2CAOJ,OACA,+BACI,+BAAqB,S,qBAA8C,OACnE,2CAOJ,OACJ,OACJ,OACA,kBACI,kBACI,kBACI,S,qBACJ,OACA,kBACI,cACI,uBAMA,uBAMA,uBAMA,uBAGA,uBAGJ,OACJ,OACA,kBACI,oBAAiC,S,qBAA8B,OAC/D,uBAAU,gEAAoD,OAC9D,mCACI,oBAAmC,+EAAnC,OACA,iBAAO,S,qBAA2D,OACtE,OACJ,OACA,kBACI,qBAGI,mFAEA,S,qBACJ,OACJ,OACJ,OACJ,OACJ,OACJ,O,gCA9U4B,8CACA,8CACA,6CACA,2CACC,oDACD,wCAKa,gCAkDK,qCAAe,0CAmDG,qCAelB,sDAsBY,2CACL,4HAExB,oDAED,mEACuB,oDACnB,4DAOJ,gDAGa,oDAyCA,gDAsDA,wDAUA,uDAcrB,+DAIS,+FAMA,+GAMA,mGAMA,iDAGA,gDAMwB,uCACvB,+BAE6B,8CAC5B,oEAMP,gDAGA,2DCzSjB,MAAM,WACD,IA4BR,YACInE,EACAC,EACArE,EACQ9N,EACEzC,EACFqL,EACAD,EACAyJ,GAER1K,MAAMyK,EAAOD,EAAQpE,EAAqBvQ,GANlC,KAAAyC,iBACE,KAAAzC,cACF,KAAAqL,sBACA,KAAAD,eACA,KAAAyJ,yBAhCZ,KAAAC,WAAa,IAAI,IAAU,IAM3B,KAAAmE,iBAAoC,CAChCG,QAAQ,EACRpX,QAAS,GACTqX,SAAU,GACVC,iBAAkB,GAClB1Q,WAAY,GACZoK,KAAM,GACNuG,sBAAuB,GACvBC,qBAAsB,IAK1B,KAAAxG,KAAO,GACP,KAAAyG,qBAAsB,EAEd,KAAAC,cAAgB,IAAI9T,IAe5B,iBACI,MAAM+T,EAAuBC,GACJ,gBAArBA,EAAM1M,WAA+B0M,EAAM9Y,MAAQ,EACvD,OAAQT,KAAK4Y,iBAAiBI,UAAY,IACrClY,IAAI0Y,IACD,MAAMC,EAAczZ,KAAKqZ,cAAcxT,IAAI2T,EAAIE,kBAC/C,GAAID,EACA,OAAO,OAAP,wBACOA,GAAW,CACdF,MAAOD,EAAoBG,EAAYF,OACvCI,aAAcL,EAAoBG,EAAYE,cAC9C1X,SAAUuX,EAAIvX,aAIzBC,OAAO,EAAA0X,oBAGhB,WACI5Z,KAAK4U,OACL5U,KAAK6Z,oBAAsB7Z,KAAKgV,qBAAqB,WACrDhV,KAAK4Y,iBAAiBjX,QAAU3B,KAAKuU,MAAMuF,SAASC,SAASlU,IAAI,MACjE7F,KAAK4R,sBAAwB5R,KAAKgV,qBAAqB,aACvDhV,KAAK6U,QAAQ3J,KAAK,OAAA8O,GAAA,GAAUha,KAAKia,WAAWxX,UAAUnB,I,wCAClDtB,KAAKka,cAAgB,IAAI,IAAU,CAC/BC,YAAa,IAAI,IAAY,GAAI,IAAWra,UAC5Csa,IAAK,IAAI,IAAY,IACrBb,MAAO,IAAI,IAAY,EAAG,IAAWzZ,UACrCua,iBAAkB,IAAI,KAAY,GAClCC,QAAS,IAAI,IAAY,GACzBC,eAAgB,IAAI,IAAY,MAE/Bva,KAAKwa,sBACNxa,KAAKwa,oBAAsB,IAAI,IAAU,CACrCC,SAAU,IAAI,IAAiC,QAAtB,EAACnZ,EAAMoZ,uBAAe,eAAED,UACjDE,QAAS,IAAI,IAAiC,QAAtB,EAACrZ,EAAMoZ,uBAAe,eAAEC,SAChDC,YAAa,IAAI,IAAiC,QAAtB,EAACtZ,EAAMoZ,uBAAe,eAAEE,aACpDC,YAAa,IAAI,IAAiC,QAAtB,EAACvZ,EAAMoZ,uBAAe,eAAEG,aACpDC,KAAM,IAAI,IAAiC,QAAtB,EAACxZ,EAAMoZ,uBAAe,eAAEI,MAC7CC,SAAU,IAAI,IAAiC,QAAtB,EAACzZ,EAAMoZ,uBAAe,eAAEK,UACjDC,WAAY,IAAI,IAAiC,QAAtB,EAAC1Z,EAAMoZ,uBAAe,eAAEM,YACnDC,YAAa,IAAI,IAAiC,QAAtB,EAAC3Z,EAAMoZ,uBAAe,eAAEO,aACpDC,YAAa,IAAI,IAAiC,QAAtB,EAAC5Z,EAAMoZ,uBAAe,eAAEQ,gBAGvDlb,KAAKmb,qBACNnb,KAAKmb,mBAAqB,IAAI,IAAU,CACpCV,SAAU,IAAI,IAAgC,QAArB,EAACnZ,EAAM8Z,sBAAc,eAAEX,UAChDE,QAAS,IAAI,IAAgC,QAArB,EAACrZ,EAAM8Z,sBAAc,eAAET,SAC/CC,YAAa,IAAI,IAAgC,QAArB,EAACtZ,EAAM8Z,sBAAc,eAAER,aACnDC,YAAa,IAAI,IAAgC,QAArB,EAACvZ,EAAM8Z,sBAAc,eAAEP,aACnDC,KAAM,IAAI,IAAgC,QAArB,EAACxZ,EAAM8Z,sBAAc,eAAEN,MAC5CC,SAAU,IAAI,IAAgC,QAArB,EAACzZ,EAAM8Z,sBAAc,eAAEL,UAChDC,WAAY,IAAI,IAAgC,QAArB,EAAC1Z,EAAM8Z,sBAAc,eAAEJ,YAClDC,YAAa,IAAI,IAAgC,QAArB,EAAC3Z,EAAM8Z,sBAAc,eAAEH,aACnDC,YAAa,IAAI,IAAgC,QAArB,EAAC5Z,EAAM8Z,sBAAc,eAAEF,gBAG3Dlb,KAAKqb,+BAAiC,IAAI,IAAU,IACpD,IAAK,MAAM5Z,KAAQH,EAAMC,MAAO,CAC5B,MAAM+Z,EAAY,IAAI,IAAU,IAChC,IAAK,MAAM,KAAExV,KAAU9F,KAAK4R,sBACxB0J,EAAUjS,WAAWvD,EAAM,IAAI,IAAarE,EAAauD,aAAac,KAE1EwV,EAAUC,aAAarQ,KAAK,OAAA8O,GAAA,GAAUha,KAAKia,WAAWxX,UAAUhC,IAC5D,IAAI+a,EAAYxb,KAAK4Y,iBAAiBK,iBAAiB5V,KACnDlB,GAAKA,EAAEH,cAAgBP,EAAKC,IAE3B8Z,IACDA,EAAY,CACRxZ,YAAaP,EAAKC,GAClBO,SAAUR,EAAKQ,UAEnBjC,KAAK4Y,iBAAiBK,iBAAiBpJ,KAAK2L,IAE5Cxb,KAAK4R,sBAAsBxK,SAC3BoU,EAAUxW,aAAevE,KAGjCT,KAAKqb,+BAA+BxL,KAAKyL,MAGjDtb,KAAKyb,6BAA+B,IAAI,IAAU,IAClDzb,KAAK0b,wBAA0B,IAAI,IAAU,IAC7C,IAAK,MAAMnV,KAAevG,KAAK4R,sBAC3B5R,KAAK0b,wBAAwBrS,WAAW9C,EAAYT,KAAM,IAAI,KAElE9F,KAAK2b,oBAAsB3b,KAAKL,YAAYO,SACvC0b,wBACAxb,UAAUoB,GAAUA,EAAOqa,UAAUtb,OACrC2K,KAAK,OAAA4Q,GAAA,GAAY,IACtB9b,KAAKL,YAAY2B,MACZ4K,gBAAgBlM,KAAK0B,GAAI,CACtBqa,KAAM,EACNzP,KAAM,CACFC,UAAW,IAAUC,MAEzBtK,OAAQ,CAAEiK,KAAM,CAAEC,GAAI,IAAiBC,2BAE1C7J,QAAQC,UAAU,EAAGnB,YAClBtB,KAAKgc,cAAgB1a,aAAK,EAALA,EAAOmL,QAAQlM,MAAM,GAAGF,KAAK4F,OAI9D,cACIjG,KAAKqV,UAGT,uBAAuB/T,GACnBtB,KAAKwU,uBACAiC,8BAA8BnV,EAAMI,GAAIJ,EAAMmF,YAC9ChE,UAAUjB,IACPxB,KAAKsU,OAAOQ,SAAS,CAAC,MAAO,CAAEC,WAAY/U,KAAKuU,UAI5D,oBACI,MAAM,SAAEyE,EAAQ,iBAAEC,EAAgB,WAAE1Q,GAAevI,KAAK4Y,iBACxD,SACMI,aAAQ,EAARA,EAAU5R,YACVmB,aAAU,EAAVA,EAAYnB,YACZ6R,aAAgB,EAAhBA,EAAkB7R,SACnBpH,KAAKwa,oBAAoByB,OAASjc,KAAKwa,oBAAoB7V,OAC3D3E,KAAKmb,mBAAmBc,OAASjc,KAAKmb,mBAAmBxW,MAIlE,eAAelD,G,MACX,SAA+C,QAAvC,EAACzB,KAAK4Y,iBAAiBK,wBAAgB,eAAE5V,KAC7ClB,GAAKA,EAAEH,cAAgBP,EAAKC,IAAMS,EAAEF,WAAaR,EAAKQ,WAI9D,mBAAmBR,EAAyBQ,GACxC,MAAM,iBAAEgX,GAAqBjZ,KAAK4Y,iBAClC,IAAIY,EAAMP,aAAgB,EAAhBA,EAAkB5V,KAAKlB,GAAKA,EAAEH,cAAgBP,EAAKC,IACzD8X,IAAQvX,IAAaR,EAAKQ,WAG1BgX,WAAkBiD,OAAOjD,aAAgB,EAAhBA,EAAkBkD,QAAQ3C,GAAM,IAExDA,IACDA,EAAM,CAAExX,YAAaP,EAAKC,GAAIO,UAAWA,GACzCgX,WAAkBpJ,KAAK2J,IAE3BA,EAAIvX,UAAYA,EAGpB,wBAAwBsC,EAAiBtC,G,MACrC,MAAMuX,EAAoC,QAAjC,EAAGxZ,KAAK4Y,iBAAiBI,gBAAQ,eAAE3V,KAAKlB,GAAKA,EAAEuX,mBAAqBnV,EAAKmV,kBAC9EF,IACAA,EAAIvX,UAAYA,GAIxB,wBAAwB8L,EAAexJ,GACnC,OAAOA,EAAKmV,iBAGhB,qBAAqBlY,GACjB,OAAQA,aAAM,EAANA,EAAQmY,aAAa9M,YACzB,IAAK,cACD,OAAOrL,EAAOmY,aAAalZ,MAC/B,QACI,OAAO,GAInB,eAAee,G,QACX,IAAKA,EACD,OAEJ,MAAMwD,EAAehF,KAAK4R,sBAAsBxK,OAC1CpH,KAAK0b,wBAAwBjb,WAC7B+G,EACN,IAAIgS,EAAoC,QAAjC,EAAGxZ,KAAK4Y,iBAAiBI,gBAAQ,eAAE3V,KAAKlB,GAC3CnC,KAAKoc,qBAAqBja,EAAGX,EAAQwD,IAWzC,GATKwU,EAODA,EAAIvX,YANJuX,EAAM,CAAEE,iBAAkBlY,EAAOkY,iBAAkBzX,SAAU,GACzD+C,IACAwU,EAAIxU,aAAeA,GAEO,QAA9B,EAAAhF,KAAK4Y,iBAAiBI,gBAAQ,SAAEnJ,KAAK2J,IAIrCxU,EAAc,CACd,MAAMsW,EAAY,IAAI,IAAU,IAChC,IAAK,MAAOpV,EAAKzF,KAAUQ,OAAOc,QAAQiD,GACtCsW,EAAUjS,WAAWnD,EAAK,IAAI,IAAYzF,IAE9CT,KAAKyb,6BAA6B5L,KAAKyL,GACvCA,EAAUC,aAAarQ,KAAK,OAAA8O,GAAA,GAAUha,KAAKia,WAAWxX,UAAUhC,IACxD+Y,IACAA,EAAIxU,aAAevE,KAI/BT,KAAK0b,wBAAwBW,MAAM,IACnCrc,KAAKsc,4BAAyB9U,EAC9BxH,KAAKqZ,cAActT,IAAIvE,EAAOkY,iBAAkBlY,GAG5C,qBACJgY,EACAhY,EACAwD,GAEA,OACIwU,EAAIE,mBAAqBlY,EAAOkY,kBAChC6C,KAAKC,UAAUhD,EAAIxU,gBAAkBuX,KAAKC,UAAUxX,GAI5D,gBAAgB+I,GACZ/N,KAAK4Y,iBAAiBI,SAASkD,OAAOnO,EAAO,IACxC,EAAIA,GACL/N,KAAKyb,6BAA6BgB,SAAS1O,GAInD,mBAAmB2O,GACf,MAAM/C,EAAe+C,EAAUrC,iBACzBqC,EAAUnD,MACVnV,KAAKuY,MAAMD,EAAUnD,QAAU,KAAOmD,EAAUpC,SAAW,IAAM,MAIvE,MAAO,CACHf,MAJUmD,EAAUrC,iBAClBjW,KAAKuY,MAAMD,EAAUnD,QAAU,KAAOmD,EAAUpC,SAAW,IAAM,MACjEoC,EAAUnD,MAGZI,gBAIR,aAAalZ,G,MACuB,QAAhC,EAAAT,KAAK4Y,iBAAiBrQ,kBAAU,SAAEsH,KAAKpP,GACvCT,KAAKka,cAAcmC,MAAM,CACrB9C,MAAO,EACPc,kBAAkB,EAClBC,QAAS,IAIjB,gBAAgBvM,G,MACoB,QAAhC,EAAA/N,KAAK4Y,iBAAiBrQ,kBAAU,SAAE2T,OAAOnO,EAAO,GAGpD,iBAAiBzM,G,MACb,MAAMqV,EAAK,2DACJ3W,KAAK4Y,kBACJ5Y,KAAKmb,mBAAmBc,MAAQ,CAAE9C,qBAAsBnZ,KAAKmb,mBAAmB1a,OAAU,IAC1FT,KAAKwa,oBAAoByB,MACvB,CAAE/C,sBAAuBlZ,KAAKwa,oBAAoB/Z,OAClD,IAAG,CACTsY,QAAQ,EACRpG,KAAe,QAAX,EAAE3S,KAAK2S,YAAI,QAAI,GACnBjH,QAAS,CACL0N,oBAAqBpZ,KAAKoZ,uBAG5BV,EAAuBpX,EAAM+U,aACnCrW,KAAKL,YAAY2B,MACZsb,YAAYjG,GACZzL,KACG,OAAAC,GAAA,GAAU,EAAGyR,kBACT,OAAQA,EAAY/P,YAChB,IAAK,QACD,OAAO7M,KAAK+K,aAAaY,cAAc8M,GAAkC,CACrE3M,KAAM,KACND,UAAU,EACVD,OAAQ,CACJ8M,uBACApX,MAAOsb,EACPhL,sBAAuB5R,KAAK4R,sBAC5BgH,iBAAkBjC,KAG9B,IAAK,yBACL,IAAK,wBACL,IAAK,0BACL,IAAK,kBACL,IAAK,8BACL,IAAK,4BACL,IAAK,8BAED,OADA3W,KAAKgL,oBAAoBV,MAAMsS,EAAY/R,SACpC,OAAAgM,GAAA,IAAG,GAEd,KAAK,KACL,UAAKrP,EACD,OAAO,OAAAqP,GAAA,IAAG,GACd,QACI,SAAAgG,YAAA,CAAYD,MAGxB,OAAAzR,GAAA,GAAU3J,IACN,GAAKA,GAAUA,EAAOA,SAAW4W,GAAoBI,OAG9C,CAEH,MAAMsE,EAAc,OAAH,wBACVnG,GAAK,CACRoC,QAAQ,IAQZ,OANIvX,EAAOA,SAAW4W,GAAoBC,SACtCyE,EAAY9U,OAAS,CACjBwJ,UAAWhQ,EAAOsX,gBAClBjX,OAAQL,EAAOmX,aAGhB3Y,KAAKL,YAAY2B,MAAMsb,YAAYE,GAAa5R,KACnD,OAAAC,GAAA,GAAU,EAAGyR,kBACT,GAA+B,UAA3BA,EAAY/P,WAAwB,CACpC,MACMkQ,EACF,EAFeH,EAAYvG,aAAeqC,EAEzB,6BAA+B1Y,KAAKgc,cAEzD,OAAOhc,KAAKL,YAAY2B,MACnBqL,kBAAkBrL,EAAMI,GAAIqb,GAC5B7R,KAAK,OAAA4L,GAAA,IAAM,IAGhB,OADA9W,KAAKgL,oBAAoBV,MAAOsS,EAA4B/R,SACrD,QAzBnB,OAAO7K,KAAKL,YAAY2B,MAAMsU,SAAS5V,KAAK0B,IAAItB,UAAU,KAAM,MAgC3EqC,UAAUjB,IACHA,GACAxB,KAAKsU,OAAOQ,SAAS,CAAC,OAAQ,CAAEC,WAAY/U,KAAKuU,UAKvD,cAAcmB,EAA8BsH,K,uCA3X7C,IAAoB,mF,wBAApB,GAAoB,2kFDrDjC,mC,gBAeA,yB,uBAfiB,iCAeX,2C,mmEEXU,oBAII,gGAEA,Q,oBACJ,O,0CAJI,+BAGA,yC,wCAPR,iBACI,2BAQA,oBAGI,iEAA4B,YAE5B,Q,oBACA,sBACJ,OACJ,O,gCAd2B,wCAQnB,yCAGA,uD,0BAiC+C,Q,kEAAA,6B,0BAEvC,kBAA8B,Q,6CAAuC,OACrE,kBAAkC,8DAAyC,eAAC,Q,oBAD9C,4C,uGAgDlD,gBAA8B,QAAgB,OAC9C,gBACI,gCACJ,OACA,gBACI,mCACJ,OACA,gBAA8B,Q,yBAAsD,OACpF,gBAA8B,S,mBAA+B,OAC7D,iBAA8B,S,sBAAgD,OAC9E,iBAA8B,SAA6B,OAC3D,iBACI,mC,qBAKJ,Q,6BAjB8B,qBAEN,oCAGG,8BAEG,+CACA,sCACA,mDACA,oCAItB,gDAAmC,mEChF5C,MAAM,WACD,IA2CR,YACY9M,EACAvQ,EACAsd,EACR3I,EACAC,GAEAzK,MAAMwK,EAAQC,GANN,KAAArE,sBACA,KAAAvQ,cACA,KAAAsd,sBA5CZ,KAAAC,uBAAyB,IAAI,IAAY,IACzC,KAAAC,sBAAwB,IAAI,IAAY,IAExC,KAAAC,YAAcpd,KAAKkQ,oBAAoBC,wBAAwBrP,IAAIyD,GAAQA,EAAKuB,MAChF,KAAAuX,cAAgC,CAC5B,CACIvX,KAAM,OACNgS,MAAO,YAAE,4BACT9F,OAAQ,CACJlQ,QAAQ,EACR0N,OAAQxP,KAAKod,YAAYlb,OACrB0E,GAAW,cAANA,GAA2B,cAANA,GAA2B,YAANA,KAI3D,CACId,KAAM,UACNgS,MAAO,YAAE,+BACT9F,OAAQ,CACJlQ,QAAQ,EACR0N,OAAQ,CAAC,aAGjB,CACI1J,KAAM,YACNgS,MAAO,YAAE,iCACT9F,OAAQ,CACJlQ,QAAQ,EACR0N,OAAQ,CAAC,YAAa,eAG9B,CACI1J,KAAM,SACNgS,MAAO,YAAE,8BACT9F,OAAQ,CACJlQ,QAAQ,KAchBgI,MAAMwT,WAEF,CAACvB,EAAMwB,IAASvd,KAAKL,YAAY2B,MAAMkc,UAAU,CAAEzB,OAAMwB,SAAQE,yBACjEpd,GAAQA,EAAKqd,OAEb,CAACH,EAAMxB,IACH/b,KAAK2d,mBACDJ,EACAxB,EACA/b,KAAKkd,uBAAuBzc,MAC5BT,KAAKmd,sBAAsB1c,MAC3BT,KAAKuU,MAAMuF,SAAS8D,cAAc/X,IAAI,WAAa,SAG/D,MAAMgY,EAAc7d,KAAKid,oBAAoBpX,IAAI,8BAC7CgY,GACA7d,KAAK8d,cAAcD,EAAa,CAAEE,YAAY,IAItD,W,MACIjU,MAAMkU,WACNhe,KAAKie,cAAgBje,KAAKuU,MAAMqJ,cAAc1S,KAC1C,OAAApK,GAAA,GAAIod,GAAOA,EAAIrY,IAAI,WAAa,QAChC,OAAAsY,GAAA,MAEJ,MAAMC,EAAe,OAAAjG,GAAA,GACjBnY,KAAKkd,uBAAuB3B,aAC5Bvb,KAAKmd,sBAAsB5B,cAC7BrQ,KACE,aAAOzK,GAAS,EAAIA,EAAM2G,QAA2B,IAAjB3G,EAAM2G,QAC1C,OAAA6H,GAAA,GAAa,MAEjB,OAAAkJ,GAAA,GAAMiG,EAAcpe,KAAKuU,MAAMqJ,eAC1B1S,KAAK,OAAA8O,GAAA,GAAUha,KAAKia,WACpBxX,UAAU0D,IACPnG,KAAKqe,YAGb,MAAMT,EAAgB5d,KAAKuU,MAAMuF,SAAS8D,cAC1C5d,KAAKse,iBAAmB,IAAI,IAAU,CAClC9O,OAAQ,IAAI,IAA0C,QAA/B,EAACoO,EAAcW,OAAO,iBAAS,QAAI,IAC1DC,cAAe,IAAI,IAAYZ,EAAc/X,IAAI,kBACjD4Y,YAAa,IAAI,IAAYb,EAAc/X,IAAI,kBAIvD,mBAAmB6Y,G,MACf,MAAMC,EAA8E,QAA7D,EAAG3e,KAAKid,oBAAoBpX,IAAI,qCAA6B,QAAI,GAElF+Y,EAAyB,WAAfF,EAA0BC,EADf,CAAEnP,YAAQhI,EAAWgX,mBAAehX,EAAWiX,iBAAajX,GAEvFxH,KAAK8d,cAAc,OAAD,QAEV5b,OAAQwc,EACRG,KAAM,GACHD,GAEP,CAAEb,YAAY,IAItB,qBACI,MAAMvd,EAAYR,KAAKse,iBAAiB7d,MAClCqe,EAAgB,CAClBtP,OAAQhP,EAAUgP,OAClBgP,cAAehe,EAAUge,cACzBC,YAAaje,EAAUie,aAE3Bze,KAAK8d,cAAc,OAAD,QACd5b,OAAQ,UACL4c,IAEP9e,KAAKse,iBAAiB9U,iBACtBxJ,KAAKid,oBAAoBlX,IAAI,6BAA8B+Y,GAGvD,mBAEJvB,EACAxB,EACAgD,EACAC,EACAC,G,MAEA,MAAMC,EAAelf,KAAKqd,cAAcha,KAAKyN,GAAKA,EAAEhL,OAASmZ,GAEvD/c,EAAc,GACpB,GAAIgd,EACkC,MAA9BA,EAAalN,OAAOlQ,SACpBI,EAAOJ,OAAS,CACZsK,GAAI8S,EAAalN,OAAOlQ,SAG5Bod,EAAalN,OAAOxC,SACpBtN,EAAO4C,MAAQ,CACXqa,GAAID,EAAalN,OAAOxC,cAG7B,GAA2B,WAAvByP,EAAiC,CACxC,MAAMG,EAAcpf,KAAKuU,MAAMuF,SAAS8D,cAClCpO,EAAqC,QAA/B,EAAG4P,EAAYb,OAAO,iBAAS,QAAI,GACzCC,EAAgBY,EAAYvZ,IAAI,iBAChC4Y,EAAcW,EAAYvZ,IAAI,eAChC2J,EAAOpI,SACPlF,EAAO4C,MAAQ,CACXqa,GAAI3P,IAGRgP,GAAiBC,EACjBvc,EAAOmd,cAAgB,CACnBC,QAAS,CACLC,MAAOf,EACPgB,IAAKf,IAGND,EACPtc,EAAOmd,cAAgB,CACnBI,MAAOjB,GAEJC,IACPvc,EAAOmd,cAAgB,CACnBK,OAAQjB,IAcpB,OAVIO,IACA9c,EAAOyd,iBAAmB,CACtBC,SAAUZ,IAGdD,IACA7c,EAAOqB,KAAO,CACVqc,SAAUb,IAGX,CACHrT,QAAS,CACL6R,OACAxB,OACA7Z,OAAQ,OAAF,UACEA,UAAU,IAElBoK,KAAM,CACFuT,UAAW,IAAUrT,QAMrC,iBAAiBlL,GACb,OAAIA,EAAMkC,cAAc4D,OACb9F,EAAMkC,cAAc1C,IAAIgf,GAAgBA,EAAa9c,eAAe8C,MAAMia,KAAK,MAE/E,I,uCA7MN,IAAkB,sD,wBAAlB,GAAkB,+jCDlC/B,yBACI,sBACI,gBACI,uB,gBAmBA,kB,oBAOA,kB,oBAOJ,OACA,gB,iBACI,kBACI,iBACI,uB,qBAUI,gCACA,gCAIJ,OACA,oBAGI,+BAAS,EAAAC,uBAET,S,qBACA,uBACJ,OACJ,OACA,kBACI,eACI,iBAAO,S,qBAAyC,OAChD,kCACJ,OACA,eACI,iBAAO,S,qBAAuC,OAC9C,kCACJ,OACJ,OACJ,OACJ,OACJ,OACA,wBACI,mCACJ,OACJ,OAEA,6BAKI,qCAAc,EAAAC,cAAA,IAAd,CAAoC,wCACd,EAAAC,gBAAA,K,oEAEtB,yBAAe,S,qBAA+B,OAC9C,yBAAe,S,qBAAkC,OACjD,yBAAe,S,qBAA+B,OAC9C,yBAAe,S,qBAA+B,OAC9C,yBAAe,S,qBAAqC,OACpD,yBAAe,S,qBAAmC,OAClD,yBAAe,S,qBAAkC,OACjD,yBACA,gCAoBJ,Q,MApHwD,gDAsBxC,qDAAsC,uDAOtC,oDAAqC,+DAKjB,gEAClB,6CAGM,oCAAqB,YAArB,CAAqB,cAArB,CAAqB,6CAArB,CAAqB,eAArB,CAAqB,iBAiBrB,qDAGA,wDAMO,kDAIA,gDAa3B,2CAAwB,2CAAxB,CAAwB,uCAAxB,CAAwB,0CAOT,wCACA,2CACA,wCACA,wCACA,8CACA,4CACA,6C,g9BErFZ,MAAM,WAAsB,IAC/B,YAAY5L,EAAgB3U,GACxBmK,MACIwK,EACA,CACIzH,WAAY,QACZnL,GAAI,GACJ6B,KAAM,GACNgJ,UAAW,GACXsT,UAAW,GACXnb,MAAO,GAEXhD,GAAM/B,EAAY2B,MAAMsU,SAASlU,GAAIyT,UAAU9U,GAAQA,EAAKiB,S,uCAZ3D,IAAa,uB,0BAAb,GAAa,QAAb,GAAa,qBAFV,SCMT,MAAM6e,GAAuB,CAChC,CACIC,KAAM,GACNC,UAAW,GACXhgB,KAAM,CACFigB,WAAY,YAAE,uBAGtB,CACIF,KAAM,MACNC,UAAW,GACXE,QAAS,YAAkB,IAC3BC,cAAe,CAAC,KAChBngB,KAAM,CACFigB,WAAYG,KAGpB,CACIL,KAAM,aACNC,UAAW,GACXE,QAAS,YAAkB,IAE3BlgB,KAAM,CACFigB,WAAYI,MAKjB,SAASD,GAAgBpgB,EAAWsgB,GACvC,OAAO,YAAuC,CAC1CjL,OAAQrV,EAAKqV,OACbhU,GAAIif,EAAOjf,GACXkf,cAAe,oBACfC,QAASvf,GAASA,EAAMiC,KACxBgR,MAAO,KAIR,SAASmM,GAAyBrgB,EAAWsgB,GAChD,OAAOF,GAAgBpgB,EAAMsgB,GAAQzV,KACjC,OAAApK,GAAA,GAAKggB,IACD,MAAMC,EAAsBD,EAAYE,QAGxC,OAFAD,EAAoB,GAAGE,KAAK,GAAK,MACjCF,EAAoB,GAAGE,KAAK,GAAK,YAC1BF,EAAoBG,OAAO,CAAEpJ,MAAO,YAAE,wBAAyBmJ,KAAM,CAAC,SCOlF,MAAME,I,uCAAAA,K,wBAAAA,K,4BAhCA,CAAC,IAAc,KAAaC,SAASjB","file":"x","sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\n<form [formGroup]=\"form\">\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\n        <ng-select\n            [items]=\"paymentMethods$ | async\"\n            bindLabel=\"code\"\n            autofocus\n            bindValue=\"code\"\n            [addTag]=\"true\"\n            formControlName=\"method\"\n        ></ng-select>\n    </vdr-form-field>\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\n    </vdr-form-field>\n</form>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    CurrencyCode,\n    DataService,\n    Dialog,\n    GetPaymentMethodList,\n    ManualPaymentInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-add-manual-payment-dialog',\n    templateUrl: './add-manual-payment-dialog.component.html',\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\n    // populated by ModalService call\n    outstandingAmount: number;\n    currencyCode: CurrencyCode;\n\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\n    form = new FormGroup({\n        method: new FormControl('', Validators.required),\n        transactionId: new FormControl('', Validators.required),\n    });\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.paymentMethods$ = this.dataService.settings\n            .getPaymentMethods(999)\n            .mapSingle(data => data.paymentMethods.items);\n    }\n\n    submit() {\n        const formValue = this.form.value;\n        this.resolveWith({\n            method: formValue.method,\n            transactionId: formValue.transactionId,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-lines\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.is-cancelled]=\"line.quantity === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview:'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\n                        [(ngModel)]=\"lineQuantities[line.id]\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                    />\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"cancellation-details\">\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\n        <ng-select\n            [items]=\"reasons\"\n            bindLabel=\"name\"\n            autofocus\n            bindValue=\"id\"\n            [addTag]=\"true\"\n            [(ngModel)]=\"reason\"\n        ></ng-select>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button\n        type=\"submit\"\n        (click)=\"select()\"\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\n        class=\"btn btn-primary\"\n    >\n        <ng-container *ngIf=\"!order.active\">\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-container>\n        <ng-container *ngIf=\"order.active\">\n            {{ 'order.cancel-order' | translate }}\n        </ng-container>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { CancelOrderInput, Dialog, I18nService, OrderDetailFragment, OrderLineInput } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-cancel-order-dialog',\n    templateUrl: './cancel-order-dialog.component.html',\n    styleUrls: ['./cancel-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\n    order: OrderDetailFragment;\n    resolveWith: (result?: CancelOrderInput) => void;\n    reason: string;\n    lineQuantities: { [lineId: string]: number } = {};\n    reasons: string[] = [_('order.cancel-reason-customer-request'), _('order.cancel-reason-not-available')];\n\n    get selectionCount(): number {\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\n    }\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return { ...result, [line.id]: 0 };\n        }, {});\n    }\n\n    select() {\n        this.resolveWith({\n            orderId: this.order.id,\n            lines: this.getLineInputs(),\n            reason: this.reason,\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getLineInputs(): OrderLineInput[] | undefined {\n        if (this.order.active) {\n            return;\n        }\n        return Object.entries(this.lineQuantities)\n            .map(([orderLineId, quantity]) => ({\n                orderLineId,\n                quantity,\n            }))\n            .filter(l => 0 < l.quantity);\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\n\n<div class=\"fulfillment-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n                    <th>{{ 'order.fulfill' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor=\"let line of order.lines\"\n                class=\"order-line\"\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\n            >\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\n                        type=\"number\"\n                        [max]=\"fulfillmentQuantities[line.id].max\"\n                        min=\"0\"\n                    />\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"shipping-details\">\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\n        <vdr-configurable-input\n            [operationDefinition]=\"fulfillmentHandlerDef\"\n            [operation]=\"fulfillmentHandler\"\n            [formControl]=\"fulfillmentHandlerControl\"\n            [removable]=\"false\"\n        ></vdr-configurable-input>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        {{ 'order.create-fulfillment' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    configurableOperationValueIsValid,\n    DataService,\n    Dialog,\n    FulfillOrderInput,\n    GlobalFlag,\n    OrderDetail,\n    OrderDetailFragment,\n    toConfigurableOperationInput,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfill-order-dialog',\n    templateUrl: './fulfill-order-dialog.component.html',\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\n    resolveWith: (result?: FulfillOrderInput) => void;\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\n    fulfillmentHandler: ConfigurableOperation;\n    fulfillmentHandlerControl = new FormControl();\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\n\n    // Provided by modalService.fromComponent() call\n    order: OrderDetailFragment;\n\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\n                return {\n                    ...result,\n                    [line.id]: { fulfillCount, max: fulfillCount },\n                };\n            }, {});\n            this.changeDetector.markForCheck();\n        });\n\n        this.dataService.shippingMethod\n            .getShippingMethodOperations()\n            .mapSingle(data => data.fulfillmentHandlers)\n            .subscribe(handlers => {\n                this.fulfillmentHandlerDef =\n                    handlers.find(\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\n                    ) || handlers[0];\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\n                this.changeDetector.markForCheck();\n            });\n    }\n\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\n        const { trackInventory, stockOnHand } = line.productVariant;\n        const effectiveTracInventory =\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\n\n        const unfulfilledCount = this.getUnfulfilledCount(line);\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\n    }\n\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\n        const fulfilled = line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\n        return line.quantity - fulfilled;\n    }\n\n    canSubmit(): boolean {\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\n            (total, { fulfillCount }) => total + fulfillCount,\n            0,\n        );\n        const formIsValid =\n            configurableOperationValueIsValid(\n                this.fulfillmentHandlerDef,\n                this.fulfillmentHandlerControl.value,\n            ) && this.fulfillmentHandlerControl.valid;\n        return formIsValid && 0 < totalCount;\n    }\n\n    select() {\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\n            orderLineId,\n            quantity: fulfillCount,\n        }));\n        this.resolveWith({\n            lines,\n            handler: toConfigurableOperationInput(\n                this.fulfillmentHandler,\n                this.fulfillmentHandlerControl.value,\n            ),\n        });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-fulfillment-state-label',\n    templateUrl: './fulfillment-state-label.component.html',\n    styleUrls: ['./fulfillment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n            case 'Shipped':\n                return 'warning';\n            case 'Delivered':\n                return 'success';\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<div class=\"items-list\">\n    <ul>\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\n            <div class=\"quantity\">{{ item.quantity }}</div>\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\n            {{ item.name }}\n        </li>\n    </ul>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-simple-item-list',\n    templateUrl: './simple-item-list.component.html',\n    styleUrls: ['./simple-item-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SimpleItemListComponent {\n    @Input() items: Array<{ name: string; quantity: number }>;\n}\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n    {{ fulfillment?.method }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\n    {{ fulfillment?.trackingCode }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<ng-container *ngFor=\"let customField of customFields\">\n    <vdr-labeled-data [label]=\"customField.key\">\n        <vdr-object-tree\n            *ngIf=\"customFieldIsObject(customField.value); else primitive\"\n            [value]=\"{ object: customField.value }\"\n        ></vdr-object-tree>\n        <ng-template #primitive>\n            {{ customField.value }}\n        </ng-template>\n    </vdr-labeled-data>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { isObject } from '@vendure/common/lib/shared-utils';\n\n@Component({\n    selector: 'vdr-fulfillment-detail',\n    templateUrl: './fulfillment-detail.component.html',\n    styleUrls: ['./fulfillment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentDetailComponent implements OnChanges {\n    @Input() fulfillmentId: string;\n    @Input() order: OrderDetail.Fragment;\n\n    customFields: Array<{ key: string; value: any }> = [];\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.customFields = this.getCustomFields();\n    }\n\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\n    }\n\n    get items(): Array<{ name: string; quantity: number }> {\n        const itemMap = new Map<string, number>();\n        const fulfillmentItemIds = this.fulfillment?.orderItems.map(i => i.id);\n        for (const line of this.order.lines) {\n            for (const item of line.items) {\n                if (fulfillmentItemIds?.includes(item.id)) {\n                    const count = itemMap.get(line.productVariant.name);\n                    if (count != null) {\n                        itemMap.set(line.productVariant.name, count + 1);\n                    } else {\n                        itemMap.set(line.productVariant.name, 1);\n                    }\n                }\n            }\n        }\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\n    }\n\n    getCustomFields(): Array<{ key: string; value: any }> {\n        const customFields = (this.fulfillment as any).customFields;\n        if (customFields) {\n            return Object.entries(customFields)\n                .filter(([key]) => key !== '__typename')\n                .map(([key, val]) => {\n                    const value = Array.isArray(val) || isObject(val) ? val : (val as any).toString();\n                    return { key, value };\n                });\n        } else {\n            return [];\n        }\n    }\n\n    customFieldIsObject(customField: unknown) {\n        return Array.isArray(customField) || isObject(customField);\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header fulfillment-header\">\n        <div>{{ 'order.fulfillment' | translate }}</div>\n        <div class=\"fulfillment-state\">\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-fulfillment-detail\n            *ngIf=\"!!fulfillment\"\n            [fulfillmentId]=\"fulfillment?.id\"\n            [order]=\"order\"\n        ></vdr-fulfillment-detail>\n    </div>\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\n            </button>\n        </ng-container>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionState.emit(nextState)\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-fulfillment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-fulfillment-card',\n    templateUrl: './fulfillment-card.component.html',\n    styleUrls: ['./fulfillment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FulfillmentCardComponent {\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\n    @Input() order: OrderDetail.Fragment;\n    @Output() transitionState = new EventEmitter<string>();\n\n    nextSuggestedState(): string | undefined {\n        if (!this.fulfillment) {\n            return;\n        }\n        const { nextStates } = this.fulfillment;\n        const namedStateOrDefault = (targetState: string) =>\n            nextStates.includes(targetState) ? targetState : nextStates[0];\n        switch (this.fulfillment?.state) {\n            case 'Pending':\n                return namedStateOrDefault('Shipped');\n            case 'Shipped':\n                return namedStateOrDefault('Delivered');\n            default:\n                return nextStates.find(s => s !== 'Cancelled');\n        }\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.fulfillment) {\n            return [];\n        }\n        const suggested = this.nextSuggestedState();\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\n    }\n}\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'partial'\"\n            class=\"item-partially-fulfilled\"\n            shape=\"check-circle\"\n        ></clr-icon>\n        <clr-icon\n            *ngIf=\"fulfillmentStatus === 'none'\"\n            class=\"item-not-fulfilled\"\n            shape=\"exclamation-circle\"\n        ></clr-icon>\n    </button>\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\n            {{ 'order.line-fulfillment-all' | translate }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\n            {{\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\n            }}\n        </label>\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\n            {{ 'order.line-fulfillment-none' | translate }}\n        </label>\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\n            <div class=\"fulfillment-title\">\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\n                    'order.item-count' | translate: { count: item.count }\n                }})\n            </div>\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\n                {{ item.fulfillment.method }}\n            </vdr-labeled-data>\n            <vdr-labeled-data\n                *ngIf=\"item.fulfillment.trackingCode\"\n                [label]=\"'order.tracking-code' | translate\"\n            >\n                {{ item.fulfillment.trackingCode }}\n            </vdr-labeled-data>\n        </div>\n    </vdr-dropdown-menu>\n</vdr-dropdown>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\n\n@Component({\n    selector: 'vdr-line-fulfillment',\n    templateUrl: './line-fulfillment.component.html',\n    styleUrls: ['./line-fulfillment.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineFulfillmentComponent implements OnChanges {\n    @Input() line: OrderDetail.Lines;\n    @Input() orderState: string;\n    fulfilledCount = 0;\n    fulfillmentStatus: FulfillmentStatus;\n    fulfillments: Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> = [];\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.line) {\n            this.fulfilledCount = this.getDeliveredCount(this.line);\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\n            this.fulfillments = this.getFulfillments(this.line);\n        }\n    }\n\n    /**\n     * Returns the number of items in an OrderLine which are fulfilled.\n     */\n    private getDeliveredCount(line: OrderDetail.Lines): number {\n        return line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\n    }\n\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\n        if (fulfilledCount === lineQuantity) {\n            return 'full';\n        }\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\n            return 'partial';\n        }\n        return 'none';\n    }\n\n    private getFulfillments(\n        line: OrderDetail.Lines,\n    ): Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> {\n        const counts: { [fulfillmentId: string]: number } = {};\n\n        for (const item of line.items) {\n            if (item.fulfillment) {\n                if (counts[item.fulfillment.id] === undefined) {\n                    counts[item.fulfillment.id] = 1;\n                } else {\n                    counts[item.fulfillment.id]++;\n                }\n            }\n        }\n        const all = line.items.reduce((fulfillments, item) => {\n            return item.fulfillment ? [...fulfillments, item.fulfillment] : fulfillments;\n        }, [] as OrderDetail.Fulfillments[]);\n\n        return Object.entries(counts).map(([id, count]) => {\n            return {\n                count,\n                // tslint:disable-next-line:no-non-null-assertion\n                fulfillment: all.find(f => f.id === id)!,\n            };\n        });\n    }\n}\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\n</span>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-line-refunds',\n    templateUrl: './line-refunds.component.html',\n    styleUrls: ['./line-refunds.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineRefundsComponent {\n    @Input() line: OrderDetail.Lines;\n    @Input() payments: OrderDetail.Payments[];\n\n    getRefundedCount(): number {\n        const refunds =\n            this.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n        return this.line.items.filter(i => {\n            if (i.refundId === null && !i.cancelled) {\n                return false;\n            }\n            if (i.refundId) {\n                const refund = refunds.find(r => r.id === i.refundId);\n                if (refund?.state === 'Failed') {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        }).length;\n    }\n}\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\n    modification.note\n}}</vdr-labeled-data>\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\n    {{ getSurcharge(surcharge.id)?.description }}\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\n>\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-modification-detail',\n    templateUrl: './modification-detail.component.html',\n    styleUrls: ['./modification-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModificationDetailComponent implements OnChanges {\n    @Input() order: OrderDetailFragment;\n    @Input() modification: OrderDetail.Modifications;\n    private addedItems = new Map<OrderDetail.Lines, number>();\n    private removedItems = new Map<OrderDetail.Lines, number>();\n\n    ngOnChanges(): void {\n        const { added, removed } = this.getModifiedLines();\n        this.addedItems = added;\n        this.removedItems = removed;\n    }\n\n    getSurcharge(id: string) {\n        return this.order.surcharges.find(m => m.id === id);\n    }\n\n    getAddedItems() {\n        return [...this.addedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    getRemovedItems() {\n        return [...this.removedItems.entries()].map(([line, count]) => {\n            return { name: line.productVariant.name, quantity: count };\n        });\n    }\n\n    private getModifiedLines() {\n        const added = new Map<OrderDetail.Lines, number>();\n        const removed = new Map<OrderDetail.Lines, number>();\n        for (const _item of this.modification.orderItems || []) {\n            const result = this.getOrderLineAndItem(_item.id);\n            if (result) {\n                const { line, item } = result;\n                if (item.cancelled) {\n                    const count = removed.get(line) ?? 0;\n                    removed.set(line, count + 1);\n                } else {\n                    const count = added.get(line) ?? 0;\n                    added.set(line, count + 1);\n                }\n            }\n        }\n        return { added, removed };\n    }\n\n    private getOrderLineAndItem(itemId: string) {\n        for (const line of this.order.lines) {\n            const item = line.items.find(i => i.id === itemId);\n            if (item) {\n                return { line, item };\n            }\n        }\n    }\n}\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\n    <div class=\"card-header\">\n        {{ 'common.custom-fields' | translate }}\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\n            <ng-container *ngFor=\"let customField of customFieldsConfig\">\n                <vdr-custom-field-control\n                    entityName=\"Order\"\n                    [customFieldsFormGroup]=\"customFieldForm\"\n                    [compact]=\"true\"\n                    [readonly]=\"customField.readonly || !editable\"\n                    [customField]=\"customField\"\n                ></vdr-custom-field-control>\n            </ng-container>\n        </div>\n    </div>\n    <div class=\"card-footer\">\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\n            <clr-icon shape=\"pencil\"></clr-icon>\n            {{ 'common.edit' | translate }}\n        </button>\n        <button\n            class=\"btn btn-sm btn-primary\"\n            (click)=\"onUpdateClick()\"\n            *ngIf=\"editable\"\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\n        >\n            <clr-icon shape=\"check\"></clr-icon>\n            {{ 'common.update' | translate }}\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-custom-fields-card',\n    templateUrl: './order-custom-fields-card.component.html',\n    styleUrls: ['./order-custom-fields-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderCustomFieldsCardComponent implements OnInit {\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\n    @Input() customFieldValues: { [name: string]: any } = {};\n    @Output() updateClick = new EventEmitter<any>();\n    customFieldForm: FormGroup;\n    editable = false;\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit() {\n        this.customFieldForm = this.formBuilder.group({});\n        for (const field of this.customFieldsConfig) {\n            this.customFieldForm.addControl(\n                field.name,\n                this.formBuilder.control(this.customFieldValues[field.name]),\n            );\n        }\n    }\n\n    onUpdateClick() {\n        this.updateClick.emit(this.customFieldForm.value);\n        this.customFieldForm.markAsPristine();\n        this.editable = false;\n    }\n}\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\n<p>{{ message | translate }}</p>\n<clr-select-container>\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\n            {{ state | stateI18nToken | translate }}\n        </option>\n    </select>\n</clr-select-container>\n<ng-template vdrDialogButtons>\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\n        {{ 'common.cancel' | translate }}\n    </button>\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-state-select-dialog',\n    templateUrl: './order-state-select-dialog.component.html',\n    styleUrls: ['./order-state-select-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    nextStates: string[] = [];\n    message = '';\n    cancellable: boolean;\n    selectedState = '';\n\n    select() {\n        if (this.selectedState) {\n            this.resolveWith(this.selectedState);\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    HistoryEntryType,\n    I18nService,\n    ModalService,\n    NotificationService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\n\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderTransitionService {\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private i18nService: I18nService,\n    ) {}\n\n    /**\n     * Attempts to transition the Order to the last state it was in before it was transitioned\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\n     */\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\n        return this.getPreModifyingState(orderId).pipe(\n            switchMap(state => {\n                const manualTransitionOptions = {\n                    orderId,\n                    nextStates,\n                    message: this.i18nService.translate(\n                        _('order.unable-to-transition-to-state-try-another'),\n                        { state },\n                    ),\n                    cancellable: false,\n                    retry: 10,\n                };\n                if (state) {\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\n                    );\n                } else {\n                    return this.manuallyTransitionToState(manualTransitionOptions);\n                }\n            }),\n        );\n    }\n\n    /**\n     * Displays a modal for manually selecting the next state.\n     */\n    manuallyTransitionToState(options: {\n        orderId: string;\n        nextStates: string[];\n        message: string;\n        cancellable: boolean;\n        retry: number;\n    }) {\n        return this.modalService\n            .fromComponent(OrderStateSelectDialogComponent, {\n                locals: {\n                    nextStates: options.nextStates,\n                    cancellable: options.cancellable,\n                    message: options.message,\n                },\n                closable: false,\n                size: 'md',\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.transitionToStateOrThrow(options.orderId, result);\n                    } else {\n                        if (!options.cancellable) {\n                            throw new Error(`An order state must be selected`);\n                        } else {\n                            return EMPTY;\n                        }\n                    }\n                }),\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\n            );\n    }\n\n    /**\n     * Attempts to get the last state the Order was in before it was transitioned\n     * to the \"Modifying\" state.\n     */\n    private getPreModifyingState(orderId: string) {\n        return this.dataService.order\n            .getOrderHistory(orderId, {\n                filter: {\n                    type: {\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\n                    },\n                },\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n            })\n            .mapSingle(result => result.order)\n            .pipe(\n                map(result => {\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\n                    if (item) {\n                        return item.data.from as string;\n                    } else {\n                        return;\n                    }\n                }),\n            );\n    }\n\n    private transitionToStateOrThrow(orderId: string, state: string) {\n        return this.dataService.order.transitionToState(orderId, state).pipe(\n            map(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        return transitionOrderToState?.state;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState?.transitionError);\n                        throw new Error(transitionOrderToState?.transitionError);\n                }\n            }),\n        );\n    }\n}\n","export const NODE_HEIGHT = 72;\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\n    <div\n        class=\"node\"\n        [class.active-target]=\"activeTarget$ | async\"\n    >\n        {{ node.name | stateI18nToken | translate }}\n    </div>\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\n        <div class=\"cancelled-edge\">\n        </div>\n        <clr-icon shape=\"dot-circle\"></clr-icon>\n        <div class=\"cancelled-node\">\n            {{ cancelledState | stateI18nToken | translate }}\n        </div>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NODE_HEIGHT } from './constants';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-node',\n    templateUrl: './order-process-node.component.html',\n    styleUrls: ['./order-process-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessNodeComponent implements OnChanges {\n    @Input() node: StateNode;\n    @Input() index: number;\n    @Input() active: boolean;\n    active$ = new BehaviorSubject<boolean>(false);\n    activeTarget$ = new BehaviorSubject<boolean>(false);\n    isCancellable = false;\n    // We use a class field here to prevent the\n    // i18n extractor from extracting a \"Cancelled\" key\n    cancelledState = 'Cancelled';\n\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\n        if (changes.active) {\n            this.active$.next(this.active);\n        }\n    }\n\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\n        const nodeHeight =\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\n        return {\n            x: 10,\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\n        };\n    }\n\n    getStyle() {\n        const pos = this.getPos();\n        return {\n            'top.px': pos.y,\n            'left.px': pos.x,\n        };\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OrderProcessNodeComponent } from './order-process-node.component';\n\n@Component({\n    selector: 'vdr-order-process-edge',\n    templateUrl: './order-process-edge.component.html',\n    styleUrls: ['./order-process-edge.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessEdgeComponent implements OnInit {\n    @Input() from: OrderProcessNodeComponent;\n    @Input() to: OrderProcessNodeComponent;\n    @Input() index: number;\n    active$: Observable<boolean>;\n\n    ngOnInit() {\n        this.active$ = this.from.active$\n            .asObservable()\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\n    }\n\n    getStyle() {\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\n        const dX = Math.abs(startPos.x - endPos.x);\n        const dY = Math.abs(startPos.y - endPos.y);\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\n        return {\n            'top.px': startPos.y,\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\n            'height.px': length,\n            'width.px': 1,\n            ...(direction === 'up'\n                ? {\n                      transform: 'rotateZ(180deg)',\n                      'transform-origin': 'top',\n                  }\n                : {}),\n        };\n    }\n}\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\n    <vdr-order-process-node\n        [node]=\"state\"\n        [index]=\"i\"\n        [active]=\"(activeState$ | async) === state.name\"\n        (mouseenter)=\"onMouseOver(state.name)\"\n        (mouseleave)=\"onMouseOut()\"\n    ></vdr-order-process-node>\n</ng-container>\n<ng-container *ngFor=\"let edge of edges\">\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\n</ng-container>\n","<div\n    [attr.data-from]=\"from.node.name\"\n    [attr.data-to]=\"to.node.name\"\n    [ngStyle]=\"getStyle()\"\n    [class.active]=\"active$ | async\"\n    class=\"edge\">\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    Input,\n    OnChanges,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    ViewChildren,\n} from '@angular/core';\nimport { OrderProcessState } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { NODE_HEIGHT } from './constants';\nimport { OrderProcessNodeComponent } from './order-process-node.component';\nimport { StateNode } from './types';\n\n@Component({\n    selector: 'vdr-order-process-graph',\n    templateUrl: './order-process-graph.component.html',\n    styleUrls: ['./order-process-graph.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\n    @Input() states: OrderProcessState[];\n    @Input() initialState?: string;\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\n    activeState$: Observable<string | undefined>;\n    nodes: StateNode[] = [];\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\n\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    @HostBinding('style.height.px')\n    get outerHeight(): number {\n        return this.nodes.length * NODE_HEIGHT;\n    }\n\n    ngOnInit() {\n        this.setActiveState$.next(this.initialState);\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.populateNodes();\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => this.populateEdges());\n    }\n\n    onMouseOver(stateName: string) {\n        this.setActiveState$.next(stateName);\n    }\n\n    onMouseOut() {\n        this.setActiveState$.next(this.initialState);\n    }\n\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\n        if (this.nodeComponents) {\n            return this.nodeComponents.find((n) => n.node.name === state);\n        }\n    }\n\n    private populateNodes() {\n        const stateNodeMap = new Map<string, StateNode>();\n        for (const state of this.states) {\n            stateNodeMap.set(state.name, {\n                name: state.name,\n                to: [],\n            });\n        }\n\n        for (const [name, stateNode] of stateNodeMap.entries()) {\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\n            for (const target of targets) {\n                const targetNode = stateNodeMap.get(target);\n                if (targetNode) {\n                    stateNode.to.push(targetNode);\n                }\n            }\n        }\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\n    }\n\n    private populateEdges() {\n        for (const node of this.nodes) {\n            const nodeCmp = this.getNodeFor(node.name);\n            let index = 0;\n            for (const to of node.to) {\n                const toCmp = this.getNodeFor(to.name);\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\n                    this.edges.push({\n                        to: toCmp,\n                        from: nodeCmp,\n                        index,\n                    });\n                    index++;\n                }\n            }\n        }\n        this.edges = [...this.edges];\n        this.changeDetector.markForCheck();\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\n\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n    CancelOrderInput,\n    DataService,\n    Dialog,\n    OrderProcessState,\n    ServerConfigService,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'vdr-order-process-graph-dialog',\n    templateUrl: './order-process-graph-dialog.component.html',\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\n    activeState: string;\n    states: OrderProcessState[] = [];\n    constructor(private serverConfigService: ServerConfigService) {}\n\n    ngOnInit(): void {\n        this.states = this.serverConfigService.getOrderProcessStates();\n    }\n\n    resolveWith: (result: void | undefined) => void;\n}\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\n\n<div class=\"refund-wrapper\">\n    <div class=\"order-table\">\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ 'order.product-name' | translate }}</th>\n                    <th>{{ 'order.product-sku' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.unit-price' | translate }}</th>\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\n                    <th>{{ 'order.quantity' | translate }}</th>\n                    <th>{{ 'order.refund' | translate }}</th>\n                    <th>{{ 'order.cancel' | translate }}</th>\n                </tr>\n            </thead>\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\n                <td class=\"align-middle thumb\">\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle quantity\">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                </td>\n                <td class=\"align-middle quantity\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class=\"align-middle quantity\">\n                    <div class=\"prorated-wrapper\">\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\n                        <ng-container *ngIf=\"line.discounts as discounts\">\n                            <vdr-dropdown *ngIf=\"discounts.length\">\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\n                                </div>\n                                <vdr-dropdown-menu>\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                        {{ discount.description }}\n                                        <div class=\"promotion-amount\">\n                                            {{\n                                                discount.amount / 100 / line.quantity\n                                                    | number: '1.0-2'\n                                                    | currency: order.currencyCode\n                                            }}\n                                        </div>\n                                    </div>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </ng-container>\n                    </div>\n                </td>\n                <td class=\"align-middle fulfil\">\n                    <input\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\n                        type=\"number\"\n                        [max]=\"line.quantity\"\n                        min=\"0\"\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\n                    />\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\n                        />\n                    </div>\n                </td>\n                <td class=\"align-middle\">\n                    <div class=\"cancel-checkbox-wrapper\">\n                        <input\n                            type=\"checkbox\"\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\n                            clrCheckbox\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\n                        />\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class=\"refund-details mt4\">\n        <div>\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n            <ng-select\n                [disabled]=\"!isRefunding() && !isCancelling()\"\n                [items]=\"reasons\"\n                bindLabel=\"name\"\n                autofocus\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\n                bindValue=\"id\"\n                [addTag]=\"true\"\n                [(ngModel)]=\"reason\"\n            ></ng-select>\n        </div>\n\n        <div>\n            <clr-select-container>\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\n                    <option\n                        *ngFor=\"let payment of settledPayments\"\n                        [ngValue]=\"payment\"\n                        [disabled]=\"payment.state !== 'Settled'\"\n                    >\n                        #{{ payment.id }} {{ payment.method }}:\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\n                    </option>\n                </select>\n            </clr-select-container>\n\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\n                <label>\n                    {{ 'order.refund-shipping' | translate }} ({{\n                        order.shipping | localeCurrency: order.currencyCode\n                    }})\n                </label>\n            </clr-checkbox-wrapper>\n            <clr-input-container>\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\n                <vdr-currency-input\n                    clrInput\n                    [disabled]=\"!isRefunding()\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [(ngModel)]=\"adjustment\"\n                ></vdr-currency-input>\n            </clr-input-container>\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\n                <div class=\"order-total\">\n                    {{ 'order.payment-amount' | translate }}:\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total\">\n                    {{ 'order.refund-total' | translate }}:\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\n                </div>\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\n                    {{\n                        'order.refund-total-error'\n                            | translate\n                                : {\n                                      min: 0 | currency: order.currencyCode,\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\n                                  }\n                    }}\n                </div>\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\n                    {{ 'order.refund-total-warning' | translate }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\n            {{\n                'order.refund-with-amount'\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\n            }}\n        </ng-container>\n        <ng-template #cancelling>\n            {{ 'order.cancel-selected-items' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CancelOrderInput,\n    Dialog,\n    I18nService,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineInput,\n    RefundOrderInput,\n} from '@vendure/admin-ui/core';\nimport { summate } from '@vendure/common/lib/shared-utils';\n\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\n\n@Component({\n    selector: 'vdr-refund-order-dialog',\n    templateUrl: './refund-order-dialog.component.html',\n    styleUrls: ['./refund-order-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundOrderDialogComponent\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }> {\n    order: OrderDetailFragment;\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\n    reason: string;\n    settledPayments: OrderDetail.Payments[];\n    selectedPayment: OrderDetail.Payments;\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\n    refundShipping = false;\n    adjustment = 0;\n    reasons: string[] = [_('order.refund-reason-customer-request'), _('order.refund-reason-not-available')];\n\n    constructor(private i18nService: I18nService) {\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\n    }\n\n    get refundTotal(): number {\n        const itemTotal = this.order.lines.reduce((total, line) => {\n            const lineRef = this.lineQuantities[line.id];\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\n            return total + line.proratedUnitPriceWithTax * refundCount;\n        }, 0);\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\n    }\n\n    get settledPaymentsTotal(): number {\n        return this.settledPayments\n            .map(payment => {\n                const paymentTotal = payment.amount;\n                const alreadyRefundedTotal = summate(\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\n                    'total',\n                );\n                return paymentTotal - alreadyRefundedTotal;\n            })\n            .reduce((sum, amount) => sum + amount, 0);\n    }\n\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\n        const refunds =\n            this.order.payments?.reduce(\n                (all, payment) => [...all, ...payment.refunds],\n                [] as OrderDetail.Refunds[],\n            ) ?? [];\n\n        const refundable = line.items.filter(i => {\n            if (i.cancelled) {\n                return false;\n            }\n            if (i.refundId == null) {\n                return true;\n            }\n            const refund = refunds.find(r => r.id === i.refundId);\n            return refund?.state === 'Failed';\n        });\n        return 0 < refundable.length;\n    }\n\n    ngOnInit() {\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\n            return {\n                ...result,\n                [line.id]: {\n                    quantity: 0,\n                    refund: false,\n                    cancel: false,\n                },\n            };\n        }, {});\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\n        if (this.settledPayments.length) {\n            this.selectedPayment = this.settledPayments[0];\n        }\n    }\n\n    handleZeroQuantity(line?: SelectionLine) {\n        if (line?.quantity === 0) {\n            line.cancel = false;\n            line.refund = false;\n        }\n    }\n\n    isRefunding(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\n            return isRefunding || (0 < line.quantity && line.refund);\n        }, false);\n        return result;\n    }\n\n    isCancelling(): boolean {\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\n            return isCancelling || (0 < line.quantity && line.cancel);\n        }, false);\n        return result;\n    }\n\n    canSubmit(): boolean {\n        if (this.isRefunding()) {\n            return !!(\n                this.selectedPayment &&\n                this.reason &&\n                0 < this.refundTotal &&\n                this.refundTotal <= this.settledPaymentsTotal\n            );\n        } else if (this.isCancelling()) {\n            return !!this.reason;\n        }\n        return false;\n    }\n\n    select() {\n        const payment = this.selectedPayment;\n        if (payment) {\n            const refundLines = this.getOrderLineInput(line => line.refund);\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\n\n            this.resolveWith({\n                refund: {\n                    lines: refundLines,\n                    reason: this.reason,\n                    shipping: this.refundShipping ? this.order.shipping : 0,\n                    adjustment: this.adjustment,\n                    paymentId: payment.id,\n                },\n                cancel: {\n                    lines: cancelLines,\n                    orderId: this.order.id,\n                    reason: this.reason,\n                },\n            });\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\n        return Object.entries(this.lineQuantities)\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\n            .map(([orderLineId, line]) => ({\n                orderLineId,\n                quantity: line.quantity,\n            }));\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\n<p class=\"instruction\">\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\n</p>\n<clr-input-container>\n    <label>{{ 'order.transaction-id' | translate }}</label>\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\n        {{ 'order.settle-refund' | translate }}\n    </button>\n</ng-template>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-settle-refund-dialog',\n    templateUrl: './settle-refund-dialog.component.html',\n    styleUrls: ['./settle-refund-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SettleRefundDialogComponent implements Dialog<string> {\n    resolveWith: (result?: string) => void;\n    transactionId = '';\n    refund: OrderDetail.Refunds;\n\n    submit() {\n        this.resolveWith(this.transactionId);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","<table class=\"order-table table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ 'order.product-name' | translate }}</th>\n            <th>{{ 'order.product-sku' | translate }}</th>\n            <th>{{ 'order.unit-price' | translate }}</th>\n            <th>{{ 'order.quantity' | translate }}</th>\n            <th>{{ 'order.total' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor=\"let line of order.lines\">\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\n                <td class=\"align-middle thumb\">\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\n                </td>\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                <td class=\"align-middle unit-price\">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                    </div>\n                </td>\n                <td class=\"align-middle quantity\">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\n                </td>\n                <td class=\"align-middle total\">\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\n                    </div>\n\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\n                        <vdr-dropdown *ngIf=\"discounts.length\">\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\n                                {{ 'order.promotions-applied' | translate }}\n                            </div>\n                            <vdr-dropdown-menu>\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\n                                        discount.description\n                                    }}</a>\n                                    <div class=\"promotion-amount\">\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </ng-container>\n                </td>\n            </tr>\n            <ng-container *ngIf=\"getLineCustomFields(line) as customFields\">\n                <tr *ngIf=\"customFields.length\">\n                    <td colspan=\"6\" class=\"custom-fields-row\">\n                        <div class=\"order-line-custom-fields\">\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\n                                <vdr-labeled-data [label]=\"field.config | customFieldLabel\">\n                                    <div class=\"mt2\" [ngSwitch]=\"field.config.type\">\n                                        <ng-template [ngSwitchCase]=\"'datetime'\">\n                                            <span [title]=\"field.value\">{{ field.value }}</span>\n                                        </ng-template>\n                                        <ng-template [ngSwitchCase]=\"'boolean'\">\n                                            <ng-template [ngIf]=\"field.value === true\">\n                                                <clr-icon shape=\"check\"></clr-icon>\n                                            </ng-template>\n                                            <ng-template [ngIf]=\"field.value === false\">\n                                                <clr-icon shape=\"times\"></clr-icon>\n                                            </ng-template>\n                                        </ng-template>\n                                        <ng-template ngSwitchDefault>\n                                            {{ field.value }}\n                                        </ng-template>\n                                    </div>\n                                </vdr-labeled-data>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </ng-container>\n        </ng-container>\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n            <td class=\"align-middle\" colspan=\"2\"></td>\n            <td class=\"align-middle total\">\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"order-adjustment\" *ngFor=\"let discount of order.discounts\">\n            <td colspan=\"5\" class=\"left clr-align-middle\">\n                <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\n                <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\n                    couponCode\n                }}</vdr-chip>\n            </td>\n            <td class=\"clr-align-middle\">\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"sub-total\">\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"shipping\">\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n            <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n            <td colspan=\"3\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class=\"total\">\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\n            <td colspan=\"4\"></td>\n            <td class=\"clr-align-middle\">\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                    {{ order.total | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { AdjustmentType, CustomFieldConfig, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-table',\n    templateUrl: './order-table.component.html',\n    styleUrls: ['./order-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderTableComponent implements OnInit {\n    @Input() order: OrderDetail.Fragment;\n    @Input() orderLineCustomFields: CustomFieldConfig[];\n    orderLineCustomFieldsVisible = false;\n\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\n    }\n\n    get showElided(): boolean {\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\n    }\n\n    ngOnInit(): void {\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\n    }\n\n    toggleOrderLineCustomFields() {\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\n    }\n\n    getLineDiscounts(line: OrderDetail.Lines) {\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\n    }\n\n    getLineCustomFields(line: OrderDetail.Lines): Array<{ config: CustomFieldConfig; value: any }> {\n        return this.orderLineCustomFields\n            .map(config => {\n                const value = (line as any).customFields[config.name];\n                return {\n                    config,\n                    value,\n                };\n            })\n            .filter(field => {\n                return this.orderLineCustomFieldsVisible ? true : field.value != null;\n            });\n    }\n\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\n        const id = promotion.adjustmentSource.split(':')[1];\n        return ['/marketing', 'promotions', id];\n    }\n\n    getCouponCodeForAdjustment(\n        order: OrderDetail.Fragment,\n        promotionAdjustment: OrderDetail.Discounts,\n    ): string | undefined {\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\n        const promotion = order.promotions.find(p => p.id === id);\n        if (promotion) {\n            return promotion.couponCode || undefined;\n        }\n    }\n}\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\n    {{ payment.method }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\n    {{ payment.amount | localeCurrency: currencyCode }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\n    {{ payment.errorMessage }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\n    {{ payment.transactionId }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\n</vdr-labeled-data>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-payment-detail',\n    templateUrl: './payment-detail.component.html',\n    styleUrls: ['./payment-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentDetailComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n}\n","<h4>{{ 'order.order-history' | translate }}</h4>\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\n        <div class=\"note-entry\">\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\n                {{ 'common.add-note' | translate }}\n            </button>\n        </div>\n        <div class=\"visibility-select\">\n            <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\n                <label>{{ 'order.note-is-private' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\n                {{ 'order.note-only-visible-to-administrators' | translate }}\n            </span>\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\n                {{ 'order.note-visible-to-customer' | translate }}\n            </span>\n        </div>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry\n        *ngFor=\"let entry of history\"\n        [displayType]=\"getDisplayType(entry)\"\n        [iconShape]=\"getTimelineIcon(entry)\"\n        [createdAt]=\"entry.createdAt\"\n        [name]=\"getName(entry)\"\n        [featured]=\"isFeatured(entry)\"\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\n        (expandClick)=\"expanded = !expanded\"\n    >\n        <ng-container [ngSwitch]=\"entry.type\">\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\n                    {{ 'order.history-order-fulfilled' | translate }}\n                </div>\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\n                    {{ 'order.history-order-cancelled' | translate }}\n                </div>\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\n                    {{\n                        'order.history-order-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\n                <div class=\"title\">\n                    {{ 'order.history-order-modified' | translate }}\n                </div>\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\n                    {{ 'order.modify-order-price-difference' | translate }}:\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\n                        'order.modification-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\n                        'order.modification-not-settled' | translate\n                    }}</vdr-chip>\n                    <vdr-history-entry-detail>\n                        <vdr-modification-detail\n                            [order]=\"order\"\n                            [modification]=\"modification\"\n                        ></vdr-modification-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\n                    <div class=\"title\">\n                        {{ 'order.history-payment-settled' | translate }}\n                    </div>\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\n                        <vdr-payment-detail\n                            [payment]=\"payment\"\n                            [currencyCode]=\"order.currencyCode\"\n                        ></vdr-payment-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n                <ng-template #regularPaymentTransition>\n                    {{\n                        'order.history-payment-transition'\n                            | translate\n                                : {\n                                      from: entry.data.from,\n                                      to: entry.data.to,\n                                      id: getPayment(entry)?.transactionId\n                                  }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\n                {{\n                    'order.history-refund-transition'\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\n                        {{ entry.data.reason }}\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\n                    </vdr-labeled-data>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\n                {{ 'order.history-fulfillment-created' | translate }}\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-delivered' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\n                    <div class=\"title\">\n                        {{ 'order.history-fulfillment-shipped' | translate }}\n                    </div>\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\n                    {{\n                        'order.history-fulfillment-transition'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-container>\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]=\"fulfillment.id\"\n                        [order]=\"order\"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\n                <div class=\"flex\">\n                    <div class=\"note-text\">\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\n                            'common.public' | translate\n                        }}</span>\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\n                            'common.private' | translate\n                        }}</span>\n                        {{ entry.data.note }}\n                    </div>\n                    <div class=\"flex-spacer\"></div>\n                    <vdr-dropdown>\n                        <button class=\"icon-button\" vdrDropdownTrigger>\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"updateNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"edit\"></clr-icon>\n                                {{ 'common.edit' | translate }}\n                            </button>\n                            <div class=\"dropdown-divider\"></div>\n                            <button\n                                class=\"button\"\n                                vdrDropdownItem\n                                (click)=\"deleteNote.emit(entry)\"\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\n                            >\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                                {{ 'common.delete' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\n                {{ 'order.history-coupon-code-applied' | translate }}:\n                <vdr-chip>\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\n                        entry.data.couponCode\n                    }}</a>\n                </vdr-chip>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\n                {{ 'order.history-coupon-code-removed' | translate }}:\n                <vdr-chip\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\n                >\n            </ng-container>\n        </ng-container>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\n        <div class=\"title\">\n            {{ 'order.history-order-created' | translate }}\n        </div>\n    </vdr-timeline-entry>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    GetOrderHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    OrderDetail,\n    OrderDetailFragment,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-history',\n    templateUrl: './order-history.component.html',\n    styleUrls: ['./order-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent {\n    @Input() order: OrderDetailFragment;\n    @Input() history: GetOrderHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    noteIsPrivate = true;\n    expanded = false;\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return 'success';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\n                return 'error';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\n            return 'error';\n        }\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\n            return 'warning';\n        }\n        return 'default';\n    }\n\n    getTimelineIcon(entry: GetOrderHistory.Items) {\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\n            if (entry.data.to === 'Delivered') {\n                return ['success-standard', 'is-solid'];\n            }\n            if (entry.data.to === 'Cancelled') {\n                return 'ban';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\n            if (entry.data.to === 'Settled') {\n                return 'credit-card';\n            }\n        }\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\n            return 'note';\n        }\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\n            return 'pencil';\n        }\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\n            if (entry.data.to === 'Shipped') {\n                return 'truck';\n            }\n            if (entry.data.to === 'Delivered') {\n                return 'truck';\n            }\n        }\n    }\n\n    isFeatured(entry: GetOrderHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\n                return (\n                    entry.data.to === 'Delivered' ||\n                    entry.data.to === 'Cancelled' ||\n                    entry.data.to === 'Settled'\n                );\n            }\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\n            case HistoryEntryType.ORDER_NOTE:\n            case HistoryEntryType.ORDER_MODIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\n        if (\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\n            this.order.fulfillments\n        ) {\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\n        }\n    }\n\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\n        }\n    }\n\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\n        const itemMap = new Map<string, number>();\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\n        for (const line of this.order.lines) {\n            for (const item of line.items) {\n                if (cancelledItemIds.includes(item.id)) {\n                    const count = itemMap.get(line.productVariant.name);\n                    if (count != null) {\n                        itemMap.set(line.productVariant.name, count + 1);\n                    } else {\n                        itemMap.set(line.productVariant.name, 1);\n                    }\n                }\n            }\n        }\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\n    }\n\n    getModification(id: string) {\n        return this.order.modifications.find(m => m.id === id);\n    }\n\n    getName(entry: GetOrderHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            const customer = this.order.customer;\n            if (customer) {\n                return `${customer.firstName} ${customer.lastName}`;\n            }\n        }\n        return '';\n    }\n\n    addNoteToOrder() {\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\n        this.note = '';\n        this.noteIsPrivate = true;\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-payment-state-label',\n    templateUrl: './payment-state-label.component.html',\n    styleUrls: ['./payment-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Authorized':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Declined':\n            case 'Cancelled':\n                return 'error';\n        }\n    }\n}\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'vdr-refund-state-label',\n    templateUrl: './refund-state-label.component.html',\n    styleUrls: ['./refund-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RefundStateLabelComponent {\n    @Input() state: string;\n\n    get chipColorType() {\n        switch (this.state) {\n            case 'Pending':\n                return 'warning';\n            case 'Settled':\n                return 'success';\n            case 'Failed':\n                return 'error';\n        }\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-header payment-header\">\n        <div>\n            {{ 'order.payment' | translate }}\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\n        </div>\n        <div class=\"payment-state\">\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\n        </div>\n    </div>\n    <div class=\"card-block\">\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\n    </div>\n    <ng-container *ngFor=\"let refund of payment.refunds\">\n        <div class=\"card-header payment-header\">\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\n            {{ 'order.refund' | translate }} #{{ refund.id }}\n            <div class=\"clr-flex-fill\"></div>\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\n        </div>\n        <div class=\"card-block\">\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\n                {{ refund.createdAt | localeDate: 'medium' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\n                {{ refund.total | localeCurrency: currencyCode }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\n                {{ refund.transactionId }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\n                {{ refund.reason }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\n            </vdr-labeled-data>\n        </div>\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\n                {{ 'order.settle-refund' | translate }}\n            </button>\n        </div>\n    </ng-container>\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\n        <button\n            class=\"btn btn-sm btn-primary\"\n            *ngIf=\"payment.nextStates.includes('Settled')\"\n            (click)=\"settlePayment.emit(payment)\"\n        >\n            {{ 'order.settle-payment' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\n                    <button\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\n                    >\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\n                            {{\n                                'order.transition-to-state'\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\n                            }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                            {{ 'order.cancel-payment' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CurrencyCode } from '@vendure/admin-ui/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-order-payment-card',\n    templateUrl: './order-payment-card.component.html',\n    styleUrls: ['./order-payment-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderPaymentCardComponent {\n    @Input() payment: OrderDetail.Payments;\n    @Input() currencyCode: CurrencyCode;\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\n\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\n        return !!refund && Object.keys(refund.metadata).length > 0;\n    }\n\n    nextOtherStates(): string[] {\n        if (!this.payment) {\n            return [];\n        }\n        return this.payment.nextStates.filter(s => s !== 'Settled');\n    }\n}\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\">\n                <button\n                    class=\"icon-button\"\n                    (click)=\"openStateDiagram()\"\n                    [title]=\"'order.order-state-diagram' | translate\"\n                >\n                    <clr-icon shape=\"list\"></clr-icon>\n                </button>\n            </vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"\n                order.state === 'ArrangingAdditionalPayment' &&\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\n            \"\n            (click)=\"addManualPayment(order)\"\n        >\n            {{ 'order.add-payment-to-order' | translate }}\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\n        </button>\n        <button\n            class=\"btn btn-primary\"\n            *ngIf=\"order.state !== 'ArrangingAdditionalPayment' && 0 < outstandingPaymentAmount(order)\"\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\n        >\n            {{ 'order.arrange-additional-payment' | translate }}\n        </button>\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\n            {{ 'order.fulfill-order' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class=\"icon-button\" vdrDropdownTrigger>\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\n                        <clr-icon shape=\"pencil\"></clr-icon>\n                        {{ 'order.modify-order' | translate }}\n                    </button>\n                    <div class=\"dropdown-divider\"></div>\n                </ng-container>\n                <button\n                    type=\"button\"\n                    class=\"btn\"\n                    vdrDropdownItem\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\n                    (click)=\"cancelOrRefund(order)\"\n                >\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\n                        {{ 'order.refund-and-cancel-order' | translate }}\n                    </ng-container>\n                    <ng-template #cancelOnly>\n                        {{ 'order.cancel-order' | translate }}\n                    </ng-template>\n                </button>\n\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\n                    <div class=\"dropdown-divider\"></div>\n                    <button\n                        *ngFor=\"let nextState of nextStates$ | async\"\n                        type=\"button\"\n                        class=\"btn\"\n                        vdrDropdownItem\n                        (click)=\"transitionToState(nextState)\"\n                    >\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\n                        {{\n                            'order.transition-to-state'\n                                | translate: { state: (nextState | stateI18nToken | translate) }\n                        }}\n                    </button>\n                </ng-container>\n                <div class=\"dropdown-divider\"></div>\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\n                    {{ 'order.manually-transition-to-state' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <vdr-order-table\n                [order]=\"order\"\n                [orderLineCustomFields]=\"orderLineCustomFields\"\n            ></vdr-order-table>\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th>{{ 'common.description' | translate }}</th>\n                        <th>{{ 'order.tax-rate' | translate }}</th>\n                        <th>{{ 'order.tax-base' | translate }}</th>\n                        <th>{{ 'order.tax-total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of order.taxSummary\">\n                        <td>{{ row.description }}</td>\n                        <td>{{ row.taxRate / 100 | percent }}</td>\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <vdr-order-history\n                [order]=\"order\"\n                [history]=\"history$ | async\"\n                (addNote)=\"addNote($event)\"\n                (updateNote)=\"updateNote($event)\"\n                (deleteNote)=\"deleteNote($event)\"\n            ></vdr-order-history>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]=\"customFields\"\n                [customFieldValues]=\"order.customFields\"\n                (updateClick)=\"updateCustomFields($event)\"\n            ></vdr-order-custom-fields-card>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.customer' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <div class=\"card-text\">\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\n                            {{ 'order.shipping-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\n                            {{ 'order.billing-address' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\n                    </div>\n                </div>\n            </div>\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\n                <vdr-order-payment-card\n                    *ngFor=\"let payment of order.payments\"\n                    [currencyCode]=\"order.currencyCode\"\n                    [payment]=\"payment\"\n                    (settlePayment)=\"settlePayment($event)\"\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\n                    (settleRefund)=\"settleRefund($event)\"\n                ></vdr-order-payment-card>\n            </ng-container>\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\n                <vdr-fulfillment-card\n                    [fulfillment]=\"fulfillment\"\n                    [order]=\"order\"\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\n                ></vdr-fulfillment-card>\n            </ng-container>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CancelOrder,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    GetOrderHistory,\n    GetOrderQuery,\n    HistoryEntry,\n    HistoryEntryType,\n    ModalService,\n    NotificationService,\n    Order,\n    OrderDetail,\n    OrderDetailFragment,\n    OrderLineFragment,\n    RefundOrder,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { pick } from '@vendure/common/lib/pick';\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\n\n@Component({\n    selector: 'vdr-order-detail',\n    templateUrl: './order-detail.component.html',\n    styleUrls: ['./order-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderDetailComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy {\n    detailForm = new FormGroup({});\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\n    nextStates$: Observable<string[]>;\n    fetchHistory = new Subject<void>();\n    customFields: CustomFieldConfig[];\n    orderLineCustomFields: CustomFieldConfig[];\n    private readonly defaultStates = [\n        'AddingItems',\n        'ArrangingPayment',\n        'PaymentAuthorized',\n        'PaymentSettled',\n        'PartiallyShipped',\n        'Shipped',\n        'PartiallyDelivered',\n        'Delivered',\n        'Cancelled',\n        'Modifying',\n        'ArrangingAdditionalPayment',\n    ];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    ngOnInit() {\n        this.init();\n        this.entity$.pipe(take(1)).subscribe(order => {\n            if (order.state === 'Modifying') {\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\n            }\n        });\n        this.customFields = this.getCustomFieldConfig('Order');\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.order\n                    .getOrderHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.order?.history.items);\n            }),\n        );\n        this.nextStates$ = this.entity$.pipe(\n            map(order => {\n                const isInCustomState = !this.defaultStates.includes(order.state);\n                return isInCustomState\n                    ? order.nextStates\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    openStateDiagram() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order =>\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\n                        closable: true,\n                        locals: {\n                            activeState: order.state,\n                        },\n                    }),\n                ),\n            )\n            .subscribe();\n    }\n\n    transitionToState(state: string) {\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\n            switch (transitionOrderToState?.__typename) {\n                case 'Order':\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                    this.notificationService.error(transitionOrderToState.transitionError);\n            }\n        });\n    }\n\n    manuallyTransitionToState(order: OrderDetailFragment) {\n        this.orderTransitionService\n            .manuallyTransitionToState({\n                orderId: order.id,\n                nextStates: order.nextStates,\n                cancellable: true,\n                message: _('order.manually-transition-to-state-message'),\n                retry: 0,\n            })\n            .subscribe();\n    }\n\n    transitionToModifying() {\n        this.dataService.order\n            .transitionToState(this.id, 'Modifying')\n            .subscribe(({ transitionOrderToState }) => {\n                switch (transitionOrderToState?.__typename) {\n                    case 'Order':\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\n                        break;\n                    case 'OrderStateTransitionError':\n                        this.notificationService.error(transitionOrderToState.transitionError);\n                }\n            });\n    }\n\n    updateCustomFields(customFieldsValue: any) {\n        this.dataService.order\n            .updateOrderCustomFields({\n                id: this.id,\n                customFields: customFieldsValue,\n            })\n            .subscribe(() => {\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\n            });\n    }\n\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\n        if (!orderAddress) {\n            return [];\n        }\n        return Object.values(orderAddress)\n            .filter(val => val !== 'OrderAddress')\n            .filter(line => !!line);\n    }\n\n    settlePayment(payment: OrderDetail.Payments) {\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\n            switch (settlePayment.__typename) {\n                case 'Payment':\n                    if (settlePayment.state === 'Settled') {\n                        this.notificationService.success(_('order.settle-payment-success'));\n                    } else {\n                        this.notificationService.error(_('order.settle-payment-error'));\n                    }\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\n                    this.fetchHistory.next();\n                    break;\n                case 'OrderStateTransitionError':\n                case 'PaymentStateTransitionError':\n                case 'SettlePaymentError':\n                    this.notificationService.error(settlePayment.message);\n            }\n        });\n    }\n\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\n        this.dataService.order\n            .transitionPaymentToState(payment.id, state)\n            .subscribe(({ transitionPaymentToState }) => {\n                switch (transitionPaymentToState.__typename) {\n                    case 'Payment':\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\n                            state,\n                        });\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\n                        this.fetchHistory.next();\n                        break;\n                    case 'PaymentStateTransitionError':\n                        this.notificationService.error(transitionPaymentToState.message);\n                        break;\n                }\n            });\n    }\n\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\n        const allItemsFulfilled = order.lines\n            .reduce((items, line) => [...items, ...line.items], [] as OrderLineFragment['items'])\n            .every(item => !!item.fulfillment);\n        return (\n            !allItemsFulfilled &&\n            !this.hasUnsettledModifications(order) &&\n            this.outstandingPaymentAmount(order) === 0 &&\n            (order.nextStates.includes('Shipped') ||\n                order.nextStates.includes('PartiallyShipped') ||\n                order.nextStates.includes('Delivered'))\n        );\n    }\n\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\n    }\n\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\n        return summate(\n            order.modifications.filter(m => !m.isSettled),\n            'priceChange',\n        );\n    }\n\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\n        const validPayments = order.payments?.filter(paymentIsValid).map(p => pick(p, ['amount'])) ?? [];\n        const amountCovered = summate(validPayments, 'amount');\n        return order.totalWithTax - amountCovered;\n    }\n\n    addManualPayment(order: OrderDetailFragment) {\n        this.modalService\n            .fromComponent(AddManualPaymentDialogComponent, {\n                closable: true,\n                locals: {\n                    outstandingAmount: this.outstandingPaymentAmount(order),\n                    currencyCode: order.currencyCode,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.addManualPaymentToOrder({\n                            orderId: this.id,\n                            transactionId: result.transactionId,\n                            method: result.method,\n                            metadata: result.metadata || {},\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n                switchMap(({ addManualPaymentToOrder }) => {\n                    switch (addManualPaymentToOrder.__typename) {\n                        case 'Order':\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\n                            return this.orderTransitionService.transitionToPreModifyingState(\n                                order.id,\n                                order.nextStates,\n                            );\n                        case 'ManualPaymentStateError':\n                            this.notificationService.error(addManualPaymentToOrder.message);\n                            return EMPTY;\n                        default:\n                            return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.refetchOrder({ result });\n                }\n            });\n    }\n\n    fulfillOrder() {\n        this.entity$\n            .pipe(\n                take(1),\n                switchMap(order => {\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\n                        size: 'xl',\n                        locals: {\n                            order,\n                        },\n                    });\n                }),\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.createFulfillment(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\n            )\n            .subscribe(result => {\n                if (result) {\n                    switch (result.addFulfillmentToOrder.__typename) {\n                        case 'Fulfillment':\n                            this.notificationService.success(_('order.create-fulfillment-success'));\n                            break;\n                        case 'EmptyOrderLineSelectionError':\n                        case 'InsufficientStockOnHandError':\n                        case 'ItemsAlreadyFulfilledError':\n                            this.notificationService.error(result.addFulfillmentToOrder.message);\n                            break;\n                    }\n                }\n            });\n    }\n\n    transitionFulfillment(id: string, state: string) {\n        this.dataService.order\n            .transitionFulfillmentToState(id, state)\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(() => {\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\n            });\n    }\n\n    cancelOrRefund(order: OrderDetail.Fragment) {\n        const isRefundable = this.orderHasSettledPayments(order);\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\n            this.cancelOrder(order);\n        } else {\n            this.refundOrder(order);\n        }\n    }\n\n    settleRefund(refund: OrderDetail.Refunds) {\n        this.modalService\n            .fromComponent(SettleRefundDialogComponent, {\n                size: 'md',\n                locals: {\n                    refund,\n                },\n            })\n            .pipe(\n                switchMap(transactionId => {\n                    if (transactionId) {\n                        return this.dataService.order.settleRefund(\n                            {\n                                transactionId,\n                                id: refund.id,\n                            },\n                            this.id,\n                        );\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                // switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.settle-refund-success'));\n                }\n            });\n    }\n\n    addNote(event: { note: string; isPublic: boolean }) {\n        const { note, isPublic } = event;\n        this.dataService.order\n            .addNoteToOrder({\n                id: this.id,\n                note,\n                isPublic,\n            })\n            .pipe(switchMap(result => this.refetchOrder(result)))\n            .subscribe(result => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: true,\n                    note: entry.data.note,\n                    noteIsPrivate: !entry.isPublic,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.order.updateOrderNote({\n                            noteId: entry.id,\n                            isPublic: !result.isPrivate,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\n        return !!order.payments?.find(p => p.state === 'Settled');\n    }\n\n    private cancelOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(CancelOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (input) {\n                        return this.dataService.order.cancelOrder(input);\n                    } else {\n                        return of(undefined);\n                    }\n                }),\n                switchMap(result => this.refetchOrder(result)),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.notificationService.success(_('order.cancelled-order-success'));\n                }\n            });\n    }\n\n    private refundOrder(order: OrderDetail.Fragment) {\n        this.modalService\n            .fromComponent(RefundOrderDialogComponent, {\n                size: 'xl',\n                locals: {\n                    order,\n                },\n            })\n            .pipe(\n                switchMap(input => {\n                    if (!input) {\n                        return of(undefined);\n                    }\n\n                    const operations: Array<\n                        Observable<RefundOrder.RefundOrder | CancelOrder.CancelOrder>\n                    > = [];\n                    if (input.refund.lines.length) {\n                        operations.push(\n                            this.dataService.order\n                                .refundOrder(input.refund)\n                                .pipe(map(res => res.refundOrder)),\n                        );\n                    }\n                    if (input.cancel.lines?.length) {\n                        operations.push(\n                            this.dataService.order\n                                .cancelOrder(input.cancel)\n                                .pipe(map(res => res.cancelOrder)),\n                        );\n                    }\n                    return merge(...operations);\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    switch (result.__typename) {\n                        case 'Order':\n                            this.refetchOrder(result).subscribe();\n                            this.notificationService.success(_('order.cancelled-order-success'));\n                            break;\n                        case 'Refund':\n                            this.refetchOrder(result).subscribe();\n                            if (result.state === 'Failed') {\n                                this.notificationService.error(_('order.refund-order-failed'));\n                            } else {\n                                this.notificationService.success(_('order.refund-order-success'));\n                            }\n                            break;\n                        case 'QuantityTooGreatError':\n                        case 'MultipleOrderError':\n                        case 'OrderStateTransitionError':\n                        case 'CancelActiveOrderError':\n                        case 'EmptyOrderLineSelectionError':\n                        case 'AlreadyRefundedError':\n                        case 'NothingToRefundError':\n                        case 'PaymentOrderMismatchError':\n                        case 'RefundOrderStateError':\n                        case 'RefundStateTransitionError':\n                            this.notificationService.error(result.message);\n                            break;\n                    }\n                }\n            });\n    }\n\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\n        this.fetchHistory.next();\n        if (result) {\n            return this.dataService.order.getOrder(this.id).single$;\n        } else {\n            return of(undefined);\n        }\n    }\n\n    protected setFormValues(entity: Order.Fragment): void {\n        // empty\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\n\nexport enum OrderEditResultType {\n    Refund,\n    Payment,\n    PriceUnchanged,\n    Cancel,\n}\n\ninterface OrderEditsRefundResult {\n    result: OrderEditResultType.Refund;\n    refundPaymentId: string;\n    refundNote?: string;\n}\ninterface OrderEditsPaymentResult {\n    result: OrderEditResultType.Payment;\n}\ninterface OrderEditsPriceUnchangedResult {\n    result: OrderEditResultType.PriceUnchanged;\n}\ninterface OrderEditsCancelResult {\n    result: OrderEditResultType.Cancel;\n}\ntype OrderEditResult =\n    | OrderEditsRefundResult\n    | OrderEditsPaymentResult\n    | OrderEditsPriceUnchangedResult\n    | OrderEditsCancelResult;\n\n@Component({\n    selector: 'vdr-order-edits-preview-dialog',\n    templateUrl: './order-edits-preview-dialog.component.html',\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\n    // Passed in via the modalService\n    order: OrderDetail.Fragment;\n    originalTotalWithTax: number;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderInput;\n\n    selectedPayment?: OrderDetail.Payments;\n    refundNote: string;\n    resolveWith: (result?: OrderEditResult) => void;\n\n    get priceDifference(): number {\n        return this.order.totalWithTax - this.originalTotalWithTax;\n    }\n\n    ngOnInit() {\n        this.refundNote = this.modifyOrderInput.note || '';\n    }\n\n    cancel() {\n        this.resolveWith({\n            result: OrderEditResultType.Cancel,\n        });\n    }\n\n    submit() {\n        if (0 < this.priceDifference) {\n            this.resolveWith({\n                result: OrderEditResultType.Payment,\n            });\n        } else if (this.priceDifference < 0) {\n            this.resolveWith({\n                result: OrderEditResultType.Refund,\n                // tslint:disable-next-line:no-non-null-assertion\n                refundPaymentId: this.selectedPayment!.id,\n                refundNote: this.refundNote,\n            });\n        } else {\n            this.resolveWith({\n                result: OrderEditResultType.PriceUnchanged,\n            });\n        }\n    }\n}\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\n\n<h4 class=\"h4\">\n    {{ 'order.modify-order-price-difference' | translate }}:\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\n</h4>\n<div *ngIf=\"priceDifference < 0\">\n<clr-select-container>\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\n        <option\n            *ngFor=\"let payment of order.payments\"\n            [ngValue]=\"payment\"\n        >\n            #{{ payment.id }} {{ payment.method }}:\n            {{ payment.amount | localeCurrency: order.currencyCode }}\n        </option>\n    </select>\n</clr-select-container>\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\n</div>\n<ng-template vdrDialogButtons>\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\n        {{ 'common.confirm' | translate }}\n    </button>\n</ng-template>\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\n    <vdr-ab-left>\n        <div class=\"flex clr-align-items-center\">\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\n            {{ 'order.cancel-modification' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf=\"entity$ | async as order\">\n    <div class=\"clr-row\">\n        <div class=\"clr-col-lg-8\">\n            <table class=\"order-table table\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>{{ 'order.product-name' | translate }}</th>\n                        <th>{{ 'order.product-sku' | translate }}</th>\n                        <th>{{ 'order.unit-price' | translate }}</th>\n                        <th>{{ 'order.quantity' | translate }}</th>\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\n                        <th>{{ 'order.total' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr\n                        *ngFor=\"let line of order.lines; let i = index\"\n                        class=\"order-line\"\n                        [class.is-cancelled]=\"line.quantity === 0\"\n                        [class.modified]=\"isLineModified(line)\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"line.featuredAsset\"\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"line.quantity\"\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\n                            />\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\n                            <vdr-line-fulfillment\n                                [line]=\"line\"\n                                [orderState]=\"order.state\"\n                            ></vdr-line-fulfillment>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                                <vdr-custom-field-control\n                                    [customField]=\"customField\"\n                                    [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\n                                    entityName=\"OrderLine\"\n                                    [compact]=\"true\"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\n                        class=\"modified\"\n                    >\n                        <td class=\"align-middle thumb\">\n                            <img\n                                *ngIf=\"addedLine.productAsset\"\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\n                            />\n                        </td>\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\n                        <td class=\"align-middle unit-price\">\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class=\"align-middle quantity\">\n                            <input\n                                type=\"number\"\n                                min=\"0\"\n                                [value]=\"addedLine.quantity\"\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\n                            />\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                                <vdr-custom-field-control\n                                    [customField]=\"customField\"\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\n                                    entityName=\"OrderLine\"\n                                    [compact]=\"true\"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class=\"align-middle total\">\n                            {{\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\n                                    | currency: order.currencyCode\n                            }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{\n                                    (addedLine.price * addedLine.quantity) / 100\n                                        | currency: order.currencyCode\n                                }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        class=\"surcharge modified\"\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\n                    >\n                        <td class=\"align-middle name left\" colspan=\"2\">\n                            {{ surcharge.description }}\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\n                                <clr-icon shape=\"trash\"></clr-icon>\n                            </button>\n                        </td>\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\n                        <td class=\"align-middle\"></td>\n                        <td></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"align-middle total\">\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\n                                </div>\n                            </ng-container>\n                        </td>\n                    </tr>\n                    <tr class=\"shipping\">\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n                        <td colspan=\"3\"></td>\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\n                        <td class=\"clr-align-middle\">\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\n            <clr-accordion>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\n                        </vdr-product-selector>\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\n                            <img\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\n                                [src]=\"asset | assetPreview: 'tiny'\"\n                                class=\"mr4\"\n                            />\n                            <div>\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\n                                <small>{{ addItemSelectedVariant.sku }}</small>\n                                <div>\n                                    {{\n                                        getSelectedItemPrice(addItemSelectedVariant)\n                                            | localeCurrency: order.currencyCode\n                                    }}\n                                </div>\n                            </div>\n                        </div>\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\n                            <vdr-custom-field-control\n                                [readonly]=\"!addItemSelectedVariant\"\n                                [customField]=\"customField\"\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\n                                entityName=\"OrderLine\"\n                                [compact]=\"true\"\n                            ></vdr-custom-field-control>\n                        </ng-container>\n                        <button\n                            class=\"btn btn-secondary\"\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\n                        >\n                            {{ 'order.add-item-to-order' | translate }}\n                        </button>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\"\n                                ><vdr-currency-input\n                                    [currencyCode]=\"order.currencyCode\"\n                                    id=\"price\"\n                                    formControlName=\"price\"\n                                ></vdr-currency-input\n                            ></vdr-form-field>\n                            <vdr-form-field\n                                [label]=\"\n                                    'catalog.price-includes-tax-at'\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\n                                \"\n                                for=\"priceIncludesTax\"\n                                ><input\n                                    id=\"priceIncludesTax\"\n                                    type=\"checkbox\"\n                                    clrCheckbox\n                                    formControlName=\"priceIncludesTax\"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\"\n                                ><vdr-affixed-input suffix=\"%\"\n                                    ><input\n                                        id=\"taxRate\"\n                                        type=\"number\"\n                                        min=\"0\"\n                                        max=\"100\"\n                                        formControlName=\"taxRate\" /></vdr-affixed-input\n                            ></vdr-form-field>\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\n                            /></vdr-form-field>\n                            <button\n                                class=\"btn btn-secondary\"\n                                [disabled]=\"\n                                    surchargeForm.invalid ||\n                                    surchargeForm.pristine ||\n                                    surchargeForm.get('price')?.value === 0\n                                \"\n                            >\n                                {{ 'order.add-surcharge' | translate }}\n                            </button>\n                        </form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"shippingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]=\"billingAddressForm\"\n                            [availableCountries]=\"availableCountries$ | async\"\n                            [customFields]=\"addressCustomFields\"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n            </clr-accordion>\n        </div>\n        <div class=\"clr-col-lg-4 order-cards\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    {{ 'order.modification-summary' | translate }}\n                </div>\n                <div class=\"card-block\">\n                    <ul>\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\n                            {{\n                                'order.modification-adding-items'\n                                    | translate: { count: modifyOrderInput.addItems?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\n                            {{\n                                'order.modification-adjusting-lines'\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\n                            {{\n                                'order.modification-adding-surcharges'\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\n                            }}\n                        </li>\n                        <li *ngIf=\"shippingAddressForm.dirty\">\n                            {{ 'order.modification-updating-shipping-address' | translate }}\n                        </li>\n                        <li *ngIf=\"billingAddressForm.dirty\">\n                            {{ 'order.modification-updating-billing-address' | translate }}\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"card-block\">\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\n                    <clr-checkbox-wrapper class=\"\">\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </div>\n                <div class=\"card-footer\">\n                    <button\n                        class=\"btn btn-primary\"\n                        [disabled]=\"!canPreviewChanges()\"\n                        (click)=\"previewAndModify(order)\"\n                    >\n                        {{ 'order.preview-changes' | translate }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    AddItemInput,\n    AdjustOrderLineInput,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    ErrorResult,\n    GetAvailableCountries,\n    HistoryEntryType,\n    LanguageCode,\n    ModalService,\n    ModifyOrderInput,\n    NotificationService,\n    OrderDetail,\n    ProductSelectorSearch,\n    ServerConfigService,\n    SortOrder,\n    SurchargeInput,\n} from '@vendure/admin-ui/core';\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { mapTo, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { OrderTransitionService } from '../../providers/order-transition.service';\nimport {\n    OrderEditResultType,\n    OrderEditsPreviewDialogComponent,\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\n\ninterface AddedLine {\n    productVariantId: string;\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\n    productVariantName: string;\n    sku: string;\n    priceWithTax: number;\n    price: number;\n    quantity: number;\n}\n\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\n    addItems: Array<AddItemInput & { customFields?: any }>;\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\n};\n\n@Component({\n    selector: 'vdr-order-editor',\n    templateUrl: './order-editor.component.html',\n    styleUrls: ['./order-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderEditorComponent\n    extends BaseDetailComponent<OrderDetail.Fragment>\n    implements OnInit, OnDestroy {\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    addressCustomFields: CustomFieldConfig[];\n    detailForm = new FormGroup({});\n    orderLineCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsFormArray: FormArray;\n    addItemCustomFieldsForm: FormGroup;\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\n    orderLineCustomFields: CustomFieldConfig[];\n    modifyOrderInput: ModifyOrderData = {\n        dryRun: true,\n        orderId: '',\n        addItems: [],\n        adjustOrderLines: [],\n        surcharges: [],\n        note: '',\n        updateShippingAddress: {},\n        updateBillingAddress: {},\n    };\n    surchargeForm: FormGroup;\n    shippingAddressForm: FormGroup;\n    billingAddressForm: FormGroup;\n    note = '';\n    recalculateShipping = true;\n    previousState: string;\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private orderTransitionService: OrderTransitionService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n    }\n\n    get addedLines(): AddedLine[] {\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\n            price.__typename === 'SinglePrice' ? price.value : 0;\n        return (this.modifyOrderInput.addItems || [])\n            .map(row => {\n                const variantInfo = this.addedVariants.get(row.productVariantId);\n                if (variantInfo) {\n                    return {\n                        ...variantInfo,\n                        price: getSinglePriceValue(variantInfo.price),\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\n                        quantity: row.quantity,\n                    };\n                }\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\n            this.surchargeForm = new FormGroup({\n                description: new FormControl('', Validators.required),\n                sku: new FormControl(''),\n                price: new FormControl(0, Validators.required),\n                priceIncludesTax: new FormControl(true),\n                taxRate: new FormControl(0),\n                taxDescription: new FormControl(''),\n            });\n            if (!this.shippingAddressForm) {\n                this.shippingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.shippingAddress?.fullName),\n                    company: new FormControl(order.shippingAddress?.company),\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\n                    city: new FormControl(order.shippingAddress?.city),\n                    province: new FormControl(order.shippingAddress?.province),\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\n                });\n            }\n            if (!this.billingAddressForm) {\n                this.billingAddressForm = new FormGroup({\n                    fullName: new FormControl(order.billingAddress?.fullName),\n                    company: new FormControl(order.billingAddress?.company),\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\n                    city: new FormControl(order.billingAddress?.city),\n                    province: new FormControl(order.billingAddress?.province),\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\n                });\n            }\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\n            for (const line of order.lines) {\n                const formGroup = new FormGroup({});\n                for (const { name } of this.orderLineCustomFields) {\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\n                }\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\n                        l => l.orderLineId === line.id,\n                    );\n                    if (!modifyRow) {\n                        modifyRow = {\n                            orderLineId: line.id,\n                            quantity: line.quantity,\n                        };\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\n                    }\n                    if (this.orderLineCustomFields.length) {\n                        modifyRow.customFields = value;\n                    }\n                });\n                this.orderLineCustomFieldsFormArray.push(formGroup);\n            }\n        });\n        this.addItemCustomFieldsFormArray = new FormArray([]);\n        this.addItemCustomFieldsForm = new FormGroup({});\n        for (const customField of this.orderLineCustomFields) {\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\n        }\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n        this.dataService.order\n            .getOrderHistory(this.id, {\n                take: 1,\n                sort: {\n                    createdAt: SortOrder.DESC,\n                },\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\n            })\n            .single$.subscribe(({ order }) => {\n                this.previousState = order?.history.items[0].data.from;\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    transitionToPriorState(order: OrderDetail.Fragment) {\n        this.orderTransitionService\n            .transitionToPreModifyingState(order.id, order.nextStates)\n            .subscribe(result => {\n                this.router.navigate(['..'], { relativeTo: this.route });\n            });\n    }\n\n    canPreviewChanges(): boolean {\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\n        return (\n            !!addItems?.length ||\n            !!surcharges?.length ||\n            !!adjustOrderLines?.length ||\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid)\n        );\n    }\n\n    isLineModified(line: OrderDetail.Lines): boolean {\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\n        );\n    }\n\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\n        const { adjustOrderLines } = this.modifyOrderInput;\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\n        if (row && +quantity === line.quantity) {\n            // Remove the modification if the quantity is the same as\n            // the original order\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\n        }\n        if (!row) {\n            row = { orderLineId: line.id, quantity: +quantity };\n            adjustOrderLines?.push(row);\n        }\n        row.quantity = +quantity;\n    }\n\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\n        if (row) {\n            row.quantity = +quantity;\n        }\n    }\n\n    trackByProductVariantId(index: number, item: AddedLine) {\n        return item.productVariantId;\n    }\n\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\n        switch (result?.priceWithTax.__typename) {\n            case 'SinglePrice':\n                return result.priceWithTax.value;\n            default:\n                return 0;\n        }\n    }\n\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\n        if (!result) {\n            return;\n        }\n        const customFields = this.orderLineCustomFields.length\n            ? this.addItemCustomFieldsForm.value\n            : undefined;\n        let row = this.modifyOrderInput.addItems?.find(l =>\n            this.isMatchingAddItemRow(l, result, customFields),\n        );\n        if (!row) {\n            row = { productVariantId: result.productVariantId, quantity: 1 };\n            if (customFields) {\n                row.customFields = customFields;\n            }\n            this.modifyOrderInput.addItems?.push(row);\n        } else {\n            row.quantity++;\n        }\n        if (customFields) {\n            const formGroup = new FormGroup({});\n            for (const [key, value] of Object.entries(customFields)) {\n                formGroup.addControl(key, new FormControl(value));\n            }\n            this.addItemCustomFieldsFormArray.push(formGroup);\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\n                if (row) {\n                    row.customFields = value;\n                }\n            });\n        }\n        this.addItemCustomFieldsForm.reset({});\n        this.addItemSelectedVariant = undefined;\n        this.addedVariants.set(result.productVariantId, result);\n    }\n\n    private isMatchingAddItemRow(\n        row: ModifyOrderData['addItems'][number],\n        result: ProductSelectorSearch.Items,\n        customFields: any,\n    ): boolean {\n        return (\n            row.productVariantId === result.productVariantId &&\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\n        );\n    }\n\n    removeAddedItem(index: number) {\n        this.modifyOrderInput.addItems.splice(index, 1);\n        if (-1 < index) {\n            this.addItemCustomFieldsFormArray.removeAt(index);\n        }\n    }\n\n    getSurchargePrices(surcharge: SurchargeInput) {\n        const priceWithTax = surcharge.priceIncludesTax\n            ? surcharge.price\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\n        const price = surcharge.priceIncludesTax\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\n            : surcharge.price;\n        return {\n            price,\n            priceWithTax,\n        };\n    }\n\n    addSurcharge(value: any) {\n        this.modifyOrderInput.surcharges?.push(value);\n        this.surchargeForm.reset({\n            price: 0,\n            priceIncludesTax: true,\n            taxRate: 0,\n        });\n    }\n\n    removeSurcharge(index: number) {\n        this.modifyOrderInput.surcharges?.splice(index, 1);\n    }\n\n    previewAndModify(order: OrderDetail.Fragment) {\n        const input: ModifyOrderInput = {\n            ...this.modifyOrderInput,\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\n            ...(this.shippingAddressForm.dirty\n                ? { updateShippingAddress: this.shippingAddressForm.value }\n                : {}),\n            dryRun: true,\n            note: this.note ?? '',\n            options: {\n                recalculateShipping: this.recalculateShipping,\n            },\n        };\n        const originalTotalWithTax = order.totalWithTax;\n        this.dataService.order\n            .modifyOrder(input)\n            .pipe(\n                switchMap(({ modifyOrder }) => {\n                    switch (modifyOrder.__typename) {\n                        case 'Order':\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\n                                size: 'xl',\n                                closable: false,\n                                locals: {\n                                    originalTotalWithTax,\n                                    order: modifyOrder,\n                                    orderLineCustomFields: this.orderLineCustomFields,\n                                    modifyOrderInput: input,\n                                },\n                            });\n                        case 'InsufficientStockError':\n                        case 'NegativeQuantityError':\n                        case 'NoChangesSpecifiedError':\n                        case 'OrderLimitError':\n                        case 'OrderModificationStateError':\n                        case 'PaymentMethodMissingError':\n                        case 'RefundPaymentIdMissingError': {\n                            this.notificationService.error(modifyOrder.message);\n                            return of(false as const);\n                        }\n                        case null:\n                        case undefined:\n                            return of(false as const);\n                        default:\n                            assertNever(modifyOrder);\n                    }\n                }),\n                switchMap(result => {\n                    if (!result || result.result === OrderEditResultType.Cancel) {\n                        // re-fetch so that the preview values get overwritten in the cache.\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\n                    } else {\n                        // Do the modification\n                        const wetRunInput = {\n                            ...input,\n                            dryRun: false,\n                        };\n                        if (result.result === OrderEditResultType.Refund) {\n                            wetRunInput.refund = {\n                                paymentId: result.refundPaymentId,\n                                reason: result.refundNote,\n                            };\n                        }\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\n                            switchMap(({ modifyOrder }) => {\n                                if (modifyOrder.__typename === 'Order') {\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\n                                    const nextState =\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\n\n                                    return this.dataService.order\n                                        .transitionToState(order.id, nextState)\n                                        .pipe(mapTo(true));\n                                } else {\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\n                                    return EMPTY;\n                                }\n                            }),\n                        );\n                    }\n                }),\n            )\n            .subscribe(result => {\n                if (result) {\n                    this.router.navigate(['../'], { relativeTo: this.route });\n                }\n            });\n    }\n\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\n        /* not used */\n    }\n}\n","<vdr-action-bar>\n    <vdr-ab-left>\n        <div class=\"search-form\">\n            <div class=\"btn-group btn-outline-primary\" *ngIf=\"activePreset$ | async as activePreset\">\n                <button\n                    class=\"btn\"\n                    *ngFor=\"let preset of filterPresets\"\n                    [class.btn-primary]=\"activePreset === preset.name\"\n                    (click)=\"selectFilterPreset(preset.name)\"\n                >\n                    {{ preset.label | translate }}\n                </button>\n                <button\n                    class=\"btn\"\n                    [class.btn-primary]=\"activePreset === 'custom'\"\n                    (click)=\"selectFilterPreset('custom')\"\n                >\n                    {{ 'order.filter-custom' | translate }}\n                    <clr-icon shape=\"angle down\"></clr-icon>\n                </button>\n            </div>\n\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"searchOrderCodeControl\"\n                [placeholder]=\"'order.search-by-order-code' | translate\"\n                class=\"search-input\"\n            />\n            <input\n                type=\"text\"\n                name=\"searchTerm\"\n                [formControl]=\"searchLastNameControl\"\n                [placeholder]=\"'order.search-by-customer-last-name' | translate\"\n                class=\"search-input\"\n            />\n        </div>\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\n            <form [formGroup]=\"customFilterForm\">\n                <div class=\"flex align-center\">\n                    <ng-select\n                        [items]=\"orderStates\"\n                        appendTo=\"body\"\n                        [addTag]=\"false\"\n                        [multiple]=\"true\"\n                        formControlName=\"states\"\n                        [placeholder]=\"'state.all-orders' | translate\"\n                        [clearable]=\"true\"\n                        [searchable]=\"false\"\n                    >\n                        <ng-template ng-option-tmp let-item=\"item\">{{ item | stateI18nToken | translate }}</ng-template>\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">×</span>\n                        </ng-template>\n                    </ng-select>\n                    <button\n                        class=\"btn btn-secondary\"\n                        [disabled]=\"customFilterForm.pristine\"\n                        (click)=\"applyCustomFilters()\"\n                    >\n                        {{ 'order.apply-filters' | translate }}\n                        <clr-icon shape=\"filter\"></clr-icon>\n                    </button>\n                </div>\n                <div class=\"flex\">\n                    <div>\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\n                    </div>\n                    <div>\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-order=\"item\">\n        <td class=\"left align-middle\">{{ order.code }}</td>\n        <td class=\"left align-middle\">\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\n        </td>\n        <td class=\"left align-middle\">\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n        </td>\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\n        <td class=\"left align-middle\">{{ order.updatedAt | timeAgo }}</td>\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | localeDate: 'medium' }}</td>\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"shopping-cart\"\n                [label]=\"'common.open' | translate\"\n                [linkTo]=\"order.state === 'Modifying' ? ['./', order.id, 'modify'] : ['./', order.id]\"\n            ></vdr-table-row-action>\n        </td>\n    </ng-template>\n</vdr-data-table>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetOrderList,\n    LocalStorageService,\n    OrderListOptions,\n    ServerConfigService,\n    SortOrder,\n} from '@vendure/admin-ui/core';\nimport { Order } from '@vendure/common/lib/generated-types';\nimport { merge, Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map, skip, takeUntil, tap } from 'rxjs/operators';\n\ninterface OrderFilterConfig {\n    active?: boolean;\n    states?: string[];\n}\n\ninterface FilterPreset {\n    name: string;\n    label: string;\n    config: OrderFilterConfig;\n}\n\n@Component({\n    selector: 'vdr-order-list',\n    templateUrl: './order-list.component.html',\n    styleUrls: ['./order-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderListComponent\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\n    implements OnInit {\n    searchOrderCodeControl = new FormControl('');\n    searchLastNameControl = new FormControl('');\n    customFilterForm: FormGroup;\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\n    filterPresets: FilterPreset[] = [\n        {\n            name: 'open',\n            label: _('order.filter-preset-open'),\n            config: {\n                active: false,\n                states: this.orderStates.filter(\n                    s => s !== 'Delivered' && s !== 'Cancelled' && s !== 'Shipped',\n                ),\n            },\n        },\n        {\n            name: 'shipped',\n            label: _('order.filter-preset-shipped'),\n            config: {\n                active: false,\n                states: ['Shipped'],\n            },\n        },\n        {\n            name: 'completed',\n            label: _('order.filter-preset-completed'),\n            config: {\n                active: false,\n                states: ['Delivered', 'Cancelled'],\n            },\n        },\n        {\n            name: 'active',\n            label: _('order.filter-preset-active'),\n            config: {\n                active: true,\n            },\n        },\n    ];\n    activePreset$: Observable<string>;\n\n    constructor(\n        private serverConfigService: ServerConfigService,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            // tslint:disable-next-line:no-shadowed-variable\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\n            data => data.orders,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) =>\n                this.createQueryOptions(\n                    skip,\n                    take,\n                    this.searchOrderCodeControl.value,\n                    this.searchLastNameControl.value,\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\n                ),\n        );\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\n        if (lastFilters) {\n            this.setQueryParam(lastFilters, { replaceUrl: true });\n        }\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.activePreset$ = this.route.queryParamMap.pipe(\n            map(qpm => qpm.get('filter') || 'open'),\n            distinctUntilChanged(),\n        );\n        const searchTerms$ = merge(\n            this.searchOrderCodeControl.valueChanges,\n            this.searchLastNameControl.valueChanges,\n        ).pipe(\n            filter(value => 2 < value.length || value.length === 0),\n            debounceTime(250),\n        );\n        merge(searchTerms$, this.route.queryParamMap)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(val => {\n                this.refresh();\n            });\n\n        const queryParamMap = this.route.snapshot.queryParamMap;\n        this.customFilterForm = new FormGroup({\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\n        });\n    }\n\n    selectFilterPreset(presetName: string) {\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\n        this.setQueryParam(\n            {\n                filter: presetName,\n                page: 1,\n                ...filters,\n            },\n            { replaceUrl: true },\n        );\n    }\n\n    applyCustomFilters() {\n        const formValue = this.customFilterForm.value;\n        const customFilters = {\n            states: formValue.states,\n            placedAtStart: formValue.placedAtStart,\n            placedAtEnd: formValue.placedAtEnd,\n        };\n        this.setQueryParam({\n            filter: 'custom',\n            ...customFilters,\n        });\n        this.customFilterForm.markAsPristine();\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\n    }\n\n    private createQueryOptions(\n        // tslint:disable-next-line:no-shadowed-variable\n        skip: number,\n        take: number,\n        orderCodeSearchTerm: string,\n        customerNameSearchTerm: string,\n        activeFilterPreset?: string,\n    ): { options: OrderListOptions } {\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\n        // tslint:disable-next-line:no-shadowed-variable\n        const filter: any = {};\n        if (filterConfig) {\n            if (filterConfig.config.active != null) {\n                filter.active = {\n                    eq: filterConfig.config.active,\n                };\n            }\n            if (filterConfig.config.states) {\n                filter.state = {\n                    in: filterConfig.config.states,\n                };\n            }\n        } else if (activeFilterPreset === 'custom') {\n            const queryParams = this.route.snapshot.queryParamMap;\n            const states = queryParams.getAll('states') ?? [];\n            const placedAtStart = queryParams.get('placedAtStart');\n            const placedAtEnd = queryParams.get('placedAtEnd');\n            if (states.length) {\n                filter.state = {\n                    in: states,\n                };\n            }\n            if (placedAtStart && placedAtEnd) {\n                filter.orderPlacedAt = {\n                    between: {\n                        start: placedAtStart,\n                        end: placedAtEnd,\n                    },\n                };\n            } else if (placedAtStart) {\n                filter.orderPlacedAt = {\n                    after: placedAtStart,\n                };\n            } else if (placedAtEnd) {\n                filter.orderPlacedAt = {\n                    before: placedAtEnd,\n                };\n            }\n        }\n        if (customerNameSearchTerm) {\n            filter.customerLastName = {\n                contains: customerNameSearchTerm,\n            };\n        }\n        if (orderCodeSearchTerm) {\n            filter.code = {\n                contains: orderCodeSearchTerm,\n            };\n        }\n        return {\n            options: {\n                skip,\n                take,\n                filter: {\n                    ...(filter ?? {}),\n                },\n                sort: {\n                    updatedAt: SortOrder.DESC,\n                },\n            },\n        };\n    }\n\n    getShippingNames(order: Order) {\n        if (order.shippingLines.length) {\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\n        } else {\n            return '';\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { OrderDetail } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrderResolver extends BaseEntityResolver<OrderDetail.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Order',\n                id: '',\n                code: '',\n                createdAt: '',\n                updatedAt: '',\n                total: 0,\n            } as any,\n            id => dataService.order.getOrder(id).mapStream(data => data.order),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BreadcrumbLabelLinkPair,\n    CanDeactivateDetailGuard,\n    createResolveData,\n    detailBreadcrumb,\n    OrderDetail,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderResolver } from './providers/routing/order-resolver';\n\nexport const orderRoutes: Route[] = [\n    {\n        path: '',\n        component: OrderListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.orders'),\n        },\n    },\n    {\n        path: ':id',\n        component: OrderDetailComponent,\n        resolve: createResolveData(OrderResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: orderBreadcrumb,\n        },\n    },\n    {\n        path: ':id/modify',\n        component: OrderEditorComponent,\n        resolve: createResolveData(OrderResolver),\n        // canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: modifyingOrderBreadcrumb,\n        },\n    },\n];\n\nexport function orderBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<OrderDetail.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.orders',\n        getName: order => order.code,\n        route: '',\n    });\n}\n\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\n    return orderBreadcrumb(data, params).pipe(\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\n            const modifiedBreadcrumbs = breadcrumbs.slice();\n            modifiedBreadcrumbs[0].link[0] = '../';\n            modifiedBreadcrumbs[1].link[0] = '../orders';\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\n        }) as any,\n    );\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\nimport { OrderListComponent } from './components/order-list/order-list.component';\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\nimport { OrderTableComponent } from './components/order-table/order-table.component';\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\nimport { orderRoutes } from './order.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\n    declarations: [\n        OrderListComponent,\n        OrderDetailComponent,\n        FulfillOrderDialogComponent,\n        LineFulfillmentComponent,\n        RefundOrderDialogComponent,\n        CancelOrderDialogComponent,\n        PaymentStateLabelComponent,\n        LineRefundsComponent,\n        OrderPaymentCardComponent,\n        RefundStateLabelComponent,\n        SettleRefundDialogComponent,\n        OrderHistoryComponent,\n        FulfillmentDetailComponent,\n        PaymentDetailComponent,\n        SimpleItemListComponent,\n        OrderCustomFieldsCardComponent,\n        OrderProcessGraphComponent,\n        OrderProcessNodeComponent,\n        OrderProcessEdgeComponent,\n        OrderProcessGraphDialogComponent,\n        FulfillmentStateLabelComponent,\n        FulfillmentCardComponent,\n        OrderEditorComponent,\n        OrderTableComponent,\n        OrderEditsPreviewDialogComponent,\n        ModificationDetailComponent,\n        AddManualPaymentDialogComponent,\n        OrderStateSelectDialogComponent,\n    ],\n})\nexport class OrderModule {}\n"]}