!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@vendure/admin-ui/core"),require("@biesbjerg/ngx-translate-extract-marker"),require("@vendure/common/lib/shared-utils"),require("@angular/router"),require("@vendure/common/lib/pick"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@vendure/admin-ui/order",["exports","@angular/core","@angular/forms","@vendure/admin-ui/core","@biesbjerg/ngx-translate-extract-marker","@vendure/common/lib/shared-utils","@angular/router","@vendure/common/lib/pick","rxjs","rxjs/operators"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).vendure=e.vendure||{},e.vendure["admin-ui"]=e.vendure["admin-ui"]||{},e.vendure["admin-ui"].order={}),e.ng.core,e.ng.forms,e.vendure["admin-ui"].core,e.ngxTranslateExtractMarker,e.sharedUtils,e.ng.router,e.pick,e.rxjs,e.rxjs.operators)}(this,(function(e,t,n,r,i,o,a,l,d,s){"use strict";var c=function(){function e(e){this.dataService=e,this.form=new n.FormGroup({method:new n.FormControl("",n.Validators.required),transactionId:new n.FormControl("",n.Validators.required)})}return e.prototype.ngOnInit=function(){this.paymentMethods$=this.dataService.settings.getPaymentMethods(999).mapSingle((function(e){return e.paymentMethods.items}))},e.prototype.submit=function(){var e=this.form.value;this.resolveWith({method:e.method,transactionId:e.transactionId})},e.prototype.cancel=function(){this.resolveWith()},e}();c.decorators=[{type:t.Component,args:[{selector:"vdr-add-manual-payment-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.add-payment-to-order\' | translate }}</ng-template>\n<form [formGroup]="form">\n    <vdr-form-field [label]="\'order.payment-method\' | translate" for="method">\n        <ng-select\n            [items]="paymentMethods$ | async"\n            bindLabel="code"\n            autofocus\n            bindValue="code"\n            [addTag]="true"\n            formControlName="method"\n        ></ng-select>\n    </vdr-form-field>\n    <vdr-form-field [label]="\'order.transaction-id\' | translate" for="transactionId">\n        <input id="transactionId" type="text" formControlName="transactionId" />\n    </vdr-form-field>\n</form>\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button type="submit" (click)="submit()" class="btn btn-primary" [disabled]="form.invalid || form.pristine">\n        {{ \'order.add-payment\' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".ng-select{min-width:100%}"]}]}],c.ctorParameters=function(){return[{type:r.DataService}]};
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
var u=function(e,t){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function p(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}u(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}Object.create;function m(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function f(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(f(arguments[t]));return e}Object.create;var g=function(){function e(e){var t=this;this.i18nService=e,this.lineQuantities={},this.reasons=[i.marker("order.cancel-reason-customer-request"),i.marker("order.cancel-reason-not-available")],this.reasons=this.reasons.map((function(e){return t.i18nService.translate(e)}))}return Object.defineProperty(e.prototype,"selectionCount",{get:function(){return Object.values(this.lineQuantities).reduce((function(e,t){return e+t}),0)},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){this.lineQuantities=this.order.lines.reduce((function(e,t){var n;return Object.assign(Object.assign({},e),((n={})[t.id]=0,n))}),{})},e.prototype.select=function(){this.resolveWith({orderId:this.order.id,lines:this.getLineInputs(),reason:this.reason})},e.prototype.cancel=function(){this.resolveWith()},e.prototype.getLineInputs=function(){if(!this.order.active)return Object.entries(this.lineQuantities).map((function(e){var t=f(e,2);return{orderLineId:t[0],quantity:t[1]}})).filter((function(e){return 0<e.quantity}))},e}();g.decorators=[{type:t.Component,args:[{selector:"vdr-cancel-order-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.cancel-order\' | translate }}</ng-template>\n\n<div class="fulfillment-wrapper">\n    <div class="order-lines">\n        <table class="table">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ \'order.product-name\' | translate }}</th>\n                    <th>{{ \'order.product-sku\' | translate }}</th>\n                    <th>{{ \'order.quantity\' | translate }}</th>\n                    <th>{{ \'order.unit-price\' | translate }}</th>\n                    <th>{{ \'order.cancel\' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor="let line of order.lines"\n                class="order-line"\n                [class.is-cancelled]="line.quantity === 0"\n            >\n                <td class="align-middle thumb">\n                    <img [src]="line.featuredAsset | assetPreview:\'tiny\'" />\n                </td>\n                <td class="align-middle name">{{ line.productVariant.name }}</td>\n                <td class="align-middle sku">{{ line.productVariant.sku }}</td>\n                <td class="align-middle quantity">{{ line.quantity }}</td>\n                <td class="align-middle quantity">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class="align-middle fulfil">\n                    <input\n                        *ngIf="line.quantity > 0 && !order.active; else nonEditable"\n                        [(ngModel)]="lineQuantities[line.id]"\n                        type="number"\n                        [max]="line.quantity"\n                        min="0"\n                    />\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class="cancellation-details">\n        <label class="clr-control-label">{{ \'order.cancellation-reason\' | translate }}</label>\n        <ng-select\n            [items]="reasons"\n            bindLabel="name"\n            autofocus\n            bindValue="id"\n            [addTag]="true"\n            [(ngModel)]="reason"\n        ></ng-select>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button\n        type="submit"\n        (click)="select()"\n        [disabled]="!reason || (!order.active && selectionCount === 0)"\n        class="btn btn-primary"\n    >\n        <ng-container *ngIf="!order.active">\n            {{ \'order.cancel-selected-items\' | translate }}\n        </ng-container>\n        <ng-container *ngIf="order.active">\n            {{ \'order.cancel-order\' | translate }}\n        </ng-container>\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{height:100%;display:flex;min-height:64vh}.fulfillment-wrapper{flex:1}@media screen and (min-width:768px){.fulfillment-wrapper{display:flex;flex-direction:row}}@media screen and (min-width:768px){.fulfillment-wrapper .cancellation-details{margin-top:0;margin-left:24px;width:250px}}.fulfillment-wrapper .order-lines{flex:1;overflow-y:auto}.fulfillment-wrapper .order-lines table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}.fulfillment-wrapper .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}"]}]}],g.ctorParameters=function(){return[{type:r.I18nService}]};var v=function(){function e(e,t){this.dataService=e,this.changeDetector=t,this.fulfillmentHandlerControl=new n.FormControl,this.fulfillmentQuantities={}}return e.prototype.ngOnInit=function(){var e=this;this.dataService.settings.getGlobalSettings().single$.subscribe((function(t){var n=t.globalSettings;e.fulfillmentQuantities=e.order.lines.reduce((function(t,r){var i,o=e.getFulfillableCount(r,n.trackInventory);return Object.assign(Object.assign({},t),((i={})[r.id]={fulfillCount:o,max:o},i))}),{}),e.changeDetector.markForCheck()})),this.dataService.shippingMethod.getShippingMethodOperations().mapSingle((function(e){return e.fulfillmentHandlers})).subscribe((function(t){e.fulfillmentHandlerDef=t.find((function(t){var n,r;return t.code===(null===(r=null===(n=e.order.shippingLines[0])||void 0===n?void 0:n.shippingMethod)||void 0===r?void 0:r.fulfillmentHandlerCode)}))||t[0],e.fulfillmentHandler=r.configurableDefinitionToInstance(e.fulfillmentHandlerDef),e.fulfillmentHandlerControl.patchValue(e.fulfillmentHandler),e.changeDetector.markForCheck()}))},e.prototype.getFulfillableCount=function(e,t){var n=e.productVariant,i=n.trackInventory,o=n.stockOnHand,a=i===r.GlobalFlag.INHERIT?t:i===r.GlobalFlag.TRUE,l=this.getUnfulfilledCount(e);return a?Math.min(l,o):l},e.prototype.getUnfulfilledCount=function(e){var t=e.items.reduce((function(e,t){return e+(t.fulfillment?1:0)}),0);return e.quantity-t},e.prototype.canSubmit=function(){var e=Object.values(this.fulfillmentQuantities).reduce((function(e,t){return e+t.fulfillCount}),0);return r.configurableOperationValueIsValid(this.fulfillmentHandlerDef,this.fulfillmentHandlerControl.value)&&this.fulfillmentHandlerControl.valid&&0<e},e.prototype.select=function(){var e=Object.entries(this.fulfillmentQuantities).map((function(e){var t=f(e,2);return{orderLineId:t[0],quantity:t[1].fulfillCount}}));this.resolveWith({lines:e,handler:r.toConfigurableOperationInput(this.fulfillmentHandler,this.fulfillmentHandlerControl.value)})},e.prototype.cancel=function(){this.resolveWith()},e}();v.decorators=[{type:t.Component,args:[{selector:"vdr-fulfill-order-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.fulfill-order\' | translate }}</ng-template>\n\n<div class="fulfillment-wrapper">\n    <div class="order-table">\n        <table class="table">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ \'order.product-name\' | translate }}</th>\n                    <th>{{ \'order.product-sku\' | translate }}</th>\n                    <th>{{ \'order.unfulfilled\' | translate }}</th>\n                    <th>{{ \'catalog.stock-on-hand\' | translate }}</th>\n                    <th>{{ \'order.fulfill\' | translate }}</th>\n                </tr>\n            </thead>\n            <tr\n                *ngFor="let line of order.lines"\n                class="order-line"\n                [class.ignore]="getUnfulfilledCount(line) === 0"\n            >\n                <td class="align-middle thumb">\n                    <img *ngIf="line.featuredAsset" [src]="line.featuredAsset | assetPreview: \'tiny\'" />\n                </td>\n                <td class="align-middle name">{{ line.productVariant.name }}</td>\n                <td class="align-middle sku">{{ line.productVariant.sku }}</td>\n                <td class="align-middle quantity">{{ getUnfulfilledCount(line) }}</td>\n                <td class="align-middle quantity">{{ line.productVariant.stockOnHand }}</td>\n                <td class="align-middle fulfil">\n                    <input\n                        *ngIf="fulfillmentQuantities[line.id]"\n                        [disabled]="getUnfulfilledCount(line) === 0"\n                        [(ngModel)]="fulfillmentQuantities[line.id].fulfillCount"\n                        type="number"\n                        [max]="fulfillmentQuantities[line.id].max"\n                        min="0"\n                    />\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class="shipping-details">\n        <vdr-formatted-address [address]="order.shippingAddress"></vdr-formatted-address>\n        <h6>{{ \'order.shipping-method\' | translate }}</h6>\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\n        <vdr-configurable-input\n            [operationDefinition]="fulfillmentHandlerDef"\n            [operation]="fulfillmentHandler"\n            [formControl]="fulfillmentHandlerControl"\n            [removable]="false"\n        ></vdr-configurable-input>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button type="submit" (click)="select()" [disabled]="!canSubmit()" class="btn btn-primary">\n        {{ \'order.create-fulfillment\' | translate }}\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{height:100%;display:flex;min-height:64vh}.fulfillment-wrapper{flex:1}@media screen and (min-width:768px){.fulfillment-wrapper{display:flex;flex-direction:row}}.fulfillment-wrapper .shipping-details{margin-top:24px}@media screen and (min-width:768px){.fulfillment-wrapper .shipping-details{margin-top:0;margin-left:24px;width:250px}}.fulfillment-wrapper .shipping-details clr-input-container{margin-top:24px}.fulfillment-wrapper .order-table{flex:1;overflow-y:auto}.fulfillment-wrapper .order-table table{margin-top:0}.fulfillment-wrapper tr.ignore{color:var(--color-grey-300)}"]}]}],v.ctorParameters=function(){return[{type:r.DataService},{type:t.ChangeDetectorRef}]};var h=function(){function e(){this.transitionState=new t.EventEmitter}return e.prototype.nextSuggestedState=function(){var e;if(this.fulfillment){var t=this.fulfillment.nextStates,n=function(e){return t.includes(e)?e:t[0]};switch(null===(e=this.fulfillment)||void 0===e?void 0:e.state){case"Pending":return n("Shipped");case"Shipped":return n("Delivered");default:return t.find((function(e){return"Cancelled"!==e}))}}},e.prototype.nextOtherStates=function(){if(!this.fulfillment)return[];var e=this.nextSuggestedState();return this.fulfillment.nextStates.filter((function(t){return t!==e}))},e}();h.decorators=[{type:t.Component,args:[{selector:"vdr-fulfillment-card",template:'<div class="card">\n    <div class="card-header fulfillment-header">\n        <div>{{ \'order.fulfillment\' | translate }}</div>\n        <div class="fulfillment-state">\n            <vdr-fulfillment-state-label [state]="fulfillment?.state"></vdr-fulfillment-state-label>\n        </div>\n    </div>\n    <div class="card-block">\n        <vdr-fulfillment-detail\n            *ngIf="!!fulfillment"\n            [fulfillmentId]="fulfillment?.id"\n            [order]="order"\n        ></vdr-fulfillment-detail>\n    </div>\n    <div class="card-footer" *ngIf="fulfillment?.nextStates.length">\n        <ng-container *ngIf="nextSuggestedState() as suggestedState">\n            <button class="btn btn-sm btn-primary" (click)="transitionState.emit(suggestedState)">\n                {{ \'order.set-fulfillment-state\' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\n            </button>\n        </ng-container>\n        <vdr-dropdown>\n            <button class="icon-button" vdrDropdownTrigger>\n                <clr-icon shape="ellipsis-vertical"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition="bottom-right">\n                <ng-container *ngFor="let nextState of nextOtherStates()">\n                    <button\n                        type="button"\n                        class="btn"\n                        vdrDropdownItem\n                        (click)="transitionState.emit(nextState)"\n                    >\n                        <ng-container *ngIf="nextState !== \'Cancelled\'; else cancel">\n                            <clr-icon shape="step-forward-2"></clr-icon>\n                            {{ \'order.transition-to-state\' | translate: { state: (nextState | stateI18nToken | translate) } }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape="error-standard" class="is-error"></clr-icon>\n                            {{ \'order.cancel-fulfillment\' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".fulfillment-header{display:flex;justify-content:space-between;align-items:center}.card-footer{display:flex;align-items:center;justify-content:flex-end}"]}]}],h.propDecorators={fulfillment:[{type:t.Input}],order:[{type:t.Input}],transitionState:[{type:t.Output}]};var b=function(){function e(){this.customFields=[]}return e.prototype.ngOnChanges=function(e){this.customFields=this.getCustomFields()},Object.defineProperty(e.prototype,"fulfillment",{get:function(){var e=this;return this.order.fulfillments&&this.order.fulfillments.find((function(t){return t.id===e.fulfillmentId}))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"items",{get:function(){var e,t,n,r,i,o=new Map,a=null===(i=this.fulfillment)||void 0===i?void 0:i.orderItems.map((function(e){return e.id}));try{for(var l=m(this.order.lines),d=l.next();!d.done;d=l.next()){var s=d.value;try{for(var c=(n=void 0,m(s.items)),u=c.next();!u.done;u=c.next()){var p=u.value;if(null==a?void 0:a.includes(p.id)){var y=o.get(s.productVariant.name);null!=y?o.set(s.productVariant.name,y+1):o.set(s.productVariant.name,1)}}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}return Array.from(o.entries()).map((function(e){var t=f(e,2);return{name:t[0],quantity:t[1]}}))},enumerable:!1,configurable:!0}),e.prototype.getCustomFields=function(){var e=this.fulfillment.customFields;return e?Object.entries(e).filter((function(e){return"__typename"!==f(e,1)[0]})).map((function(e){var t=f(e,2),n=t[0],r=t[1];return{key:n,value:Array.isArray(r)||o.isObject(r)?r:r.toString()}})):[]},e.prototype.customFieldIsObject=function(e){return Array.isArray(e)||o.isObject(e)},e}();b.decorators=[{type:t.Component,args:[{selector:"vdr-fulfillment-detail",template:'<vdr-labeled-data [label]="\'common.created-at\' | translate">\n    {{ fulfillment?.createdAt | localeDate: \'medium\' }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]="\'order.fulfillment-method\' | translate">\n    {{ fulfillment?.method }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf="fulfillment?.trackingCode" [label]="\'order.tracking-code\' | translate">\n    {{ fulfillment?.trackingCode }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]="\'order.contents\' | translate">\n    <vdr-simple-item-list [items]="items"></vdr-simple-item-list>\n</vdr-labeled-data>\n<ng-container *ngFor="let customField of customFields">\n    <vdr-labeled-data [label]="customField.key">\n        <vdr-object-tree\n            *ngIf="customFieldIsObject(customField.value); else primitive"\n            [value]="{ object: customField.value }"\n        ></vdr-object-tree>\n        <ng-template #primitive>\n            {{ customField.value }}\n        </ng-template>\n    </vdr-labeled-data>\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}],b.propDecorators={fulfillmentId:[{type:t.Input}],order:[{type:t.Input}]};var C=function(){function e(){}return Object.defineProperty(e.prototype,"chipColorType",{get:function(){switch(this.state){case"Pending":case"Shipped":return"warning";case"Delivered":return"success";case"Cancelled":return"error"}},enumerable:!1,configurable:!0}),e}();C.decorators=[{type:t.Component,args:[{selector:"vdr-fulfillment-state-label",template:'<vdr-chip [title]="\'order.payment-state\' | translate" [colorType]="chipColorType">\n    <clr-icon shape="check-circle" *ngIf="state === \'Delivered\'"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{font-size:14px}"]}]}],C.propDecorators={state:[{type:t.Input}]};var S=function(){function e(){this.fulfilledCount=0,this.fulfillments=[]}return e.prototype.ngOnChanges=function(e){this.line&&(this.fulfilledCount=this.getDeliveredCount(this.line),this.fulfillmentStatus=this.getFulfillmentStatus(this.fulfilledCount,this.line.items.length),this.fulfillments=this.getFulfillments(this.line))},e.prototype.getDeliveredCount=function(e){return e.items.reduce((function(e,t){return e+(t.fulfillment?1:0)}),0)},e.prototype.getFulfillmentStatus=function(e,t){return e===t?"full":0<e&&e<t?"partial":"none"},e.prototype.getFulfillments=function(e){var t,n,r={};try{for(var i=m(e.items),o=i.next();!o.done;o=i.next()){var a=o.value;a.fulfillment&&(void 0===r[a.fulfillment.id]?r[a.fulfillment.id]=1:r[a.fulfillment.id]++)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}var l=e.items.reduce((function(e,t){return t.fulfillment?y(e,[t.fulfillment]):e}),[]);return Object.entries(r).map((function(e){var t=f(e,2),n=t[0];return{count:t[1],fulfillment:l.find((function(e){return e.id===n}))}}))},e}();S.decorators=[{type:t.Component,args:[{selector:"vdr-line-fulfillment",template:'<vdr-dropdown class="search-settings-menu" *ngIf="fulfilledCount || orderState === \'PartiallyDelivered\'">\n    <button type="button" class="icon-button" vdrDropdownTrigger>\n        <clr-icon *ngIf="fulfillmentStatus === \'full\'" class="item-fulfilled" shape="check-circle"></clr-icon>\n        <clr-icon\n            *ngIf="fulfillmentStatus === \'partial\'"\n            class="item-partially-fulfilled"\n            shape="check-circle"\n        ></clr-icon>\n        <clr-icon\n            *ngIf="fulfillmentStatus === \'none\'"\n            class="item-not-fulfilled"\n            shape="exclamation-circle"\n        ></clr-icon>\n    </button>\n    <vdr-dropdown-menu vdrPosition="bottom-right">\n        <label class="dropdown-header" *ngIf="fulfillmentStatus === \'full\'">\n            {{ \'order.line-fulfillment-all\' | translate }}\n        </label>\n        <label class="dropdown-header" *ngIf="fulfillmentStatus === \'partial\'">\n            {{\n                \'order.line-fulfillment-partial\' | translate: { total: line.quantity, count: fulfilledCount }\n            }}\n        </label>\n        <label class="dropdown-header" *ngIf="fulfillmentStatus === \'none\'">\n            {{ \'order.line-fulfillment-none\' | translate }}\n        </label>\n        <div class="fulfillment-detail" *ngFor="let item of fulfillments">\n            <div class="fulfillment-title">\n                {{ \'order.fulfillment\' | translate }} #{{ item.fulfillment.id }} ({{\n                    \'order.item-count\' | translate: { count: item.count }\n                }})\n            </div>\n            <vdr-labeled-data [label]="\'common.created-at\' | translate">\n                {{ item.fulfillment.createdAt | localeDate: \'medium\' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]="\'order.fulfillment-method\' | translate">\n                {{ item.fulfillment.method }}\n            </vdr-labeled-data>\n            <vdr-labeled-data\n                *ngIf="item.fulfillment.trackingCode"\n                [label]="\'order.tracking-code\' | translate"\n            >\n                {{ item.fulfillment.trackingCode }}\n            </vdr-labeled-data>\n        </div>\n    </vdr-dropdown-menu>\n</vdr-dropdown>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".item-fulfilled{color:var(--color-success-500)}.item-partially-fulfilled{color:var(--color-warning-500)}.item-not-fulfilled{color:var(--color-error-500)}.fulfillment-detail{margin:6px 12px}.fulfillment-detail:not(:last-of-type){border-bottom:1px dashed var(--color-component-border-200)}"]}]}],S.propDecorators={line:[{type:t.Input}],orderState:[{type:t.Input}]};var I=function(){function e(){}return e.prototype.getRefundedCount=function(){var e,t,n=null!==(t=null===(e=this.payments)||void 0===e?void 0:e.reduce((function(e,t){return y(e,t.refunds)}),[]))&&void 0!==t?t:[];return this.line.items.filter((function(e){if(null===e.refundId&&!e.cancelled)return!1;if(e.refundId){var t=n.find((function(t){return t.id===e.refundId}));return"Failed"!==(null==t?void 0:t.state)}return!1})).length},e}();I.decorators=[{type:t.Component,args:[{selector:"vdr-line-refunds",template:'<span *ngIf="getRefundedCount()" [title]="\'order.refunded-count\' | translate: { count: getRefundedCount() }">\n    <clr-icon shape="redo" class="is-solid" dir="down"></clr-icon>\n</span>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{color:var(--color-error-500)}"]}]}],I.propDecorators={line:[{type:t.Input}],payments:[{type:t.Input}]};var x=function(){function e(){this.addedItems=new Map,this.removedItems=new Map}return e.prototype.ngOnChanges=function(){var e=this.getModifiedLines(),t=e.added,n=e.removed;this.addedItems=t,this.removedItems=n},e.prototype.getSurcharge=function(e){return this.order.surcharges.find((function(t){return t.id===e}))},e.prototype.getAddedItems=function(){return y(this.addedItems.entries()).map((function(e){var t=f(e,2),n=t[0],r=t[1];return{name:n.productVariant.name,quantity:r}}))},e.prototype.getRemovedItems=function(){return y(this.removedItems.entries()).map((function(e){var t=f(e,2),n=t[0],r=t[1];return{name:n.productVariant.name,quantity:r}}))},e.prototype.getModifiedLines=function(){var e,t,n,r,i=new Map,o=new Map;try{for(var a=m(this.modification.orderItems||[]),l=a.next();!l.done;l=a.next()){var d=l.value,s=this.getOrderLineAndItem(d.id);if(s){var c=s.line;if(s.item.cancelled){var u=null!==(n=o.get(c))&&void 0!==n?n:0;o.set(c,u+1)}else{u=null!==(r=i.get(c))&&void 0!==r?r:0;i.set(c,u+1)}}}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}return{added:i,removed:o}},e.prototype.getOrderLineAndItem=function(e){var t,n;try{for(var r=m(this.order.lines),i=r.next();!i.done;i=r.next()){var o=i.value,a=o.items.find((function(t){return t.id===e}));if(a)return{line:o,item:a}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},e}();x.decorators=[{type:t.Component,args:[{selector:"vdr-modification-detail",template:'<vdr-labeled-data [label]="\'common.ID\' | translate">{{ modification.id }}</vdr-labeled-data>\n<vdr-labeled-data *ngIf="modification.note" [label]="\'order.note\' | translate">{{\n    modification.note\n}}</vdr-labeled-data>\n<vdr-labeled-data *ngFor="let surcharge of modification.surcharges" [label]="\'order.surcharges\' | translate">\n    {{ getSurcharge(surcharge.id)?.description }}\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\n>\n<vdr-labeled-data *ngIf="getAddedItems().length" [label]="\'order.added-items\' | translate">\n    <vdr-simple-item-list [items]="getAddedItems()"></vdr-simple-item-list>\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf="getRemovedItems().length" [label]="\'order.removed-items\' | translate">\n    <vdr-simple-item-list [items]="getRemovedItems()"></vdr-simple-item-list>\n</vdr-labeled-data>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}],x.propDecorators={order:[{type:t.Input}],modification:[{type:t.Input}]};var O=function(){function e(e){this.formBuilder=e,this.customFieldsConfig=[],this.customFieldValues={},this.updateClick=new t.EventEmitter,this.editable=!1}return e.prototype.ngOnInit=function(){var e,t;this.customFieldForm=this.formBuilder.group({});try{for(var n=m(this.customFieldsConfig),r=n.next();!r.done;r=n.next()){var i=r.value;this.customFieldForm.addControl(i.name,this.formBuilder.control(this.customFieldValues[i.name]))}}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}},e.prototype.onUpdateClick=function(){this.updateClick.emit(this.customFieldForm.value),this.customFieldForm.markAsPristine(),this.editable=!1},e}();O.decorators=[{type:t.Component,args:[{selector:"vdr-order-custom-fields-card",template:'<div class="card" *ngIf="customFieldsConfig.length">\n    <div class="card-header">\n        {{ \'common.custom-fields\' | translate }}\n    </div>\n    <div class="card-block">\n        <div class="card-text custom-field-form" [class.editable]="editable">\n            <ng-container *ngFor="let customField of customFieldsConfig">\n                <vdr-custom-field-control\n                    entityName="Order"\n                    [customFieldsFormGroup]="customFieldForm"\n                    [compact]="true"\n                    [readonly]="customField.readonly || !editable"\n                    [customField]="customField"\n                ></vdr-custom-field-control>\n            </ng-container>\n        </div>\n    </div>\n    <div class="card-footer">\n        <button class="btn btn-sm btn-secondary" (click)="editable = true" *ngIf="!editable">\n            <clr-icon shape="pencil"></clr-icon>\n            {{ \'common.edit\' | translate }}\n        </button>\n        <button\n            class="btn btn-sm btn-primary"\n            (click)="onUpdateClick()"\n            *ngIf="editable"\n            [disabled]="customFieldForm.pristine || customFieldForm.invalid"\n        >\n            <clr-icon shape="check"></clr-icon>\n            {{ \'common.update\' | translate }}\n        </button>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:["vdr-custom-field-control{margin-bottom:6px;display:block}.custom-field-form ::ng-deep .clr-control-label{color:var(--color-grey-400)}.custom-field-form.editable ::ng-deep .clr-control-label{color:inherit}"]}]}],O.ctorParameters=function(){return[{type:n.FormBuilder}]},O.propDecorators={customFieldsConfig:[{type:t.Input}],customFieldValues:[{type:t.Input}],updateClick:[{type:t.Output}]};var w=function(){function e(){this.nextStates=[],this.message="",this.selectedState=""}return e.prototype.select=function(){this.selectedState&&this.resolveWith(this.selectedState)},e.prototype.cancel=function(){this.resolveWith()},e}();w.decorators=[{type:t.Component,args:[{selector:"vdr-order-state-select-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.select-state\' | translate }}</ng-template>\n<p>{{ message | translate }}</p>\n<clr-select-container>\n    <select clrSelect name="state" [(ngModel)]="selectedState">\n        <option *ngFor="let state of nextStates" [value]="state">\n            {{ state | stateI18nToken | translate }}\n        </option>\n    </select>\n</clr-select-container>\n<ng-template vdrDialogButtons>\n    <button type="submit" *ngIf="cancellable" (click)="cancel()" class="btn btn-secondary">\n        {{ \'common.cancel\' | translate }}\n    </button>\n    <button type="submit" (click)="select()" class="btn btn-primary" [disabled]="!selectedState">\n        {{ \'order.transition-to-state\' | translate: { state: (selectedState | stateI18nToken | translate) } }}\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}];var F=function(){function e(e,t,n,r){this.dataService=e,this.modalService=t,this.notificationService=n,this.i18nService=r}return e.prototype.transitionToPreModifyingState=function(e,t){var n=this;return this.getPreModifyingState(e).pipe(s.switchMap((function(r){var o={orderId:e,nextStates:t,message:n.i18nService.translate(i.marker("order.unable-to-transition-to-state-try-another"),{state:r}),cancellable:!1,retry:10};return r?n.transitionToStateOrThrow(e,r).pipe(s.catchError((function(e){return n.manuallyTransitionToState(o)}))):n.manuallyTransitionToState(o)})))},e.prototype.manuallyTransitionToState=function(e){var t=this;return this.modalService.fromComponent(w,{locals:{nextStates:e.nextStates,cancellable:e.cancellable,message:e.message},closable:!1,size:"md"}).pipe(s.switchMap((function(n){if(n)return t.transitionToStateOrThrow(e.orderId,n);if(e.cancellable)return d.EMPTY;throw new Error("An order state must be selected")})),s.retryWhen((function(t){return t.pipe(s.delay(2e3),s.take(e.retry))})))},e.prototype.getPreModifyingState=function(e){return this.dataService.order.getOrderHistory(e,{filter:{type:{eq:r.HistoryEntryType.ORDER_STATE_TRANSITION}},sort:{createdAt:r.SortOrder.DESC}}).mapSingle((function(e){return e.order})).pipe(s.map((function(e){var t=null==e?void 0:e.history.items.find((function(e){return"Modifying"===e.data.to}));return t?t.data.from:void 0})))},e.prototype.transitionToStateOrThrow=function(e,t){var n=this;return this.dataService.order.transitionToState(e,t).pipe(s.map((function(e){var t=e.transitionOrderToState;switch(null==t?void 0:t.__typename){case"Order":return null==t?void 0:t.state;case"OrderStateTransitionError":throw n.notificationService.error(null==t?void 0:t.transitionError),new Error(null==t?void 0:t.transitionError)}})))},e}();F.ɵprov=t.ɵɵdefineInjectable({factory:function(){return new F(t.ɵɵinject(r.DataService),t.ɵɵinject(r.ModalService),t.ɵɵinject(r.NotificationService),t.ɵɵinject(r.I18nService))},token:F,providedIn:"root"}),F.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],F.ctorParameters=function(){return[{type:r.DataService},{type:r.ModalService},{type:r.NotificationService},{type:r.I18nService}]};var T=function(){function e(e){this.serverConfigService=e,this.states=[]}return e.prototype.ngOnInit=function(){this.states=this.serverConfigService.getOrderProcessStates()},e}();T.decorators=[{type:t.Component,args:[{selector:"vdr-order-process-graph-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.order-state-diagram\' | translate }}</ng-template>\n\n<vdr-order-process-graph [states]="states" [initialState]="activeState"></vdr-order-process-graph>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}],T.ctorParameters=function(){return[{type:r.ServerConfigService}]};var P=function(){function e(e){var t=this;this.i18nService=e,this.lineQuantities={},this.refundShipping=!1,this.adjustment=0,this.reasons=[i.marker("order.refund-reason-customer-request"),i.marker("order.refund-reason-not-available")],this.reasons=this.reasons.map((function(e){return t.i18nService.translate(e)}))}return Object.defineProperty(e.prototype,"refundTotal",{get:function(){var e=this;return this.order.lines.reduce((function(t,n){var r=e.lineQuantities[n.id],i=r.refund&&r.quantity||0;return t+n.proratedUnitPriceWithTax*i}),0)+(this.refundShipping?this.order.shippingWithTax:0)+this.adjustment},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"settledPaymentsTotal",{get:function(){return this.settledPayments.map((function(e){return e.amount-o.summate(e.refunds.filter((function(e){return"Failed"!==e.state})),"total")})).reduce((function(e,t){return e+t}),0)},enumerable:!1,configurable:!0}),e.prototype.lineCanBeRefundedOrCancelled=function(e){var t,n,r=null!==(n=null===(t=this.order.payments)||void 0===t?void 0:t.reduce((function(e,t){return y(e,t.refunds)}),[]))&&void 0!==n?n:[];return 0<e.items.filter((function(e){if(e.cancelled)return!1;if(null==e.refundId)return!0;var t=r.find((function(t){return t.id===e.refundId}));return"Failed"===(null==t?void 0:t.state)})).length},e.prototype.ngOnInit=function(){this.lineQuantities=this.order.lines.reduce((function(e,t){var n;return Object.assign(Object.assign({},e),((n={})[t.id]={quantity:0,refund:!1,cancel:!1},n))}),{}),this.settledPayments=(this.order.payments||[]).filter((function(e){return"Settled"===e.state})),this.settledPayments.length&&(this.selectedPayment=this.settledPayments[0])},e.prototype.handleZeroQuantity=function(e){0===(null==e?void 0:e.quantity)&&(e.cancel=!1,e.refund=!1)},e.prototype.isRefunding=function(){return Object.values(this.lineQuantities).reduce((function(e,t){return e||0<t.quantity&&t.refund}),!1)},e.prototype.isCancelling=function(){return Object.values(this.lineQuantities).reduce((function(e,t){return e||0<t.quantity&&t.cancel}),!1)},e.prototype.canSubmit=function(){return this.isRefunding()?!!(this.selectedPayment&&this.reason&&0<this.refundTotal&&this.refundTotal<=this.settledPaymentsTotal):!!this.isCancelling()&&!!this.reason},e.prototype.select=function(){var e=this.selectedPayment;if(e){var t=this.getOrderLineInput((function(e){return e.refund})),n=this.getOrderLineInput((function(e){return e.cancel}));this.resolveWith({refund:{lines:t,reason:this.reason,shipping:this.refundShipping?this.order.shipping:0,adjustment:this.adjustment,paymentId:e.id},cancel:{lines:n,orderId:this.order.id,reason:this.reason}})}},e.prototype.cancel=function(){this.resolveWith()},e.prototype.getOrderLineInput=function(e){return Object.entries(this.lineQuantities).filter((function(t){var n=f(t,2),r=(n[0],n[1]);return 0<r.quantity&&e(r)})).map((function(e){var t=f(e,2);return{orderLineId:t[0],quantity:t[1].quantity}}))},e}();P.decorators=[{type:t.Component,args:[{selector:"vdr-refund-order-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.refund-and-cancel-order\' | translate }}</ng-template>\n\n<div class="refund-wrapper">\n    <div class="order-table">\n        <table class="table">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>{{ \'order.product-name\' | translate }}</th>\n                    <th>{{ \'order.product-sku\' | translate }}</th>\n                    <th>{{ \'order.quantity\' | translate }}</th>\n                    <th>{{ \'order.unit-price\' | translate }}</th>\n                    <th>{{ \'order.prorated-unit-price\' | translate }}</th>\n                    <th>{{ \'order.quantity\' | translate }}</th>\n                    <th>{{ \'order.refund\' | translate }}</th>\n                    <th>{{ \'order.cancel\' | translate }}</th>\n                </tr>\n            </thead>\n            <tr *ngFor="let line of order.lines" class="order-line">\n                <td class="align-middle thumb">\n                    <img [src]="line.featuredAsset | assetPreview: \'tiny\'" />\n                </td>\n                <td class="align-middle name">{{ line.productVariant.name }}</td>\n                <td class="align-middle sku">{{ line.productVariant.sku }}</td>\n                <td class="align-middle quantity">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]="line" [payments]="order.payments"></vdr-line-refunds>\n                </td>\n                <td class="align-middle quantity">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                </td>\n                <td class="align-middle quantity">\n                    <div class="prorated-wrapper">\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\n                        <ng-container *ngIf="line.discounts as discounts">\n                            <vdr-dropdown *ngIf="discounts.length">\n                                <div class="promotions-label" vdrDropdownTrigger>\n                                    <button class="icon-button"><clr-icon shape="info"></clr-icon></button>\n                                </div>\n                                <vdr-dropdown-menu>\n                                    <div class="line-promotion" *ngFor="let discount of discounts">\n                                        {{ discount.description }}\n                                        <div class="promotion-amount">\n                                            {{\n                                                discount.amount / 100 / line.quantity\n                                                    | number: \'1.0-2\'\n                                                    | currency: order.currencyCode\n                                            }}\n                                        </div>\n                                    </div>\n                                </vdr-dropdown-menu>\n                            </vdr-dropdown>\n                        </ng-container>\n                    </div>\n                </td>\n                <td class="align-middle fulfil">\n                    <input\n                        *ngIf="lineCanBeRefundedOrCancelled(line)"\n                        [(ngModel)]="lineQuantities[line.id].quantity"\n                        type="number"\n                        [max]="line.quantity"\n                        min="0"\n                        (input)="handleZeroQuantity(lineQuantities[line.id])"\n                    />\n                </td>\n                <td class="align-middle">\n                    <div class="cancel-checkbox-wrapper">\n                        <input\n                            type="checkbox"\n                            *ngIf="lineCanBeRefundedOrCancelled(line)"\n                            clrCheckbox\n                            [disabled]="0 === lineQuantities[line.id].quantity"\n                            [(ngModel)]="lineQuantities[line.id].refund"\n                        />\n                    </div>\n                </td>\n                <td class="align-middle">\n                    <div class="cancel-checkbox-wrapper">\n                        <input\n                            type="checkbox"\n                            *ngIf="lineCanBeRefundedOrCancelled(line)"\n                            clrCheckbox\n                            [disabled]="0 === lineQuantities[line.id].quantity"\n                            [(ngModel)]="lineQuantities[line.id].cancel"\n                        />\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div class="refund-details mt4">\n        <div>\n            <label class="clr-control-label">{{ \'order.refund-cancellation-reason\' | translate }}</label>\n            <ng-select\n                [disabled]="!isRefunding() && !isCancelling()"\n                [items]="reasons"\n                bindLabel="name"\n                autofocus\n                [placeholder]="\'order.refund-cancellation-reason-required\' | translate"\n                bindValue="id"\n                [addTag]="true"\n                [(ngModel)]="reason"\n            ></ng-select>\n        </div>\n\n        <div>\n            <clr-select-container>\n                <label>{{ \'order.payment-to-refund\' | translate }}</label>\n                <select clrSelect name="options" [(ngModel)]="selectedPayment" [disabled]="!isRefunding()">\n                    <option\n                        *ngFor="let payment of settledPayments"\n                        [ngValue]="payment"\n                        [disabled]="payment.state !== \'Settled\'"\n                    >\n                        #{{ payment.id }} {{ payment.method }}:\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\n                    </option>\n                </select>\n            </clr-select-container>\n\n            <clr-checkbox-wrapper>\n                <input type="checkbox" clrCheckbox [(ngModel)]="refundShipping" [disabled]="!isRefunding()" />\n                <label>\n                    {{ \'order.refund-shipping\' | translate }} ({{\n                        order.shipping | localeCurrency: order.currencyCode\n                    }})\n                </label>\n            </clr-checkbox-wrapper>\n            <clr-input-container>\n                <label>{{ \'order.refund-adjustment\' | translate }}</label>\n                <vdr-currency-input\n                    clrInput\n                    [disabled]="!isRefunding()"\n                    [currencyCode]="order.currencyCode"\n                    [(ngModel)]="adjustment"\n                ></vdr-currency-input>\n            </clr-input-container>\n            <div class="totals" [class.disabled]="!isRefunding()">\n                <div class="order-total">\n                    {{ \'order.payment-amount\' | translate }}:\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\n                </div>\n                <div class="refund-total">\n                    {{ \'order.refund-total\' | translate }}:\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\n                </div>\n                <div class="refund-total-error" *ngIf="refundTotal < 0 || settledPaymentsTotal < refundTotal">\n                    {{\n                        \'order.refund-total-error\'\n                            | translate\n                                : {\n                                      min: 0 | currency: order.currencyCode,\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\n                                  }\n                    }}\n                </div>\n                <div class="refund-total-warning" *ngIf="selectedPayment.amount < refundTotal">\n                    {{ \'order.refund-total-warning\' | translate }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button type="submit" (click)="select()" [disabled]="!canSubmit()" class="btn btn-primary">\n        <ng-container *ngIf="isRefunding(); else cancelling">\n            {{\n                \'order.refund-with-amount\'\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\n            }}\n        </ng-container>\n        <ng-template #cancelling>\n            {{ \'order.cancel-selected-items\' | translate }}\n        </ng-template>\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{height:100%;display:flex;min-height:64vh}.refund-wrapper{flex:1;flex-direction:column}.refund-wrapper .order-table{flex:1;overflow-y:auto}.refund-wrapper .order-table table{margin-top:0}.refund-wrapper tr.ignore{color:var(--color-grey-300)}.cancel-checkbox-wrapper{display:flex;align-items:center;justify-content:center}clr-checkbox-wrapper{margin-top:12px;margin-bottom:12px;display:block}.refund-details{display:flex;justify-content:space-between}.totals{margin-top:48px}.totals .refund-total{font-size:18px}.totals .refund-total-error{color:var(--color-error-500)}.totals .refund-total-warning{color:var(--color-warning-600);max-width:250px}.totals.disabled{color:var(--color-grey-300)}.prorated-wrapper{display:flex;justify-content:center}.line-promotion{display:flex;justify-content:space-between;font-size:12px;padding:3px 6px}.line-promotion .promotion-amount{margin-left:12px}"]}]}],P.ctorParameters=function(){return[{type:r.I18nService}]};var k=function(){function e(){this.transactionId=""}return e.prototype.submit=function(){this.resolveWith(this.transactionId)},e.prototype.cancel=function(){this.resolveWith()},e}();k.decorators=[{type:t.Component,args:[{selector:"vdr-settle-refund-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.settle-refund\' | translate }}</ng-template>\n<p class="instruction">\n    {{ \'order.settle-refund-manual-instructions\' | translate: { method: refund.method } }}\n</p>\n<clr-input-container>\n    <label>{{ \'order.transaction-id\' | translate }}</label>\n    <input clrInput name="transactionId" [(ngModel)]="transactionId" />\n</clr-input-container>\n\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button type="submit" (click)="submit()" [disabled]="!transactionId" class="btn btn-primary">\n        {{ \'order.settle-refund\' | translate }}\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{padding-bottom:32px}.instruction{margin-top:0;margin-bottom:24px}"]}]}];var D,A=function(e){function t(t,r,i,o,a,l,s,c){var u=e.call(this,r,t,i,a)||this;return u.changeDetector=o,u.dataService=a,u.notificationService=l,u.modalService=s,u.orderTransitionService=c,u.detailForm=new n.FormGroup({}),u.fetchHistory=new d.Subject,u.defaultStates=["AddingItems","ArrangingPayment","PaymentAuthorized","PaymentSettled","PartiallyShipped","Shipped","PartiallyDelivered","Delivered","Cancelled","Modifying","ArrangingAdditionalPayment"],u}return p(t,e),t.prototype.ngOnInit=function(){var e=this;this.init(),this.entity$.pipe(s.take(1)).subscribe((function(t){"Modifying"===t.state&&e.router.navigate(["./","modify"],{relativeTo:e.route})})),this.customFields=this.getCustomFieldConfig("Order"),this.orderLineCustomFields=this.getCustomFieldConfig("OrderLine"),this.history$=this.fetchHistory.pipe(s.startWith(null),s.switchMap((function(){return e.dataService.order.getOrderHistory(e.id,{sort:{createdAt:r.SortOrder.DESC}}).mapStream((function(e){var t;return null===(t=e.order)||void 0===t?void 0:t.history.items}))}))),this.nextStates$=this.entity$.pipe(s.map((function(t){return!e.defaultStates.includes(t.state)?t.nextStates:t.nextStates.filter((function(t){return!e.defaultStates.includes(t)}))})))},t.prototype.ngOnDestroy=function(){this.destroy()},t.prototype.openStateDiagram=function(){var e=this;this.entity$.pipe(s.take(1),s.switchMap((function(t){return e.modalService.fromComponent(T,{closable:!0,locals:{activeState:t.state}})}))).subscribe()},t.prototype.transitionToState=function(e){var t=this;this.dataService.order.transitionToState(this.id,e).subscribe((function(n){var r=n.transitionOrderToState;switch(null==r?void 0:r.__typename){case"Order":t.notificationService.success(i.marker("order.transitioned-to-state-success"),{state:e}),t.fetchHistory.next();break;case"OrderStateTransitionError":t.notificationService.error(r.transitionError)}}))},t.prototype.manuallyTransitionToState=function(e){this.orderTransitionService.manuallyTransitionToState({orderId:e.id,nextStates:e.nextStates,cancellable:!0,message:i.marker("order.manually-transition-to-state-message"),retry:0}).subscribe()},t.prototype.transitionToModifying=function(){var e=this;this.dataService.order.transitionToState(this.id,"Modifying").subscribe((function(t){var n=t.transitionOrderToState;switch(null==n?void 0:n.__typename){case"Order":e.router.navigate(["./modify"],{relativeTo:e.route});break;case"OrderStateTransitionError":e.notificationService.error(n.transitionError)}}))},t.prototype.updateCustomFields=function(e){var t=this;this.dataService.order.updateOrderCustomFields({id:this.id,customFields:e}).subscribe((function(){t.notificationService.success(i.marker("common.notify-update-success"),{entity:"Order"})}))},t.prototype.getOrderAddressLines=function(e){return e?Object.values(e).filter((function(e){return"OrderAddress"!==e})).filter((function(e){return!!e})):[]},t.prototype.settlePayment=function(e){var t=this;this.dataService.order.settlePayment(e.id).subscribe((function(e){var n=e.settlePayment;switch(n.__typename){case"Payment":"Settled"===n.state?t.notificationService.success(i.marker("order.settle-payment-success")):t.notificationService.error(i.marker("order.settle-payment-error")),t.dataService.order.getOrder(t.id).single$.subscribe(),t.fetchHistory.next();break;case"OrderStateTransitionError":case"PaymentStateTransitionError":case"SettlePaymentError":t.notificationService.error(n.message)}}))},t.prototype.transitionPaymentState=function(e){var t=this,n=e.payment,r=e.state;this.dataService.order.transitionPaymentToState(n.id,r).subscribe((function(e){var n=e.transitionPaymentToState;switch(n.__typename){case"Payment":t.notificationService.success(i.marker("order.transitioned-payment-to-state-success"),{state:r}),t.dataService.order.getOrder(t.id).single$.subscribe(),t.fetchHistory.next();break;case"PaymentStateTransitionError":t.notificationService.error(n.message)}}))},t.prototype.canAddFulfillment=function(e){return!e.lines.reduce((function(e,t){return y(e,t.items)}),[]).every((function(e){return!!e.fulfillment}))&&!this.hasUnsettledModifications(e)&&0===this.outstandingPaymentAmount(e)&&(e.nextStates.includes("Shipped")||e.nextStates.includes("PartiallyShipped")||e.nextStates.includes("Delivered"))},t.prototype.hasUnsettledModifications=function(e){return 0<e.modifications.filter((function(e){return!e.isSettled})).length},t.prototype.getOutstandingModificationAmount=function(e){return o.summate(e.modifications.filter((function(e){return!e.isSettled})),"priceChange")},t.prototype.outstandingPaymentAmount=function(e){var t,n,r=null!==(n=null===(t=e.payments)||void 0===t?void 0:t.filter((function(e){return"Cancelled"!==e.state&&"Declined"!==e.state&&"Error"!==e.state})).map((function(e){return l.pick(e,["amount"])})))&&void 0!==n?n:[],i=o.summate(r,"amount");return e.totalWithTax-i},t.prototype.addManualPayment=function(e){var t=this;this.modalService.fromComponent(c,{closable:!0,locals:{outstandingAmount:this.outstandingPaymentAmount(e),currencyCode:e.currencyCode}}).pipe(s.switchMap((function(e){return e?t.dataService.order.addManualPaymentToOrder({orderId:t.id,transactionId:e.transactionId,method:e.method,metadata:e.metadata||{}}):d.EMPTY})),s.switchMap((function(n){var r=n.addManualPaymentToOrder;switch(r.__typename){case"Order":return t.notificationService.success(i.marker("order.add-payment-to-order-success")),t.orderTransitionService.transitionToPreModifyingState(e.id,e.nextStates);case"ManualPaymentStateError":return t.notificationService.error(r.message),d.EMPTY;default:return d.EMPTY}}))).subscribe((function(e){e&&t.refetchOrder({result:e})}))},t.prototype.fulfillOrder=function(){var e=this;this.entity$.pipe(s.take(1),s.switchMap((function(t){return e.modalService.fromComponent(v,{size:"xl",locals:{order:t}})})),s.switchMap((function(t){return t?e.dataService.order.createFulfillment(t):d.of(void 0)})),s.switchMap((function(t){return e.refetchOrder(t).pipe(s.mapTo(t))}))).subscribe((function(t){if(t)switch(t.addFulfillmentToOrder.__typename){case"Fulfillment":e.notificationService.success(i.marker("order.create-fulfillment-success"));break;case"EmptyOrderLineSelectionError":case"InsufficientStockOnHandError":case"ItemsAlreadyFulfilledError":e.notificationService.error(t.addFulfillmentToOrder.message)}}))},t.prototype.transitionFulfillment=function(e,t){var n=this;this.dataService.order.transitionFulfillmentToState(e,t).pipe(s.switchMap((function(e){return n.refetchOrder(e)}))).subscribe((function(){n.notificationService.success(i.marker("order.successfully-updated-fulfillment"))}))},t.prototype.cancelOrRefund=function(e){var t=this.orderHasSettledPayments(e);"PaymentAuthorized"!==e.state&&!0!==e.active&&t?this.refundOrder(e):this.cancelOrder(e)},t.prototype.settleRefund=function(e){var t=this;this.modalService.fromComponent(k,{size:"md",locals:{refund:e}}).pipe(s.switchMap((function(n){return n?t.dataService.order.settleRefund({transactionId:n,id:e.id},t.id):d.of(void 0)}))).subscribe((function(e){e&&t.notificationService.success(i.marker("order.settle-refund-success"))}))},t.prototype.addNote=function(e){var t=this,n=e.note,r=e.isPublic;this.dataService.order.addNoteToOrder({id:this.id,note:n,isPublic:r}).pipe(s.switchMap((function(e){return t.refetchOrder(e)}))).subscribe((function(e){t.notificationService.success(i.marker("common.notify-create-success"),{entity:"Note"})}))},t.prototype.updateNote=function(e){var t=this;this.modalService.fromComponent(r.EditNoteDialogComponent,{closable:!0,locals:{displayPrivacyControls:!0,note:e.data.note,noteIsPrivate:!e.isPublic}}).pipe(s.switchMap((function(n){return n?t.dataService.order.updateOrderNote({noteId:e.id,isPublic:!n.isPrivate,note:n.note}):d.EMPTY}))).subscribe((function(e){t.fetchHistory.next(),t.notificationService.success(i.marker("common.notify-update-success"),{entity:"Note"})}))},t.prototype.deleteNote=function(e){var t=this;return this.modalService.dialog({title:i.marker("common.confirm-delete-note"),body:e.data.note,buttons:[{type:"secondary",label:i.marker("common.cancel")},{type:"danger",label:i.marker("common.delete"),returnValue:!0}]}).pipe(s.switchMap((function(n){return n?t.dataService.order.deleteOrderNote(e.id):d.EMPTY}))).subscribe((function(){t.fetchHistory.next(),t.notificationService.success(i.marker("common.notify-delete-success"),{entity:"Note"})}))},t.prototype.orderHasSettledPayments=function(e){var t;return!!(null===(t=e.payments)||void 0===t?void 0:t.find((function(e){return"Settled"===e.state})))},t.prototype.cancelOrder=function(e){var t=this;this.modalService.fromComponent(g,{size:"xl",locals:{order:e}}).pipe(s.switchMap((function(e){return e?t.dataService.order.cancelOrder(e):d.of(void 0)})),s.switchMap((function(e){return t.refetchOrder(e)}))).subscribe((function(e){e&&t.notificationService.success(i.marker("order.cancelled-order-success"))}))},t.prototype.refundOrder=function(e){var t=this;this.modalService.fromComponent(P,{size:"xl",locals:{order:e}}).pipe(s.switchMap((function(e){var n;if(!e)return d.of(void 0);var r=[];return e.refund.lines.length&&r.push(t.dataService.order.refundOrder(e.refund).pipe(s.map((function(e){return e.refundOrder})))),(null===(n=e.cancel.lines)||void 0===n?void 0:n.length)&&r.push(t.dataService.order.cancelOrder(e.cancel).pipe(s.map((function(e){return e.cancelOrder})))),d.merge.apply(void 0,y(r))}))).subscribe((function(e){if(e)switch(e.__typename){case"Order":t.refetchOrder(e).subscribe(),t.notificationService.success(i.marker("order.cancelled-order-success"));break;case"Refund":t.refetchOrder(e).subscribe(),"Failed"===e.state?t.notificationService.error(i.marker("order.refund-order-failed")):t.notificationService.success(i.marker("order.refund-order-success"));break;case"QuantityTooGreatError":case"MultipleOrderError":case"OrderStateTransitionError":case"CancelActiveOrderError":case"EmptyOrderLineSelectionError":case"AlreadyRefundedError":case"NothingToRefundError":case"PaymentOrderMismatchError":case"RefundOrderStateError":case"RefundStateTransitionError":t.notificationService.error(e.message)}}))},t.prototype.refetchOrder=function(e){return this.fetchHistory.next(),e?this.dataService.order.getOrder(this.id).single$:d.of(void 0)},t.prototype.setFormValues=function(e){},t}(r.BaseDetailComponent);A.decorators=[{type:t.Component,args:[{selector:"vdr-order-detail",template:'<vdr-action-bar *ngIf="entity$ | async as order">\n    <vdr-ab-left>\n        <div class="flex clr-align-items-center">\n            <vdr-entity-info [entity]="entity$ | async"></vdr-entity-info>\n            <vdr-order-state-label [state]="order.state">\n                <button\n                    class="icon-button"\n                    (click)="openStateDiagram()"\n                    [title]="\'order.order-state-diagram\' | translate"\n                >\n                    <clr-icon shape="list"></clr-icon>\n                </button>\n            </vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId="order-detail"></vdr-action-bar-items>\n        <button\n            class="btn btn-primary"\n            *ngIf="\n                order.state === \'ArrangingAdditionalPayment\' &&\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\n            "\n            (click)="addManualPayment(order)"\n        >\n            {{ \'order.add-payment-to-order\' | translate }}\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\n        </button>\n        <button\n            class="btn btn-primary"\n            *ngIf="order.state !== \'ArrangingAdditionalPayment\' && 0 < outstandingPaymentAmount(order)"\n            (click)="transitionToState(\'ArrangingAdditionalPayment\')"\n        >\n            {{ \'order.arrange-additional-payment\' | translate }}\n        </button>\n        <button class="btn btn-primary" (click)="fulfillOrder()" [disabled]="!canAddFulfillment(order)">\n            {{ \'order.fulfill-order\' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class="icon-button" vdrDropdownTrigger>\n                <clr-icon shape="ellipsis-vertical"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition="bottom-right">\n                <ng-container *ngIf="order.nextStates.includes(\'Modifying\')">\n                    <button type="button" class="btn" vdrDropdownItem (click)="transitionToModifying()">\n                        <clr-icon shape="pencil"></clr-icon>\n                        {{ \'order.modify-order\' | translate }}\n                    </button>\n                    <div class="dropdown-divider"></div>\n                </ng-container>\n                <button\n                    type="button"\n                    class="btn"\n                    vdrDropdownItem\n                    *ngIf="order.nextStates.includes(\'Cancelled\')"\n                    (click)="cancelOrRefund(order)"\n                >\n                    <clr-icon shape="error-standard" class="is-error"></clr-icon>\n                    <ng-container *ngIf="orderHasSettledPayments(order); else cancelOnly">\n                        {{ \'order.refund-and-cancel-order\' | translate }}\n                    </ng-container>\n                    <ng-template #cancelOnly>\n                        {{ \'order.cancel-order\' | translate }}\n                    </ng-template>\n                </button>\n\n                <ng-container *ngIf="(nextStates$ | async)?.length">\n                    <div class="dropdown-divider"></div>\n                    <button\n                        *ngFor="let nextState of nextStates$ | async"\n                        type="button"\n                        class="btn"\n                        vdrDropdownItem\n                        (click)="transitionToState(nextState)"\n                    >\n                        <clr-icon shape="step-forward-2"></clr-icon>\n                        {{\n                            \'order.transition-to-state\'\n                                | translate: { state: (nextState | stateI18nToken | translate) }\n                        }}\n                    </button>\n                </ng-container>\n                <div class="dropdown-divider"></div>\n                <button type="button" class="btn" vdrDropdownItem (click)="manuallyTransitionToState(order)">\n                    <clr-icon shape="step-forward-2" class="is-warning"></clr-icon>\n                    {{ \'order.manually-transition-to-state\' | translate }}\n                </button>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf="entity$ | async as order">\n    <div class="clr-row">\n        <div class="clr-col-lg-8">\n            <vdr-order-table\n                [order]="order"\n                [orderLineCustomFields]="orderLineCustomFields"\n            ></vdr-order-table>\n            <h4>{{ \'order.tax-summary\' | translate }}</h4>\n            <table class="table">\n                <thead>\n                    <tr>\n                        <th>{{ \'common.description\' | translate }}</th>\n                        <th>{{ \'order.tax-rate\' | translate }}</th>\n                        <th>{{ \'order.tax-base\' | translate }}</th>\n                        <th>{{ \'order.tax-total\' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor="let row of order.taxSummary">\n                        <td>{{ row.description }}</td>\n                        <td>{{ row.taxRate / 100 | percent }}</td>\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <vdr-order-history\n                [order]="order"\n                [history]="history$ | async"\n                (addNote)="addNote($event)"\n                (updateNote)="updateNote($event)"\n                (deleteNote)="deleteNote($event)"\n            ></vdr-order-history>\n        </div>\n        <div class="clr-col-lg-4 order-cards">\n            <vdr-order-custom-fields-card\n                [customFieldsConfig]="customFields"\n                [customFieldValues]="order.customFields"\n                (updateClick)="updateCustomFields($event)"\n            ></vdr-order-custom-fields-card>\n            <div class="card">\n                <div class="card-header">\n                    {{ \'order.customer\' | translate }}\n                </div>\n                <div class="card-block">\n                    <div class="card-text">\n                        <vdr-customer-label [customer]="order.customer"></vdr-customer-label>\n                        <h6 *ngIf="getOrderAddressLines(order.shippingAddress).length">\n                            {{ \'order.shipping-address\' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]="order.shippingAddress"></vdr-formatted-address>\n                        <h6 *ngIf="getOrderAddressLines(order.billingAddress).length">\n                            {{ \'order.billing-address\' | translate }}\n                        </h6>\n                        <vdr-formatted-address [address]="order.billingAddress"></vdr-formatted-address>\n                    </div>\n                </div>\n            </div>\n            <ng-container *ngIf="order.payments && order.payments.length">\n                <vdr-order-payment-card\n                    *ngFor="let payment of order.payments"\n                    [currencyCode]="order.currencyCode"\n                    [payment]="payment"\n                    (settlePayment)="settlePayment($event)"\n                    (transitionPaymentState)="transitionPaymentState($event)"\n                    (settleRefund)="settleRefund($event)"\n                ></vdr-order-payment-card>\n            </ng-container>\n            <ng-container *ngFor="let fulfillment of order.fulfillments">\n                <vdr-fulfillment-card\n                    [fulfillment]="fulfillment"\n                    [order]="order"\n                    (transitionState)="transitionFulfillment(fulfillment.id, $event)"\n                ></vdr-fulfillment-card>\n            </ng-container>\n        </div>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".shipping-address{list-style-type:none;line-height:1.3em}.order-cards h6{margin-top:6px;color:var(--color-text-200)}"]}]}],A.ctorParameters=function(){return[{type:a.Router},{type:a.ActivatedRoute},{type:r.ServerConfigService},{type:t.ChangeDetectorRef},{type:r.DataService},{type:r.NotificationService},{type:r.ModalService},{type:F}]},e.OrderEditResultType=void 0,(D=e.OrderEditResultType||(e.OrderEditResultType={}))[D.Refund=0]="Refund",D[D.Payment=1]="Payment",D[D.PriceUnchanged=2]="PriceUnchanged",D[D.Cancel=3]="Cancel";var E=function(){function t(){}return Object.defineProperty(t.prototype,"priceDifference",{get:function(){return this.order.totalWithTax-this.originalTotalWithTax},enumerable:!1,configurable:!0}),t.prototype.ngOnInit=function(){this.refundNote=this.modifyOrderInput.note||""},t.prototype.cancel=function(){this.resolveWith({result:e.OrderEditResultType.Cancel})},t.prototype.submit=function(){0<this.priceDifference?this.resolveWith({result:e.OrderEditResultType.Payment}):this.priceDifference<0?this.resolveWith({result:e.OrderEditResultType.Refund,refundPaymentId:this.selectedPayment.id,refundNote:this.refundNote}):this.resolveWith({result:e.OrderEditResultType.PriceUnchanged})},t}();E.decorators=[{type:t.Component,args:[{selector:"vdr-order-edits-preview-dialog",template:'<ng-template vdrDialogTitle>{{ \'order.confirm-modifications\' | translate }}</ng-template>\n<vdr-order-table [order]="order" [orderLineCustomFields]="orderLineCustomFields"></vdr-order-table>\n\n<h4 class="h4">\n    {{ \'order.modify-order-price-difference\' | translate }}:\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\n</h4>\n<div *ngIf="priceDifference < 0">\n<clr-select-container>\n    <label>{{ \'order.payment-to-refund\' | translate }}</label>\n    <select clrSelect name="options" [(ngModel)]="selectedPayment">\n        <option\n            *ngFor="let payment of order.payments"\n            [ngValue]="payment"\n        >\n            #{{ payment.id }} {{ payment.method }}:\n            {{ payment.amount | localeCurrency: order.currencyCode }}\n        </option>\n    </select>\n</clr-select-container>\n    <label class="clr-control-label">{{ \'order.refund-cancellation-reason\' | translate }}</label>\n    <textarea [(ngModel)]="refundNote" name="refundNote" clrTextarea required></textarea>\n</div>\n<ng-template vdrDialogButtons>\n    <button type="button" class="btn" (click)="cancel()">{{ \'common.cancel\' | translate }}</button>\n    <button type="submit" (click)="submit()" [disabled]="priceDifference < 0 && !selectedPayment" class="btn btn-primary">\n        {{ \'common.confirm\' | translate }}\n    </button>\n</ng-template>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}];var R=function(t){function i(e,r,i,o,a,l,d,s){var c=t.call(this,r,e,i,a)||this;return c.changeDetector=o,c.dataService=a,c.notificationService=l,c.modalService=d,c.orderTransitionService=s,c.detailForm=new n.FormGroup({}),c.modifyOrderInput={dryRun:!0,orderId:"",addItems:[],adjustOrderLines:[],surcharges:[],note:"",updateShippingAddress:{},updateBillingAddress:{}},c.note="",c.recalculateShipping=!0,c.addedVariants=new Map,c}return p(i,t),Object.defineProperty(i.prototype,"addedLines",{get:function(){var e=this,t=function(e){return"SinglePrice"===e.__typename?e.value:0};return(this.modifyOrderInput.addItems||[]).map((function(n){var r=e.addedVariants.get(n.productVariantId);if(r)return Object.assign(Object.assign({},r),{price:t(r.price),priceWithTax:t(r.priceWithTax),quantity:n.quantity})})).filter(o.notNullOrUndefined)},enumerable:!1,configurable:!0}),i.prototype.ngOnInit=function(){var e,t,i=this;this.init(),this.addressCustomFields=this.getCustomFieldConfig("Address"),this.modifyOrderInput.orderId=this.route.snapshot.paramMap.get("id"),this.orderLineCustomFields=this.getCustomFieldConfig("OrderLine"),this.entity$.pipe(s.takeUntil(this.destroy$)).subscribe((function(e){var t,r,o,a,l,d,c,u,p,f,y,g,v,h,b,C,S,I,x,O;i.surchargeForm=new n.FormGroup({description:new n.FormControl("",n.Validators.required),sku:new n.FormControl(""),price:new n.FormControl(0,n.Validators.required),priceIncludesTax:new n.FormControl(!0),taxRate:new n.FormControl(0),taxDescription:new n.FormControl("")}),i.shippingAddressForm||(i.shippingAddressForm=new n.FormGroup({fullName:new n.FormControl(null===(o=e.shippingAddress)||void 0===o?void 0:o.fullName),company:new n.FormControl(null===(a=e.shippingAddress)||void 0===a?void 0:a.company),streetLine1:new n.FormControl(null===(l=e.shippingAddress)||void 0===l?void 0:l.streetLine1),streetLine2:new n.FormControl(null===(d=e.shippingAddress)||void 0===d?void 0:d.streetLine2),city:new n.FormControl(null===(c=e.shippingAddress)||void 0===c?void 0:c.city),province:new n.FormControl(null===(u=e.shippingAddress)||void 0===u?void 0:u.province),postalCode:new n.FormControl(null===(p=e.shippingAddress)||void 0===p?void 0:p.postalCode),countryCode:new n.FormControl(null===(f=e.shippingAddress)||void 0===f?void 0:f.countryCode),phoneNumber:new n.FormControl(null===(y=e.shippingAddress)||void 0===y?void 0:y.phoneNumber)})),i.billingAddressForm||(i.billingAddressForm=new n.FormGroup({fullName:new n.FormControl(null===(g=e.billingAddress)||void 0===g?void 0:g.fullName),company:new n.FormControl(null===(v=e.billingAddress)||void 0===v?void 0:v.company),streetLine1:new n.FormControl(null===(h=e.billingAddress)||void 0===h?void 0:h.streetLine1),streetLine2:new n.FormControl(null===(b=e.billingAddress)||void 0===b?void 0:b.streetLine2),city:new n.FormControl(null===(C=e.billingAddress)||void 0===C?void 0:C.city),province:new n.FormControl(null===(S=e.billingAddress)||void 0===S?void 0:S.province),postalCode:new n.FormControl(null===(I=e.billingAddress)||void 0===I?void 0:I.postalCode),countryCode:new n.FormControl(null===(x=e.billingAddress)||void 0===x?void 0:x.countryCode),phoneNumber:new n.FormControl(null===(O=e.billingAddress)||void 0===O?void 0:O.phoneNumber)})),i.orderLineCustomFieldsFormArray=new n.FormArray([]);var w=function(e){var t,r,o=new n.FormGroup({});try{for(var a=(t=void 0,m(i.orderLineCustomFields)),l=a.next();!l.done;l=a.next()){var d=l.value.name;o.addControl(d,new n.FormControl(e.customFields[d]))}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=a.return)&&r.call(a)}finally{if(t)throw t.error}}o.valueChanges.pipe(s.takeUntil(i.destroy$)).subscribe((function(t){var n=i.modifyOrderInput.adjustOrderLines.find((function(t){return t.orderLineId===e.id}));n||(n={orderLineId:e.id,quantity:e.quantity},i.modifyOrderInput.adjustOrderLines.push(n)),i.orderLineCustomFields.length&&(n.customFields=t)})),i.orderLineCustomFieldsFormArray.push(o)};try{for(var F=m(e.lines),T=F.next();!T.done;T=F.next()){w(T.value)}}catch(e){t={error:e}}finally{try{T&&!T.done&&(r=F.return)&&r.call(F)}finally{if(t)throw t.error}}})),this.addItemCustomFieldsFormArray=new n.FormArray([]),this.addItemCustomFieldsForm=new n.FormGroup({});try{for(var o=m(this.orderLineCustomFields),a=o.next();!a.done;a=o.next()){var l=a.value;this.addItemCustomFieldsForm.addControl(l.name,new n.FormControl)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}this.availableCountries$=this.dataService.settings.getAvailableCountries().mapSingle((function(e){return e.countries.items})).pipe(s.shareReplay(1)),this.dataService.order.getOrderHistory(this.id,{take:1,sort:{createdAt:r.SortOrder.DESC},filter:{type:{eq:r.HistoryEntryType.ORDER_STATE_TRANSITION}}}).single$.subscribe((function(e){var t=e.order;i.previousState=null==t?void 0:t.history.items[0].data.from}))},i.prototype.ngOnDestroy=function(){this.destroy()},i.prototype.transitionToPriorState=function(e){var t=this;this.orderTransitionService.transitionToPreModifyingState(e.id,e.nextStates).subscribe((function(e){t.router.navigate([".."],{relativeTo:t.route})}))},i.prototype.canPreviewChanges=function(){var e=this.modifyOrderInput,t=e.addItems,n=e.adjustOrderLines,r=e.surcharges;return!!(null==t?void 0:t.length)||!!(null==r?void 0:r.length)||!!(null==n?void 0:n.length)||this.shippingAddressForm.dirty&&this.shippingAddressForm.valid||this.billingAddressForm.dirty&&this.billingAddressForm.valid},i.prototype.isLineModified=function(e){var t;return!!(null===(t=this.modifyOrderInput.adjustOrderLines)||void 0===t?void 0:t.find((function(t){return t.orderLineId===e.id&&t.quantity!==e.quantity})))},i.prototype.updateLineQuantity=function(e,t){var n=this.modifyOrderInput.adjustOrderLines,r=null==n?void 0:n.find((function(t){return t.orderLineId===e.id}));r&&+t===e.quantity&&(null==n||n.splice(null==n?void 0:n.indexOf(r),1)),r||(r={orderLineId:e.id,quantity:+t},null==n||n.push(r)),r.quantity=+t},i.prototype.updateAddedItemQuantity=function(e,t){var n,r=null===(n=this.modifyOrderInput.addItems)||void 0===n?void 0:n.find((function(t){return t.productVariantId===e.productVariantId}));r&&(r.quantity=+t)},i.prototype.trackByProductVariantId=function(e,t){return t.productVariantId},i.prototype.getSelectedItemPrice=function(e){switch(null==e?void 0:e.priceWithTax.__typename){case"SinglePrice":return e.priceWithTax.value;default:return 0}},i.prototype.addItemToOrder=function(e){var t,r,i,o,a=this;if(e){var l=this.orderLineCustomFields.length?this.addItemCustomFieldsForm.value:void 0,d=null===(i=this.modifyOrderInput.addItems)||void 0===i?void 0:i.find((function(t){return a.isMatchingAddItemRow(t,e,l)}));if(d?d.quantity++:(d={productVariantId:e.productVariantId,quantity:1},l&&(d.customFields=l),null===(o=this.modifyOrderInput.addItems)||void 0===o||o.push(d)),l){var c=new n.FormGroup({});try{for(var u=m(Object.entries(l)),p=u.next();!p.done;p=u.next()){var y=f(p.value,2),g=y[0],v=y[1];c.addControl(g,new n.FormControl(v))}}catch(e){t={error:e}}finally{try{p&&!p.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}this.addItemCustomFieldsFormArray.push(c),c.valueChanges.pipe(s.takeUntil(this.destroy$)).subscribe((function(e){d&&(d.customFields=e)}))}this.addItemCustomFieldsForm.reset({}),this.addItemSelectedVariant=void 0,this.addedVariants.set(e.productVariantId,e)}},i.prototype.isMatchingAddItemRow=function(e,t,n){return e.productVariantId===t.productVariantId&&JSON.stringify(e.customFields)===JSON.stringify(n)},i.prototype.removeAddedItem=function(e){this.modifyOrderInput.addItems.splice(e,1),-1<e&&this.addItemCustomFieldsFormArray.removeAt(e)},i.prototype.getSurchargePrices=function(e){var t=e.priceIncludesTax?e.price:Math.round(e.price*((100+(e.taxRate||0))/100));return{price:e.priceIncludesTax?Math.round(e.price/((100+(e.taxRate||0))/100)):e.price,priceWithTax:t}},i.prototype.addSurcharge=function(e){var t;null===(t=this.modifyOrderInput.surcharges)||void 0===t||t.push(e),this.surchargeForm.reset({price:0,priceIncludesTax:!0,taxRate:0})},i.prototype.removeSurcharge=function(e){var t;null===(t=this.modifyOrderInput.surcharges)||void 0===t||t.splice(e,1)},i.prototype.previewAndModify=function(t){var n,r=this,i=Object.assign(Object.assign(Object.assign(Object.assign({},this.modifyOrderInput),this.billingAddressForm.dirty?{updateBillingAddress:this.billingAddressForm.value}:{}),this.shippingAddressForm.dirty?{updateShippingAddress:this.shippingAddressForm.value}:{}),{dryRun:!0,note:null!==(n=this.note)&&void 0!==n?n:"",options:{recalculateShipping:this.recalculateShipping}}),a=t.totalWithTax;this.dataService.order.modifyOrder(i).pipe(s.switchMap((function(e){var t=e.modifyOrder;switch(t.__typename){case"Order":return r.modalService.fromComponent(E,{size:"xl",closable:!1,locals:{originalTotalWithTax:a,order:t,orderLineCustomFields:r.orderLineCustomFields,modifyOrderInput:i}});case"InsufficientStockError":case"NegativeQuantityError":case"NoChangesSpecifiedError":case"OrderLimitError":case"OrderModificationStateError":case"PaymentMethodMissingError":case"RefundPaymentIdMissingError":return r.notificationService.error(t.message),d.of(!1);case null:case void 0:return d.of(!1);default:o.assertNever(t)}})),s.switchMap((function(n){if(n&&n.result!==e.OrderEditResultType.Cancel){var o=Object.assign(Object.assign({},i),{dryRun:!1});return n.result===e.OrderEditResultType.Refund&&(o.refund={paymentId:n.refundPaymentId,reason:n.refundNote}),r.dataService.order.modifyOrder(o).pipe(s.switchMap((function(e){var n=e.modifyOrder;if("Order"===n.__typename){var i=0<n.totalWithTax-a?"ArrangingAdditionalPayment":r.previousState;return r.dataService.order.transitionToState(t.id,i).pipe(s.mapTo(!0))}return r.notificationService.error(n.message),d.EMPTY})))}return r.dataService.order.getOrder(r.id).mapSingle((function(){return!1}))}))).subscribe((function(e){e&&r.router.navigate(["../"],{relativeTo:r.route})}))},i.prototype.setFormValues=function(e,t){},i}(r.BaseDetailComponent);R.decorators=[{type:t.Component,args:[{selector:"vdr-order-editor",template:'<vdr-action-bar *ngIf="entity$ | async as order">\n    <vdr-ab-left>\n        <div class="flex clr-align-items-center">\n            <vdr-entity-info [entity]="entity$ | async"></vdr-entity-info>\n            <vdr-order-state-label [state]="order.state"></vdr-order-state-label>\n        </div>\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <button class="btn btn-secondary" (click)="transitionToPriorState(order)">\n            {{ \'order.cancel-modification\' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<div *ngIf="entity$ | async as order">\n    <div class="clr-row">\n        <div class="clr-col-lg-8">\n            <table class="order-table table">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>{{ \'order.product-name\' | translate }}</th>\n                        <th>{{ \'order.product-sku\' | translate }}</th>\n                        <th>{{ \'order.unit-price\' | translate }}</th>\n                        <th>{{ \'order.quantity\' | translate }}</th>\n                        <th *ngIf="orderLineCustomFields.length">{{ \'common.custom-fields\' | translate }}</th>\n                        <th>{{ \'order.total\' | translate }}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr\n                        *ngFor="let line of order.lines; let i = index"\n                        class="order-line"\n                        [class.is-cancelled]="line.quantity === 0"\n                        [class.modified]="isLineModified(line)"\n                    >\n                        <td class="align-middle thumb">\n                            <img\n                                *ngIf="line.featuredAsset"\n                                [src]="line.featuredAsset | assetPreview: \'tiny\'"\n                            />\n                        </td>\n                        <td class="align-middle name">{{ line.productVariant.name }}</td>\n                        <td class="align-middle sku">{{ line.productVariant.sku }}</td>\n                        <td class="align-middle unit-price">\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class="align-middle quantity">\n                            <input\n                                type="number"\n                                min="0"\n                                [value]="line.quantity"\n                                (input)="updateLineQuantity(line, $event.target.value)"\n                            />\n                            <vdr-line-refunds [line]="line" [payments]="order.payments"></vdr-line-refunds>\n                            <vdr-line-fulfillment\n                                [line]="line"\n                                [orderState]="order.state"\n                            ></vdr-line-fulfillment>\n                        </td>\n                        <td *ngIf="orderLineCustomFields.length" class="order-line-custom-field align-middle">\n                            <ng-container *ngFor="let customField of orderLineCustomFields">\n                                <vdr-custom-field-control\n                                    [customField]="customField"\n                                    [customFieldsFormGroup]="orderLineCustomFieldsFormArray.get([i])"\n                                    entityName="OrderLine"\n                                    [compact]="true"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class="align-middle total">\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        *ngFor="let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index"\n                        class="modified"\n                    >\n                        <td class="align-middle thumb">\n                            <img\n                                *ngIf="addedLine.productAsset"\n                                [src]="addedLine.productAsset | assetPreview: \'tiny\'"\n                            />\n                        </td>\n                        <td class="align-middle name">{{ addedLine.productVariantName }}</td>\n                        <td class="align-middle sku">{{ addedLine.sku }}</td>\n                        <td class="align-middle unit-price">\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                        <td class="align-middle quantity">\n                            <input\n                                type="number"\n                                min="0"\n                                [value]="addedLine.quantity"\n                                (input)="updateAddedItemQuantity(addedLine, $event.target.value)"\n                            />\n                            <button class="icon-button" (click)="removeAddedItem(i)">\n                                <clr-icon shape="trash"></clr-icon>\n                            </button>\n                        </td>\n                        <td *ngIf="orderLineCustomFields.length" class="order-line-custom-field align-middle">\n                            <ng-container *ngFor="let customField of orderLineCustomFields">\n                                <vdr-custom-field-control\n                                    [customField]="customField"\n                                    [customFieldsFormGroup]="addItemCustomFieldsFormArray.get([i])"\n                                    entityName="OrderLine"\n                                    [compact]="true"\n                                ></vdr-custom-field-control>\n                            </ng-container>\n                        </td>\n                        <td class="align-middle total">\n                            {{\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\n                                    | currency: order.currencyCode\n                            }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{\n                                    (addedLine.price * addedLine.quantity) / 100\n                                        | currency: order.currencyCode\n                                }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class="surcharge" *ngFor="let surcharge of order.surcharges">\n                        <td class="align-middle name left" colspan="2">{{ surcharge.description }}</td>\n                        <td class="align-middle sku">{{ surcharge.sku }}</td>\n                        <td class="align-middle"></td>\n                        <td></td>\n                        <td *ngIf="orderLineCustomFields.length"></td>\n                        <td class="align-middle total">\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                    <tr\n                        class="surcharge modified"\n                        *ngFor="let surcharge of modifyOrderInput.surcharges; let i = index"\n                    >\n                        <td class="align-middle name left" colspan="2">\n                            {{ surcharge.description }}\n                            <button class="icon-button" (click)="removeSurcharge(i)">\n                                <clr-icon shape="trash"></clr-icon>\n                            </button>\n                        </td>\n                        <td class="align-middle sku">{{ surcharge.sku }}</td>\n                        <td class="align-middle"></td>\n                        <td></td>\n                        <td *ngIf="orderLineCustomFields.length"></td>\n                        <td class="align-middle total">\n                            <ng-container *ngIf="getSurchargePrices(surcharge) as surchargePrice">\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\n                                <div class="net-price" [title]="\'order.net-price\' | translate">\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\n                                </div>\n                            </ng-container>\n                        </td>\n                    </tr>\n                    <tr class="shipping">\n                        <td class="left clr-align-middle">{{ \'order.shipping\' | translate }}</td>\n                        <td class="clr-align-middle">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n                        <td colspan="3"></td>\n                        <td *ngIf="orderLineCustomFields.length"></td>\n                        <td class="clr-align-middle">\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                            <div class="net-price" [title]="\'order.net-price\' | translate">\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <h4 class="mb2">{{ \'order.modifications\' | translate }}</h4>\n            <clr-accordion>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ \'order.add-item-to-order\' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-product-selector class="mb4" (productSelected)="addItemSelectedVariant = $event">\n                        </vdr-product-selector>\n                        <div *ngIf="addItemSelectedVariant" class="flex mb4">\n                            <img\n                                *ngIf="addItemSelectedVariant.productAsset as asset"\n                                [src]="asset | assetPreview: \'tiny\'"\n                                class="mr4"\n                            />\n                            <div>\n                                <strong class="mr4">{{ addItemSelectedVariant.productVariantName }}</strong>\n                                <small>{{ addItemSelectedVariant.sku }}</small>\n                                <div>\n                                    {{\n                                        getSelectedItemPrice(addItemSelectedVariant)\n                                            | localeCurrency: order.currencyCode\n                                    }}\n                                </div>\n                            </div>\n                        </div>\n                        <ng-container *ngFor="let customField of orderLineCustomFields">\n                            <vdr-custom-field-control\n                                [readonly]="!addItemSelectedVariant"\n                                [customField]="customField"\n                                [customFieldsFormGroup]="addItemCustomFieldsForm"\n                                entityName="OrderLine"\n                                [compact]="true"\n                            ></vdr-custom-field-control>\n                        </ng-container>\n                        <button\n                            class="btn btn-secondary"\n                            [disabled]="!addItemSelectedVariant || addItemCustomFieldsForm.invalid"\n                            (click)="addItemToOrder(addItemSelectedVariant)"\n                        >\n                            {{ \'order.add-item-to-order\' | translate }}\n                        </button>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ \'order.add-surcharge\' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <form [formGroup]="surchargeForm" (submit)="addSurcharge(surchargeForm.value)">\n                            <vdr-form-field [label]="\'common.description\' | translate" for="description"\n                                ><input id="description" type="text" formControlName="description"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]="\'order.product-sku\' | translate" for="sku"\n                                ><input id="sku" type="text" formControlName="sku"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]="\'common.price\' | translate" for="price"\n                                ><vdr-currency-input\n                                    [currencyCode]="order.currencyCode"\n                                    id="price"\n                                    formControlName="price"\n                                ></vdr-currency-input\n                            ></vdr-form-field>\n                            <vdr-form-field\n                                [label]="\n                                    \'catalog.price-includes-tax-at\'\n                                        | translate: { rate: surchargeForm.get(\'taxRate\')?.value }\n                                "\n                                for="priceIncludesTax"\n                                ><input\n                                    id="priceIncludesTax"\n                                    type="checkbox"\n                                    clrCheckbox\n                                    formControlName="priceIncludesTax"\n                            /></vdr-form-field>\n                            <vdr-form-field [label]="\'order.tax-rate\' | translate" for="taxRate"\n                                ><vdr-affixed-input suffix="%"\n                                    ><input\n                                        id="taxRate"\n                                        type="number"\n                                        min="0"\n                                        max="100"\n                                        formControlName="taxRate" /></vdr-affixed-input\n                            ></vdr-form-field>\n                            <vdr-form-field [label]="\'order.tax-description\' | translate" for="taxDescription"\n                                ><input id="taxDescription" type="text" formControlName="taxDescription"\n                            /></vdr-form-field>\n                            <button\n                                class="btn btn-secondary"\n                                [disabled]="\n                                    surchargeForm.invalid ||\n                                    surchargeForm.pristine ||\n                                    surchargeForm.get(\'price\')?.value === 0\n                                "\n                            >\n                                {{ \'order.add-surcharge\' | translate }}\n                            </button>\n                        </form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ \'order.edit-shipping-address\' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]="shippingAddressForm"\n                            [availableCountries]="availableCountries$ | async"\n                            [customFields]="addressCustomFields"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n                <clr-accordion-panel>\n                    <clr-accordion-title>{{ \'order.edit-billing-address\' | translate }}</clr-accordion-title>\n                    <clr-accordion-content *clrIfExpanded>\n                        <vdr-address-form\n                            [formGroup]="billingAddressForm"\n                            [availableCountries]="availableCountries$ | async"\n                            [customFields]="addressCustomFields"\n                        ></vdr-address-form>\n                    </clr-accordion-content>\n                </clr-accordion-panel>\n            </clr-accordion>\n        </div>\n        <div class="clr-col-lg-4 order-cards">\n            <div class="card">\n                <div class="card-header">\n                    {{ \'order.modification-summary\' | translate }}\n                </div>\n                <div class="card-block">\n                    <ul>\n                        <li *ngIf="modifyOrderInput.addItems?.length">\n                            {{\n                                \'order.modification-adding-items\'\n                                    | translate: { count: modifyOrderInput.addItems?.length }\n                            }}\n                        </li>\n                        <li *ngIf="modifyOrderInput.adjustOrderLines?.length">\n                            {{\n                                \'order.modification-adjusting-lines\'\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\n                            }}\n                        </li>\n                        <li *ngIf="modifyOrderInput.surcharges?.length">\n                            {{\n                                \'order.modification-adding-surcharges\'\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\n                            }}\n                        </li>\n                        <li *ngIf="shippingAddressForm.dirty">\n                            {{ \'order.modification-updating-shipping-address\' | translate }}\n                        </li>\n                        <li *ngIf="billingAddressForm.dirty">\n                            {{ \'order.modification-updating-billing-address\' | translate }}\n                        </li>\n                    </ul>\n                </div>\n                <div class="card-block">\n                    <label class="clr-control-label">{{ \'order.note\' | translate }}</label>\n                    <textarea [(ngModel)]="note" name="note" clrTextarea required></textarea>\n                    <clr-checkbox-wrapper class="">\n                        <input type="checkbox" clrCheckbox [(ngModel)]="recalculateShipping" />\n                        <label>{{ \'order.modification-recalculate-shipping\' | translate }}</label>\n                    </clr-checkbox-wrapper>\n                </div>\n                <div class="card-footer">\n                    <button\n                        class="btn btn-primary"\n                        [disabled]="!canPreviewChanges()"\n                        (click)="previewAndModify(order)"\n                    >\n                        {{ \'order.preview-changes\' | translate }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".order-table .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.order-table .sub-total td,.order-table .total td{border-top:1px dashed var(--color-component-border-200)}.order-table .total td{font-weight:700}.order-table td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}.order-table .order-line-custom-fields{display:flex;flex-wrap:wrap}.order-table .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-right:18px}.order-table .order-line-custom-field{background-color:var(--color-component-bg-100)}.order-table .net-price,.order-table .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}.order-table .net-price{font-size:11px}.order-table .promotions-label{-webkit-text-decoration:underline dotted var(--color-text-200);text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}.order-table tr.modified td{background-color:var(--color-warning-100)}"]}]}],R.ctorParameters=function(){return[{type:a.Router},{type:a.ActivatedRoute},{type:r.ServerConfigService},{type:t.ChangeDetectorRef},{type:r.DataService},{type:r.NotificationService},{type:r.ModalService},{type:F}]};var L=function(){function e(){this.addNote=new t.EventEmitter,this.updateNote=new t.EventEmitter,this.deleteNote=new t.EventEmitter,this.note="",this.noteIsPrivate=!0,this.expanded=!1,this.type=r.HistoryEntryType}return e.prototype.getDisplayType=function(e){if(e.type===r.HistoryEntryType.ORDER_STATE_TRANSITION){if("Delivered"===e.data.to)return"success";if("Cancelled"===e.data.to)return"error"}return e.type===r.HistoryEntryType.ORDER_FULFILLMENT_TRANSITION&&"Delivered"===e.data.to?"success":e.type!==r.HistoryEntryType.ORDER_PAYMENT_TRANSITION||"Declined"!==e.data.to&&"Cancelled"!==e.data.to?e.type===r.HistoryEntryType.ORDER_CANCELLATION?"error":e.type===r.HistoryEntryType.ORDER_REFUND_TRANSITION?"warning":"default":"error"},e.prototype.getTimelineIcon=function(e){if(e.type===r.HistoryEntryType.ORDER_STATE_TRANSITION){if("Delivered"===e.data.to)return["success-standard","is-solid"];if("Cancelled"===e.data.to)return"ban"}if(e.type===r.HistoryEntryType.ORDER_PAYMENT_TRANSITION&&"Settled"===e.data.to)return"credit-card";if(e.type===r.HistoryEntryType.ORDER_NOTE)return"note";if(e.type===r.HistoryEntryType.ORDER_MODIFIED)return"pencil";if(e.type===r.HistoryEntryType.ORDER_FULFILLMENT_TRANSITION){if("Shipped"===e.data.to)return"truck";if("Delivered"===e.data.to)return"truck"}},e.prototype.isFeatured=function(e){switch(e.type){case r.HistoryEntryType.ORDER_STATE_TRANSITION:return"Delivered"===e.data.to||"Cancelled"===e.data.to||"Settled"===e.data.to;case r.HistoryEntryType.ORDER_PAYMENT_TRANSITION:return"Settled"===e.data.to||"Cancelled"===e.data.to;case r.HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:return"Delivered"===e.data.to||"Shipped"===e.data.to;case r.HistoryEntryType.ORDER_NOTE:case r.HistoryEntryType.ORDER_MODIFIED:return!0;default:return!1}},e.prototype.getFulfillment=function(e){if((e.type===r.HistoryEntryType.ORDER_FULFILLMENT||e.type===r.HistoryEntryType.ORDER_FULFILLMENT_TRANSITION)&&this.order.fulfillments)return this.order.fulfillments.find((function(t){return t.id===e.data.fulfillmentId}))},e.prototype.getPayment=function(e){if(e.type===r.HistoryEntryType.ORDER_PAYMENT_TRANSITION&&this.order.payments)return this.order.payments.find((function(t){return t.id===e.data.paymentId}))},e.prototype.getCancelledItems=function(e){var t,n,r,i,o=new Map,a=e.data.orderItemIds;try{for(var l=m(this.order.lines),d=l.next();!d.done;d=l.next()){var s=d.value;try{for(var c=(r=void 0,m(s.items)),u=c.next();!u.done;u=c.next()){var p=u.value;if(a.includes(p.id)){var y=o.get(s.productVariant.name);null!=y?o.set(s.productVariant.name,y+1):o.set(s.productVariant.name,1)}}}catch(e){r={error:e}}finally{try{u&&!u.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{d&&!d.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}return Array.from(o.entries()).map((function(e){var t=f(e,2);return{name:t[0],quantity:t[1]}}))},e.prototype.getModification=function(e){return this.order.modifications.find((function(t){return t.id===e}))},e.prototype.getName=function(e){var t=e.administrator;if(t)return t.firstName+" "+t.lastName;var n=this.order.customer;return n?n.firstName+" "+n.lastName:""},e.prototype.addNoteToOrder=function(){this.addNote.emit({note:this.note,isPublic:!this.noteIsPrivate}),this.note="",this.noteIsPrivate=!0},e}();L.decorators=[{type:t.Component,args:[{selector:"vdr-order-history",template:'<h4>{{ \'order.order-history\' | translate }}</h4>\n<div class="entry-list" [class.expanded]="expanded">\n    <vdr-timeline-entry iconShape="note" displayType="muted" [featured]="true">\n        <div class="note-entry">\n            <textarea [(ngModel)]="note" name="note" class="note"></textarea>\n            <button class="btn btn-secondary" [disabled]="!note" (click)="addNoteToOrder()">\n                {{ \'common.add-note\' | translate }}\n            </button>\n        </div>\n        <div class="visibility-select">\n            <clr-checkbox-wrapper>\n                <input type="checkbox" clrCheckbox [(ngModel)]="noteIsPrivate" />\n                <label>{{ \'order.note-is-private\' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <span *ngIf="noteIsPrivate" class="private">\n                {{ \'order.note-only-visible-to-administrators\' | translate }}\n            </span>\n            <span *ngIf="!noteIsPrivate" class="public">\n                {{ \'order.note-visible-to-customer\' | translate }}\n            </span>\n        </div>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry\n        *ngFor="let entry of history"\n        [displayType]="getDisplayType(entry)"\n        [iconShape]="getTimelineIcon(entry)"\n        [createdAt]="entry.createdAt"\n        [name]="getName(entry)"\n        [featured]="isFeatured(entry)"\n        [collapsed]="!expanded && !isFeatured(entry)"\n        (expandClick)="expanded = !expanded"\n    >\n        <ng-container [ngSwitch]="entry.type">\n            <ng-container *ngSwitchCase="type.ORDER_STATE_TRANSITION">\n                <div class="title" *ngIf="entry.data.to === \'Delivered\'">\n                    {{ \'order.history-order-fulfilled\' | translate }}\n                </div>\n                <div class="title" *ngIf="entry.data.to === \'Cancelled\'">\n                    {{ \'order.history-order-cancelled\' | translate }}\n                </div>\n                <ng-template [ngIf]="entry.data.to !== \'Cancelled\' && entry.data.to !== \'Delivered\'">\n                    {{\n                        \'order.history-order-transition\'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_MODIFIED">\n                <div class="title">\n                    {{ \'order.history-order-modified\' | translate }}\n                </div>\n                <ng-container *ngIf="getModification(entry.data.modificationId) as modification">\n                    {{ \'order.modify-order-price-difference\' | translate }}:\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\n                    <vdr-chip colorType="success" *ngIf="modification.isSettled">{{\n                        \'order.modification-settled\' | translate\n                    }}</vdr-chip>\n                    <vdr-chip colorType="error" *ngIf="!modification.isSettled">{{\n                        \'order.modification-not-settled\' | translate\n                    }}</vdr-chip>\n                    <vdr-history-entry-detail>\n                        <vdr-modification-detail\n                            [order]="order"\n                            [modification]="modification"\n                        ></vdr-modification-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_PAYMENT_TRANSITION">\n                <ng-container *ngIf="entry.data.to === \'Settled\'; else regularPaymentTransition">\n                    <div class="title">\n                        {{ \'order.history-payment-settled\' | translate }}\n                    </div>\n                    {{ \'order.transaction-id\' | translate }}: {{ getPayment(entry)?.transactionId }}\n                    <vdr-history-entry-detail *ngIf="getPayment(entry) as payment">\n                        <vdr-payment-detail\n                            [payment]="payment"\n                            [currencyCode]="order.currencyCode"\n                        ></vdr-payment-detail>\n                    </vdr-history-entry-detail>\n                </ng-container>\n                <ng-template #regularPaymentTransition>\n                    {{\n                        \'order.history-payment-transition\'\n                            | translate\n                                : {\n                                      from: entry.data.from,\n                                      to: entry.data.to,\n                                      id: getPayment(entry)?.transactionId\n                                  }\n                    }}\n                </ng-template>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_REFUND_TRANSITION">\n                {{\n                    \'order.history-refund-transition\'\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\n                }}\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_CANCELLATION">\n                {{ \'order.history-items-cancelled\' | translate: { count: entry.data.orderItemIds.length } }}\n                <vdr-history-entry-detail *ngIf="getCancelledItems(entry) as items">\n                    <vdr-labeled-data [label]="\'order.cancellation-reason\' | translate">\n                        {{ entry.data.reason }}\n                    </vdr-labeled-data>\n                    <vdr-labeled-data [label]="\'order.contents\' | translate">\n                        <vdr-simple-item-list [items]="items"></vdr-simple-item-list>\n                    </vdr-labeled-data>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_FULFILLMENT">\n                {{ \'order.history-fulfillment-created\' | translate }}\n                <vdr-history-entry-detail *ngIf="getFulfillment(entry) as fulfillment">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]="fulfillment.id"\n                        [order]="order"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_FULFILLMENT_TRANSITION">\n                <ng-container *ngIf="entry.data.to === \'Delivered\'">\n                    <div class="title">\n                        {{ \'order.history-fulfillment-delivered\' | translate }}\n                    </div>\n                    {{ \'order.tracking-code\' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf="entry.data.to === \'Shipped\'">\n                    <div class="title">\n                        {{ \'order.history-fulfillment-shipped\' | translate }}\n                    </div>\n                    {{ \'order.tracking-code\' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\n                </ng-container>\n                <ng-container *ngIf="entry.data.to !== \'Delivered\' && entry.data.to !== \'Shipped\'">\n                    {{\n                        \'order.history-fulfillment-transition\'\n                            | translate: { from: entry.data.from, to: entry.data.to }\n                    }}\n                </ng-container>\n                <vdr-history-entry-detail *ngIf="getFulfillment(entry) as fulfillment">\n                    <vdr-fulfillment-detail\n                        [fulfillmentId]="fulfillment.id"\n                        [order]="order"\n                    ></vdr-fulfillment-detail>\n                </vdr-history-entry-detail>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_NOTE">\n                <div class="flex">\n                    <div class="note-text">\n                        <span *ngIf="entry.isPublic" class="note-visibility public">{{\n                            \'common.public\' | translate\n                        }}</span>\n                        <span *ngIf="!entry.isPublic" class="note-visibility private">{{\n                            \'common.private\' | translate\n                        }}</span>\n                        {{ entry.data.note }}\n                    </div>\n                    <div class="flex-spacer"></div>\n                    <vdr-dropdown>\n                        <button class="icon-button" vdrDropdownTrigger>\n                            <clr-icon shape="ellipsis-vertical"></clr-icon>\n                        </button>\n                        <vdr-dropdown-menu vdrPosition="bottom-right">\n                            <button\n                                class="button"\n                                vdrDropdownItem\n                                (click)="updateNote.emit(entry)"\n                                [disabled]="!(\'UpdateOrder\' | hasPermission)"\n                            >\n                                <clr-icon shape="edit"></clr-icon>\n                                {{ \'common.edit\' | translate }}\n                            </button>\n                            <div class="dropdown-divider"></div>\n                            <button\n                                class="button"\n                                vdrDropdownItem\n                                (click)="deleteNote.emit(entry)"\n                                [disabled]="!(\'UpdateOrder\' | hasPermission)"\n                            >\n                                <clr-icon shape="trash" class="is-danger"></clr-icon>\n                                {{ \'common.delete\' | translate }}\n                            </button>\n                        </vdr-dropdown-menu>\n                    </vdr-dropdown>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_COUPON_APPLIED">\n                {{ \'order.history-coupon-code-applied\' | translate }}:\n                <vdr-chip>\n                    <a [routerLink]="[\'/marketing\', \'promotions\', entry.data.promotionId]">{{\n                        entry.data.couponCode\n                    }}</a>\n                </vdr-chip>\n            </ng-container>\n            <ng-container *ngSwitchCase="type.ORDER_COUPON_REMOVED">\n                {{ \'order.history-coupon-code-removed\' | translate }}:\n                <vdr-chip\n                    ><span class="cancelled-coupon-code">{{ entry.data.couponCode }}</span></vdr-chip\n                >\n            </ng-container>\n        </ng-container>\n    </vdr-timeline-entry>\n    <vdr-timeline-entry [isLast]="true" [createdAt]="order.createdAt" [featured]="true">\n        <div class="title">\n            {{ \'order.history-order-created\' | translate }}\n        </div>\n    </vdr-timeline-entry>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{margin-top:48px;display:block}.entry-list{margin-top:24px;margin-left:24px;margin-right:12px}.note-entry{display:flex;align-items:center}.note-entry .note{flex:1}.note-entry button{margin:0}.visibility-select{display:flex;justify-content:space-between;align-items:baseline}.visibility-select .public{color:var(--color-warning-500)}.visibility-select .private{color:var(--color-success-500)}textarea.note{flex:1;height:36px;border-radius:3px;margin-right:6px}.note-text{color:var(--color-grey-800);white-space:pre-wrap}.cancelled-coupon-code{text-decoration:line-through}.note-visibility{text-transform:lowercase}.note-visibility.public{color:var(--color-warning-500)}.note-visibility.private{color:var(--color-success-500)}"]}]}],L.propDecorators={order:[{type:t.Input}],history:[{type:t.Input}],addNote:[{type:t.Output}],updateNote:[{type:t.Output}],deleteNote:[{type:t.Output}]};var M=function(e){function t(t,r,o,a,l){var d=e.call(this,a,l)||this;d.serverConfigService=t,d.dataService=r,d.localStorageService=o,d.searchOrderCodeControl=new n.FormControl(""),d.searchLastNameControl=new n.FormControl(""),d.orderStates=d.serverConfigService.getOrderProcessStates().map((function(e){return e.name})),d.filterPresets=[{name:"open",label:i.marker("order.filter-preset-open"),config:{active:!1,states:d.orderStates.filter((function(e){return"Delivered"!==e&&"Cancelled"!==e&&"Shipped"!==e}))}},{name:"shipped",label:i.marker("order.filter-preset-shipped"),config:{active:!1,states:["Shipped"]}},{name:"completed",label:i.marker("order.filter-preset-completed"),config:{active:!1,states:["Delivered","Cancelled"]}},{name:"active",label:i.marker("order.filter-preset-active"),config:{active:!0}}],e.prototype.setQueryFn.call(d,(function(e,t){return d.dataService.order.getOrders({take:e,skip:t}).refetchOnChannelChange()}),(function(e){return e.orders}),(function(e,t){return d.createQueryOptions(e,t,d.searchOrderCodeControl.value,d.searchLastNameControl.value,d.route.snapshot.queryParamMap.get("filter")||"open")}));var s=d.localStorageService.get("orderListLastCustomFilters");return s&&d.setQueryParam(s,{replaceUrl:!0}),d}return p(t,e),t.prototype.ngOnInit=function(){var t,r=this;e.prototype.ngOnInit.call(this),this.activePreset$=this.route.queryParamMap.pipe(s.map((function(e){return e.get("filter")||"open"})),s.distinctUntilChanged());var i=d.merge(this.searchOrderCodeControl.valueChanges,this.searchLastNameControl.valueChanges).pipe(s.filter((function(e){return 2<e.length||0===e.length})),s.debounceTime(250));d.merge(i,this.route.queryParamMap).pipe(s.takeUntil(this.destroy$)).subscribe((function(e){r.refresh()}));var o=this.route.snapshot.queryParamMap;this.customFilterForm=new n.FormGroup({states:new n.FormControl(null!==(t=o.getAll("states"))&&void 0!==t?t:[]),placedAtStart:new n.FormControl(o.get("placedAtStart")),placedAtEnd:new n.FormControl(o.get("placedAtEnd"))})},t.prototype.selectFilterPreset=function(e){var t,n=null!==(t=this.localStorageService.get("orderListLastCustomFilters"))&&void 0!==t?t:{},r="custom"===e?n:{states:void 0,placedAtStart:void 0,placedAtEnd:void 0};this.setQueryParam(Object.assign({filter:e,page:1},r),{replaceUrl:!0})},t.prototype.applyCustomFilters=function(){var e=this.customFilterForm.value,t={states:e.states,placedAtStart:e.placedAtStart,placedAtEnd:e.placedAtEnd};this.setQueryParam(Object.assign({filter:"custom"},t)),this.customFilterForm.markAsPristine(),this.localStorageService.set("orderListLastCustomFilters",t)},t.prototype.createQueryOptions=function(e,t,n,i,o){var a,l=this.filterPresets.find((function(e){return e.name===o})),d={};if(l)null!=l.config.active&&(d.active={eq:l.config.active}),l.config.states&&(d.state={in:l.config.states});else if("custom"===o){var s=this.route.snapshot.queryParamMap,c=null!==(a=s.getAll("states"))&&void 0!==a?a:[],u=s.get("placedAtStart"),p=s.get("placedAtEnd");c.length&&(d.state={in:c}),u&&p?d.orderPlacedAt={between:{start:u,end:p}}:u?d.orderPlacedAt={after:u}:p&&(d.orderPlacedAt={before:p})}return i&&(d.customerLastName={contains:i}),n&&(d.code={contains:n}),{options:{skip:e,take:t,filter:Object.assign({},null!=d?d:{}),sort:{updatedAt:r.SortOrder.DESC}}}},t.prototype.getShippingNames=function(e){return e.shippingLines.length?e.shippingLines.map((function(e){return e.shippingMethod.name})).join(", "):""},t}(r.BaseListComponent);M.decorators=[{type:t.Component,args:[{selector:"vdr-order-list",template:'<vdr-action-bar>\n    <vdr-ab-left>\n        <div class="search-form">\n            <div class="btn-group btn-outline-primary" *ngIf="activePreset$ | async as activePreset">\n                <button\n                    class="btn"\n                    *ngFor="let preset of filterPresets"\n                    [class.btn-primary]="activePreset === preset.name"\n                    (click)="selectFilterPreset(preset.name)"\n                >\n                    {{ preset.label | translate }}\n                </button>\n                <button\n                    class="btn"\n                    [class.btn-primary]="activePreset === \'custom\'"\n                    (click)="selectFilterPreset(\'custom\')"\n                >\n                    {{ \'order.filter-custom\' | translate }}\n                    <clr-icon shape="angle down"></clr-icon>\n                </button>\n            </div>\n\n            <input\n                type="text"\n                name="searchTerm"\n                [formControl]="searchOrderCodeControl"\n                [placeholder]="\'order.search-by-order-code\' | translate"\n                class="search-input"\n            />\n            <input\n                type="text"\n                name="searchTerm"\n                [formControl]="searchLastNameControl"\n                [placeholder]="\'order.search-by-customer-last-name\' | translate"\n                class="search-input"\n            />\n        </div>\n        <div class="custom-filters" [class.expanded]="(activePreset$ | async) === \'custom\'">\n            <form [formGroup]="customFilterForm">\n                <div class="flex align-center">\n                    <ng-select\n                        [items]="orderStates"\n                        appendTo="body"\n                        [addTag]="false"\n                        [multiple]="true"\n                        formControlName="states"\n                        [placeholder]="\'state.all-orders\' | translate"\n                        [clearable]="true"\n                        [searchable]="false"\n                    >\n                        <ng-template ng-option-tmp let-item="item">{{ item | stateI18nToken | translate }}</ng-template>\n                        <ng-template ng-label-tmp let-item="item" let-clear="clear">\n                            <span class="ng-value-label"> {{ item | stateI18nToken | translate }}</span>\n                            <span class="ng-value-icon right" (click)="clear(item)" aria-hidden="true">×</span>\n                        </ng-template>\n                    </ng-select>\n                    <button\n                        class="btn btn-secondary"\n                        [disabled]="customFilterForm.pristine"\n                        (click)="applyCustomFilters()"\n                    >\n                        {{ \'order.apply-filters\' | translate }}\n                        <clr-icon shape="filter"></clr-icon>\n                    </button>\n                </div>\n                <div class="flex">\n                    <div>\n                        <label>{{ \'order.placed-at-start\' | translate }}</label>\n                        <vdr-datetime-picker formControlName="placedAtStart"></vdr-datetime-picker>\n                    </div>\n                    <div>\n                        <label>{{ \'order.placed-at-end\' | translate }}</label>\n                        <vdr-datetime-picker formControlName="placedAtEnd"></vdr-datetime-picker>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId="order-list"></vdr-action-bar-items>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]="items$ | async"\n    [itemsPerPage]="itemsPerPage$ | async"\n    [totalItems]="totalItems$ | async"\n    [currentPage]="currentPage$ | async"\n    (pageChange)="setPageNumber($event)"\n    (itemsPerPageChange)="setItemsPerPage($event)"\n>\n    <vdr-dt-column>{{ \'common.code\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'order.customer\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'order.state\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'order.total\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'common.updated-at\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'order.placed-at\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'order.shipping\' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-order="item">\n        <td class="left align-middle">{{ order.code }}</td>\n        <td class="left align-middle">\n            <vdr-customer-label [customer]="order.customer"></vdr-customer-label>\n        </td>\n        <td class="left align-middle">\n            <vdr-order-state-label [state]="order.state"></vdr-order-state-label>\n        </td>\n        <td class="left align-middle">{{ order.total | localeCurrency: order.currencyCode }}</td>\n        <td class="left align-middle">{{ order.updatedAt | timeAgo }}</td>\n        <td class="left align-middle">{{ order.orderPlacedAt | localeDate: \'medium\' }}</td>\n        <td class="left align-middle">{{ getShippingNames(order) }}</td>\n        <td class="right align-middle">\n            <vdr-table-row-action\n                iconShape="shopping-cart"\n                [label]="\'common.open\' | translate"\n                [linkTo]="order.state === \'Modifying\' ? [\'./\', order.id, \'modify\'] : [\'./\', order.id]"\n            ></vdr-table-row-action>\n        </td>\n    </ng-template>\n</vdr-data-table>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".search-form{display:flex;flex-direction:column;align-items:baseline;width:100%;margin-bottom:6px}@media screen and (min-width:768px){.search-form{flex-direction:row}}.search-input{margin-left:6px;margin-top:6px;min-width:300px}.custom-filters{overflow:hidden;max-height:0;padding-bottom:6px}.custom-filters.expanded{max-height:none}.custom-filters>form{display:flex;flex-direction:column;align-items:center}.custom-filters>form>div{width:100%}ng-select{flex:1;min-width:200px}ng-select,ng-select ::ng-deep .ng-select-container{height:36px}"]}]}],M.ctorParameters=function(){return[{type:r.ServerConfigService},{type:r.DataService},{type:r.LocalStorageService},{type:a.Router},{type:a.ActivatedRoute}]};var N=function(){function e(){this.settlePayment=new t.EventEmitter,this.transitionPaymentState=new t.EventEmitter,this.settleRefund=new t.EventEmitter}return e.prototype.refundHasMetadata=function(e){return!!e&&Object.keys(e.metadata).length>0},e.prototype.nextOtherStates=function(){return this.payment?this.payment.nextStates.filter((function(e){return"Settled"!==e})):[]},e}();N.decorators=[{type:t.Component,args:[{selector:"vdr-order-payment-card",template:'<div class="card">\n    <div class="card-header payment-header">\n        <div>\n            {{ \'order.payment\' | translate }}\n            <ng-container *ngIf="payment.transactionId">#{{ payment.transactionId }}</ng-container>\n        </div>\n        <div class="payment-state">\n            <vdr-payment-state-label [state]="payment.state"></vdr-payment-state-label>\n        </div>\n    </div>\n    <div class="card-block">\n        <vdr-payment-detail [payment]="payment" [currencyCode]="currencyCode"></vdr-payment-detail>\n    </div>\n    <ng-container *ngFor="let refund of payment.refunds">\n        <div class="card-header payment-header">\n            <clr-icon shape="redo" class="refund-icon" dir="down"></clr-icon>\n            {{ \'order.refund\' | translate }} #{{ refund.id }}\n            <div class="clr-flex-fill"></div>\n            <vdr-refund-state-label [state]="refund.state"></vdr-refund-state-label>\n        </div>\n        <div class="card-block">\n            <vdr-labeled-data [label]="\'common.created-at\' | translate">\n                {{ refund.createdAt | localeDate: \'medium\' }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]="\'order.refund-total\' | translate">\n                {{ refund.total | localeCurrency: currencyCode }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]="\'order.transaction-id\' | translate" *ngIf="refund.transactionId">\n                {{ refund.transactionId }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]="\'order.refund-reason\' | translate" *ngIf="refund.reason">\n                {{ refund.reason }}\n            </vdr-labeled-data>\n            <vdr-labeled-data [label]="\'order.refund-metadata\' | translate" *ngIf="refundHasMetadata(refund)">\n                <vdr-object-tree [value]="refund.metadata"></vdr-object-tree>\n            </vdr-labeled-data>\n        </div>\n        <div class="card-footer" *ngIf="refund.state === \'Pending\'">\n            <button class="btn btn-sm btn-primary" (click)="settleRefund.emit(refund)">\n                {{ \'order.settle-refund\' | translate }}\n            </button>\n        </div>\n    </ng-container>\n    <div class="card-footer" *ngIf="payment.nextStates.length">\n        <button\n            class="btn btn-sm btn-primary"\n            *ngIf="payment.nextStates.includes(\'Settled\')"\n            (click)="settlePayment.emit(payment)"\n        >\n            {{ \'order.settle-payment\' | translate }}\n        </button>\n        <vdr-dropdown>\n            <button class="icon-button" vdrDropdownTrigger>\n                <clr-icon shape="ellipsis-vertical"></clr-icon>\n            </button>\n            <vdr-dropdown-menu vdrPosition="bottom-right">\n                <ng-container *ngFor="let nextState of nextOtherStates()">\n                    <button\n                        type="button"\n                        class="btn"\n                        vdrDropdownItem\n                        (click)="transitionPaymentState.emit({ payment: payment, state: nextState })"\n                    >\n                        <ng-container *ngIf="nextState !== \'Cancelled\'; else cancel">\n                            <clr-icon shape="step-forward-2"></clr-icon>\n                            {{\n                                \'order.transition-to-state\'\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\n                            }}\n                        </ng-container>\n                        <ng-template #cancel>\n                            <clr-icon shape="error-standard" class="is-error"></clr-icon>\n                            {{ \'order.cancel-payment\' | translate }}\n                        </ng-template>\n                    </button>\n                </ng-container>\n            </vdr-dropdown-menu>\n        </vdr-dropdown>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".payment-header{display:flex;justify-content:space-between;align-items:center}.refund-icon{margin-right:6px;color:var(--color-grey-400)}.card-footer{display:flex;align-items:center;justify-content:flex-end}"]}]}],N.propDecorators={payment:[{type:t.Input}],currencyCode:[{type:t.Input}],settlePayment:[{type:t.Output}],transitionPaymentState:[{type:t.Output}],settleRefund:[{type:t.Output}]};var j=function(){function e(){}return e.prototype.ngOnInit=function(){var e=this;this.active$=this.from.active$.asObservable().pipe(s.tap((function(t){return e.to.activeTarget$.next(t)})))},e.prototype.getStyle=function(){var e=this.from.index<this.to.index?"down":"up",t=this.from.getPos("down"===e?"bottom":"top"),n=this.to.getPos("down"===e?"top":"bottom"),r=Math.abs(t.x-n.x),i=Math.abs(t.y-n.y),o=Math.sqrt(Math.pow(r,2)+Math.pow(i,2));return Object.assign({"top.px":t.y,"left.px":t.x+("down"===e?10:40)+12*this.index,"height.px":o,"width.px":1},"up"===e?{transform:"rotateZ(180deg)","transform-origin":"top"}:{})},e}();j.decorators=[{type:t.Component,args:[{selector:"vdr-order-process-edge",template:'<div\n    [attr.data-from]="from.node.name"\n    [attr.data-to]="to.node.name"\n    [ngStyle]="getStyle()"\n    [class.active]="active$ | async"\n    class="edge">\n    <clr-icon shape="arrow" flip="vertical" class="arrow"></clr-icon>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".edge{position:absolute;border:1px solid var(--color-component-border-200);background-color:var(--color-component-bg-300);opacity:.3;transition:border .2s,opacity .2s,background-color .2s}.edge.active{border-color:var(--color-primary-500);background-color:var(--color-primary-500);opacity:1}.edge.active .arrow{color:var(--color-primary-500)}.edge .arrow{position:absolute;bottom:-4px;left:-8px;color:var(--color-grey-300)}"]}]}],j.propDecorators={from:[{type:t.Input}],to:[{type:t.Input}],index:[{type:t.Input}]};var q=function(){function e(e){this.elementRef=e,this.active$=new d.BehaviorSubject(!1),this.activeTarget$=new d.BehaviorSubject(!1),this.isCancellable=!1,this.cancelledState="Cancelled"}return e.prototype.ngOnChanges=function(e){this.isCancellable=!!this.node.to.find((function(e){return"Cancelled"===e.name})),e.active&&this.active$.next(this.active)},e.prototype.getPos=function(e){var t,n;void 0===e&&(e="top");this.elementRef.nativeElement.getBoundingClientRect();var r=null!==(n=null===(t=this.elementRef.nativeElement.querySelector(".node"))||void 0===t?void 0:t.getBoundingClientRect().height)&&void 0!==n?n:0;return{x:10,y:72*this.index+("bottom"===e?r:0)}},e.prototype.getStyle=function(){var e=this.getPos();return{"top.px":e.y,"left.px":e.x}},e}();q.decorators=[{type:t.Component,args:[{selector:"vdr-order-process-node",template:'<div class="node-wrapper" [ngStyle]="getStyle()" [class.active]="active$ | async">\n    <div\n        class="node"\n        [class.active-target]="activeTarget$ | async"\n    >\n        {{ node.name | stateI18nToken | translate }}\n    </div>\n    <div class="cancelled-wrapper" *ngIf="isCancellable">\n        <div class="cancelled-edge">\n        </div>\n        <clr-icon shape="dot-circle"></clr-icon>\n        <div class="cancelled-node">\n            {{ cancelledState | stateI18nToken | translate }}\n        </div>\n    </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{display:block}.node-wrapper{position:absolute;z-index:1;display:flex;align-items:center}.node{display:inline-block;border:2px solid var(--color-component-border-200);border-radius:3px;padding:3px 6px;z-index:1;background-color:var(--color-component-bg-100);opacity:.7;transition:opacity .2s,background-color .2s,color .2s;cursor:default}.node.active-target{border-color:var(--color-primary-500);opacity:.9}.cancelled-wrapper{display:flex;align-items:center;color:var(--color-grey-300);transition:color .2s,opacity .2s;opacity:.7}.cancelled-edge{width:48px;height:2px;background-color:var(--color-component-bg-300);transition:background-color .2s}clr-icon{margin-left:-1px}.cancelled-node{margin-left:6px}.active .cancelled-wrapper{opacity:1}.active .node{opacity:1;background-color:var(--color-primary-600);border-color:var(--color-primary-600);color:var(--color-primary-100)}.active .cancelled-wrapper{color:var(--color-error-500)}.active .cancelled-edge{background-color:var(--color-error-500)}"]}]}],q.ctorParameters=function(){return[{type:t.ElementRef}]},q.propDecorators={node:[{type:t.Input}],index:[{type:t.Input}],active:[{type:t.Input}]};var _=function(){function e(e){this.changeDetector=e,this.setActiveState$=new d.BehaviorSubject(void 0),this.nodes=[],this.edges=[]}return Object.defineProperty(e.prototype,"outerHeight",{get:function(){return 72*this.nodes.length},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){this.setActiveState$.next(this.initialState),this.activeState$=this.setActiveState$.pipe(s.debounceTime(150))},e.prototype.ngOnChanges=function(e){this.populateNodes()},e.prototype.ngAfterViewInit=function(){var e=this;setTimeout((function(){return e.populateEdges()}))},e.prototype.onMouseOver=function(e){this.setActiveState$.next(e)},e.prototype.onMouseOut=function(){this.setActiveState$.next(this.initialState)},e.prototype.getNodeFor=function(e){if(this.nodeComponents)return this.nodeComponents.find((function(t){return t.node.name===e}))},e.prototype.populateNodes=function(){var e,t,n,r,i,o,a=new Map;try{for(var l=m(this.states),d=l.next();!d.done;d=l.next()){var s=d.value;a.set(s.name,{name:s.name,to:[]})}}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}var c=function(e,t){var n,r,l=null!==(o=null===(i=u.states.find((function(t){return t.name===e})))||void 0===i?void 0:i.to)&&void 0!==o?o:[];try{for(var d=(n=void 0,m(l)),s=d.next();!s.done;s=d.next()){var c=s.value,p=a.get(c);p&&t.to.push(p)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}},u=this;try{for(var p=m(a.entries()),g=p.next();!g.done;g=p.next()){var v=f(g.value,2);c(v[0],v[1])}}catch(e){n={error:e}}finally{try{g&&!g.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}this.nodes=y(a.values()).filter((function(e){return"Cancelled"!==e.name}))},e.prototype.populateEdges=function(){var e,t,n,r;try{for(var i=m(this.nodes),o=i.next();!o.done;o=i.next()){var a=o.value,l=this.getNodeFor(a.name),d=0;try{for(var s=(n=void 0,m(a.to)),c=s.next();!c.done;c=s.next()){var u=c.value,p=this.getNodeFor(u.name);l&&p&&l!==p&&(this.edges.push({to:p,from:l,index:d}),d++)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}this.edges=y(this.edges),this.changeDetector.markForCheck()},e}();_.decorators=[{type:t.Component,args:[{selector:"vdr-order-process-graph",template:'<ng-container *ngFor="let state of nodes; let i = index">\n    <vdr-order-process-node\n        [node]="state"\n        [index]="i"\n        [active]="(activeState$ | async) === state.name"\n        (mouseenter)="onMouseOver(state.name)"\n        (mouseleave)="onMouseOut()"\n    ></vdr-order-process-node>\n</ng-container>\n<ng-container *ngFor="let edge of edges">\n    <vdr-order-process-edge [from]="edge.from" [to]="edge.to" [index]="edge.index"></vdr-order-process-edge>\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{display:block;border:1px #ff69b4;margin:20px;padding:12px;position:relative}.state-row{display:flex}"]}]}],_.ctorParameters=function(){return[{type:t.ChangeDetectorRef}]},_.propDecorators={states:[{type:t.Input}],initialState:[{type:t.Input}],nodeComponents:[{type:t.ViewChildren,args:[q]}],outerHeight:[{type:t.HostBinding,args:["style.height.px"]}]};var V=function(){function e(){this.orderLineCustomFieldsVisible=!1}return Object.defineProperty(e.prototype,"visibleOrderLineCustomFields",{get:function(){return this.orderLineCustomFieldsVisible?this.orderLineCustomFields:[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"showElided",{get:function(){return!this.orderLineCustomFieldsVisible&&0<this.orderLineCustomFields.length},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){this.orderLineCustomFieldsVisible=this.orderLineCustomFields.length<2},e.prototype.toggleOrderLineCustomFields=function(){this.orderLineCustomFieldsVisible=!this.orderLineCustomFieldsVisible},e.prototype.getLineDiscounts=function(e){return e.discounts.filter((function(e){return e.type===r.AdjustmentType.PROMOTION}))},e.prototype.getLineCustomFields=function(e){var t=this;return this.orderLineCustomFields.map((function(t){return{config:t,value:e.customFields[t.name]}})).filter((function(e){return!!t.orderLineCustomFieldsVisible||null!=e.value}))},e.prototype.getPromotionLink=function(e){return["/marketing","promotions",e.adjustmentSource.split(":")[1]]},e.prototype.getCouponCodeForAdjustment=function(e,t){var n=t.adjustmentSource.split(":")[1],r=e.promotions.find((function(e){return e.id===n}));if(r)return r.couponCode||void 0},e}();V.decorators=[{type:t.Component,args:[{selector:"vdr-order-table",template:'<table class="order-table table">\n    <thead>\n        <tr>\n            <th></th>\n            <th>{{ \'order.product-name\' | translate }}</th>\n            <th>{{ \'order.product-sku\' | translate }}</th>\n            <th>{{ \'order.unit-price\' | translate }}</th>\n            <th>{{ \'order.quantity\' | translate }}</th>\n            <th>{{ \'order.total\' | translate }}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <ng-container *ngFor="let line of order.lines">\n            <tr class="order-line" [class.is-cancelled]="line.quantity === 0">\n                <td class="align-middle thumb">\n                    <img *ngIf="line.featuredAsset" [src]="line.featuredAsset | assetPreview: \'tiny\'" />\n                </td>\n                <td class="align-middle name">{{ line.productVariant.name }}</td>\n                <td class="align-middle sku">{{ line.productVariant.sku }}</td>\n                <td class="align-middle unit-price">\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class="net-price" [title]="\'order.net-price\' | translate">\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\n                    </div>\n                </td>\n                <td class="align-middle quantity">\n                    {{ line.quantity }}\n                    <vdr-line-refunds [line]="line" [payments]="order.payments"></vdr-line-refunds>\n                    <vdr-line-fulfillment [line]="line" [orderState]="order.state"></vdr-line-fulfillment>\n                </td>\n                <td class="align-middle total">\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\n                    <div class="net-price" [title]="\'order.net-price\' | translate">\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\n                    </div>\n\n                    <ng-container *ngIf="getLineDiscounts(line) as discounts">\n                        <vdr-dropdown *ngIf="discounts.length">\n                            <div class="promotions-label" vdrDropdownTrigger>\n                                {{ \'order.promotions-applied\' | translate }}\n                            </div>\n                            <vdr-dropdown-menu>\n                                <div class="line-promotion" *ngFor="let discount of discounts">\n                                    <a class="promotion-name" [routerLink]="getPromotionLink(discount)">{{\n                                        discount.description\n                                    }}</a>\n                                    <div class="promotion-amount">\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                                        <div class="net-price" [title]="\'order.net-price\' | translate">\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </vdr-dropdown-menu>\n                        </vdr-dropdown>\n                    </ng-container>\n                </td>\n            </tr>\n            <ng-container *ngIf="getLineCustomFields(line) as customFields">\n                <tr *ngIf="customFields.length">\n                    <td colspan="6" class="custom-fields-row">\n                        <div class="order-line-custom-fields">\n                            <div class="custom-field" *ngFor="let field of customFields">\n                                <vdr-labeled-data [label]="field.config | customFieldLabel">\n                                    <div class="mt2" [ngSwitch]="field.config.type">\n                                        <ng-template [ngSwitchCase]="\'datetime\'">\n                                            <span [title]="field.value">{{ field.value }}</span>\n                                        </ng-template>\n                                        <ng-template [ngSwitchCase]="\'boolean\'">\n                                            <ng-template [ngIf]="field.value === true">\n                                                <clr-icon shape="check"></clr-icon>\n                                            </ng-template>\n                                            <ng-template [ngIf]="field.value === false">\n                                                <clr-icon shape="times"></clr-icon>\n                                            </ng-template>\n                                        </ng-template>\n                                        <ng-template ngSwitchDefault>\n                                            {{ field.value }}\n                                        </ng-template>\n                                    </div>\n                                </vdr-labeled-data>\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </ng-container>\n        </ng-container>\n        <tr class="surcharge" *ngFor="let surcharge of order.surcharges">\n            <td class="align-middle name left" colspan="2">{{ surcharge.description }}</td>\n            <td class="align-middle sku">{{ surcharge.sku }}</td>\n            <td class="align-middle" colspan="2"></td>\n            <td class="align-middle total">\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\n                <div class="net-price" [title]="\'order.net-price\' | translate">\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class="order-adjustment" *ngFor="let discount of order.discounts">\n            <td colspan="5" class="left clr-align-middle">\n                <a [routerLink]="getPromotionLink(discount)">{{ discount.description }}</a>\n                <vdr-chip *ngIf="getCouponCodeForAdjustment(order, discount) as couponCode">{{\n                    couponCode\n                }}</vdr-chip>\n            </td>\n            <td class="clr-align-middle">\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\n                <div class="net-price" [title]="\'order.net-price\' | translate">\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class="sub-total">\n            <td class="left clr-align-middle">{{ \'order.sub-total\' | translate }}</td>\n            <td colspan="4"></td>\n            <td class="clr-align-middle">\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\n                <div class="net-price" [title]="\'order.net-price\' | translate">\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class="shipping">\n            <td class="left clr-align-middle">{{ \'order.shipping\' | translate }}</td>\n            <td class="clr-align-middle">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\n            <td colspan="3"></td>\n            <td class="clr-align-middle">\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\n                <div class="net-price" [title]="\'order.net-price\' | translate">\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n        <tr class="total">\n            <td class="left clr-align-middle">{{ \'order.total\' | translate }}</td>\n            <td colspan="4"></td>\n            <td class="clr-align-middle">\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\n                <div class="net-price" [title]="\'order.net-price\' | translate">\n                    {{ order.total | localeCurrency: order.currencyCode }}\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".order-table .is-cancelled td{text-decoration:line-through;background-color:var(--color-component-bg-200)}.order-table .sub-total td,.order-table .total td{border-top:1px dashed var(--color-component-border-200)}.order-table .total td{font-weight:700}.order-table td.custom-fields-row{border-top-style:dashed;border-top-color:var(--color-grey-200)}.order-table .order-line-custom-fields{display:flex;flex-wrap:wrap}.order-table .order-line-custom-fields .custom-field{text-align:start;max-width:200px;overflow:hidden;text-overflow:ellipsis;margin-bottom:6px;margin-right:18px}.order-table .order-line-custom-field{background-color:var(--color-component-bg-100)}.order-table .net-price,.order-table .order-line-custom-field .custom-field-ellipsis{color:var(--color-text-300)}.order-table .net-price{font-size:11px}.order-table .promotions-label{-webkit-text-decoration:underline dotted var(--color-text-200);text-decoration:underline dotted var(--color-text-200);font-size:11px;margin-top:6px;cursor:pointer;text-transform:lowercase}::ng-deep .line-promotion{display:flex;justify-content:space-between;padding:6px 12px}::ng-deep .line-promotion .promotion-amount{margin-left:12px}::ng-deep .line-promotion .net-price{font-size:11px;color:var(--color-text-300)}"]}]}],V.propDecorators={order:[{type:t.Input}],orderLineCustomFields:[{type:t.Input}]};var $=function(){};$.decorators=[{type:t.Component,args:[{selector:"vdr-payment-detail",template:'<vdr-labeled-data [label]="\'order.payment-method\' | translate">\n    {{ payment.method }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]="\'order.amount\' | translate">\n    {{ payment.amount | localeCurrency: currencyCode }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf="payment.errorMessage" [label]="\'order.error-message\' | translate">\n    {{ payment.errorMessage }}\n</vdr-labeled-data>\n<vdr-labeled-data *ngIf="payment.transactionId" [label]="\'order.transaction-id\' | translate">\n    {{ payment.transactionId }}\n</vdr-labeled-data>\n<vdr-labeled-data [label]="\'order.payment-metadata\' | translate">\n    <vdr-object-tree [value]="payment.metadata"></vdr-object-tree>\n</vdr-labeled-data>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[""]}]}],$.propDecorators={payment:[{type:t.Input}],currencyCode:[{type:t.Input}]};var H=function(){function e(){}return Object.defineProperty(e.prototype,"chipColorType",{get:function(){switch(this.state){case"Authorized":return"warning";case"Settled":return"success";case"Declined":case"Cancelled":return"error"}},enumerable:!1,configurable:!0}),e}();H.decorators=[{type:t.Component,args:[{selector:"vdr-payment-state-label",template:'<vdr-chip [title]="\'order.payment-state\' | translate" [colorType]="chipColorType">\n    <clr-icon shape="check-circle" *ngIf="state === \'Settled\'"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{font-size:14px}"]}]}],H.propDecorators={state:[{type:t.Input}]};var W=function(){function e(){}return Object.defineProperty(e.prototype,"chipColorType",{get:function(){switch(this.state){case"Pending":return"warning";case"Settled":return"success";case"Failed":return"error"}},enumerable:!1,configurable:!0}),e}();W.decorators=[{type:t.Component,args:[{selector:"vdr-refund-state-label",template:'<vdr-chip [title]="\'order.payment-state\' | translate" [colorType]="chipColorType">\n    <clr-icon shape="check-circle" *ngIf="state === \'Settled\'"></clr-icon>\n    {{ state | stateI18nToken | translate }}\n</vdr-chip>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[":host{font-size:14px}"]}]}],W.propDecorators={state:[{type:t.Input}]};var Q=function(){};Q.decorators=[{type:t.Component,args:[{selector:"vdr-simple-item-list",template:'<div class="items-list">\n    <ul>\n        <li *ngFor="let item of items" [title]="item.name">\n            <div class="quantity">{{ item.quantity }}</div>\n            <clr-icon shape="times" size="12"></clr-icon>\n            {{ item.name }}\n        </li>\n    </ul>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".items-list{font-size:12px}.items-list ul{margin-top:6px;list-style-type:none;margin-left:2px}.items-list ul li{line-height:14px;text-overflow:ellipsis;overflow:hidden}.items-list .quantity{min-width:16px;display:inline-block}"]}]}],Q.propDecorators={items:[{type:t.Input}]};var U=function(e){function t(t,n){return e.call(this,t,{__typename:"Order",id:"",code:"",createdAt:"",updatedAt:"",total:0},(function(e){return n.order.getOrder(e).mapStream((function(e){return e.order}))}))||this}return p(t,e),t}(r.BaseEntityResolver);U.ɵprov=t.ɵɵdefineInjectable({factory:function(){return new U(t.ɵɵinject(a.Router),t.ɵɵinject(r.DataService))},token:U,providedIn:"root"}),U.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],U.ctorParameters=function(){return[{type:a.Router},{type:r.DataService}]};var B={breadcrumb:i.marker("breadcrumb.orders")},G={breadcrumb:Z},z={breadcrumb:J},Y=[{path:"",component:M,data:B},{path:":id",component:A,resolve:r.createResolveData(U),canDeactivate:[r.CanDeactivateDetailGuard],data:G},{path:":id/modify",component:R,resolve:r.createResolveData(U),data:z}];function Z(e,t){return r.detailBreadcrumb({entity:e.entity,id:t.id,breadcrumbKey:"breadcrumb.orders",getName:function(e){return e.code},route:""})}function J(e,t){return Z(e,t).pipe(s.map((function(e){var t=e.slice();return t[0].link[0]="../",t[1].link[0]="../orders",t.concat({label:i.marker("breadcrumb.modifying"),link:[""]})})))}var K=function(){};K.decorators=[{type:t.NgModule,args:[{imports:[r.SharedModule,a.RouterModule.forChild(Y)],declarations:[M,A,v,S,P,g,H,I,N,W,k,L,b,$,Q,O,_,q,j,T,C,h,R,V,E,x,c,w]}]}],e.AddManualPaymentDialogComponent=c,e.CancelOrderDialogComponent=g,e.FulfillOrderDialogComponent=v,e.FulfillmentCardComponent=h,e.FulfillmentDetailComponent=b,e.FulfillmentStateLabelComponent=C,e.LineFulfillmentComponent=S,e.LineRefundsComponent=I,e.ModificationDetailComponent=x,e.NODE_HEIGHT=72,e.OrderCustomFieldsCardComponent=O,e.OrderDetailComponent=A,e.OrderEditorComponent=R,e.OrderEditsPreviewDialogComponent=E,e.OrderHistoryComponent=L,e.OrderListComponent=M,e.OrderModule=K,e.OrderPaymentCardComponent=N,e.OrderProcessEdgeComponent=j,e.OrderProcessGraphComponent=_,e.OrderProcessGraphDialogComponent=T,e.OrderProcessNodeComponent=q,e.OrderResolver=U,e.OrderStateSelectDialogComponent=w,e.OrderTableComponent=V,e.OrderTransitionService=F,e.PaymentDetailComponent=$,e.PaymentStateLabelComponent=H,e.RefundOrderDialogComponent=P,e.RefundStateLabelComponent=W,e.SettleRefundDialogComponent=k,e.SimpleItemListComponent=Q,e.modifyingOrderBreadcrumb=J,e.orderBreadcrumb=Z,e.orderRoutes=Y,e.ɵ0=B,e.ɵ1=G,e.ɵ2=z,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=vendure-admin-ui-order.umd.min.js.map