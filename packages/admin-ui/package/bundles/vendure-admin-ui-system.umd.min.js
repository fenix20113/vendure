!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@vendure/admin-ui/core"),require("@angular/forms"),require("@angular/router"),require("rxjs"),require("rxjs/operators"),require("@biesbjerg/ngx-translate-extract-marker")):"function"==typeof define&&define.amd?define("@vendure/admin-ui/system",["exports","@angular/core","@vendure/admin-ui/core","@angular/forms","@angular/router","rxjs","rxjs/operators","@biesbjerg/ngx-translate-extract-marker"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).vendure=e.vendure||{},e.vendure["admin-ui"]=e.vendure["admin-ui"]||{},e.vendure["admin-ui"].system={}),e.ng.core,e.vendure["admin-ui"].core,e.ng.forms,e.ng.router,e.rxjs,e.rxjs.operators,e.ngxTranslateExtractMarker)}(this,(function(e,t,n,r,a,o,s,l){"use strict";var c=function(e){this.healthCheckService=e};c.decorators=[{type:t.Component,args:[{selector:"vdr-health-check",template:'<vdr-action-bar>\n    <vdr-ab-left>\n        <div class="system-status-header" *ngIf="healthCheckService.status$ | async as status">\n            <div class="status-icon">\n                <clr-icon\n                    [attr.shape]="status === \'ok\' ? \'check-circle\' : \'exclamation-circle\'"\n                    [ngClass]="{ \'is-success\': status === \'ok\', \'is-danger\': status !== \'ok\' }"\n                    size="48"\n                ></clr-icon>\n            </div>\n            <div class="status-detail">\n                <ng-container *ngIf="status === \'ok\'; else error">\n                    {{ \'system.health-all-systems-up\' | translate }}\n                </ng-container>\n                <ng-template #error>\n                    {{ \'system.health-error\' | translate }}\n                </ng-template>\n                <div class="last-checked">\n                    {{ \'system.health-last-checked\' | translate }}:\n                    {{ healthCheckService.lastCheck$ | async | localeDate: \'mediumTime\' }}\n                </div>\n            </div>\n        </div>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId="system-status"></vdr-action-bar-items>\n        <button class="btn btn-secondary" (click)="healthCheckService.refresh()">\n            <clr-icon shape="refresh"></clr-icon> {{ \'system.health-refresh\' | translate }}\n        </button>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<table class="table">\n    <thead>\n        <tr>\n            <th class="left">\n                {{ \'common.name\' | translate }}\n            </th>\n            <th class="left">\n                {{ \'system.health-status\' | translate }}\n            </th>\n            <th class="left">\n                {{ \'system.health-message\' | translate }}\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor="let row of healthCheckService.details$ | async">\n            <td class="align-middle left">{{ row.key }}</td>\n            <td class="align-middle left">\n                <vdr-chip [colorType]="row.result.status === \'up\' ? \'success\' : \'error\'">\n                    <ng-container *ngIf="row.result.status === \'up\'; else down">\n                        <clr-icon shape="check-circle"></clr-icon>\n                        {{ \'system.health-status-up\' | translate }}\n                    </ng-container>\n                    <ng-template #down>\n                        <clr-icon shape="exclamation-circle"></clr-icon>\n                        {{ \'system.health-status-down\' | translate }}\n                    </ng-template>\n                </vdr-chip>\n            </td>\n            <td class="align-middle left">{{ row.result.message }}</td>\n        </tr>\n    </tbody>\n</table>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:700}.system-status-header .last-checked{font-weight:400;color:var(--color-grey-500)}"]}]}],c.ctorParameters=function(){return[{type:n.HealthCheckService}]};
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};Object.create;function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return s}function u(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}Object.create;var m=function(e){function t(t,a,o,s,l){var c=e.call(this,s,l)||this;return c.dataService=t,c.modalService=a,c.notificationService=o,c.liveUpdate=new r.FormControl(!0),c.hideSettled=new r.FormControl(!0),c.queueFilter=new r.FormControl("all"),e.prototype.setQueryFn.call(c,(function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return(e=c.dataService.settings).getAllJobs.apply(e,u(t))}),(function(e){return e.jobs}),(function(e,t){var r="all"===c.queueFilter.value?null:{queueName:{eq:c.queueFilter.value}},a=c.hideSettled.value;return{options:{skip:e,take:t,filter:Object.assign(Object.assign({},r),a?{isSettled:{eq:!1}}:{}),sort:{createdAt:n.SortOrder.DESC}}}})),c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t.prototype.ngOnInit=function(){var t=this;e.prototype.ngOnInit.call(this),o.timer(5e3,2e3).pipe(s.takeUntil(this.destroy$),s.filter((function(){return t.liveUpdate.value}))).subscribe((function(){t.refresh()})),this.queues$=this.dataService.settings.getJobQueues().mapStream((function(e){return e.jobQueues})).pipe(s.map((function(e){return u([{name:"all",running:!0}],e)})))},t.prototype.hasResult=function(e){var t=e.result;return null!=t&&("object"!=typeof t||Object.keys(t).length>0)},t.prototype.cancelJob=function(e){var t=this;this.dataService.settings.cancelJob(e).subscribe((function(){return t.refresh()}))},t}(n.BaseListComponent);m.decorators=[{type:t.Component,args:[{selector:"vdr-job-list",template:'<vdr-action-bar>\n    <vdr-ab-left>\n        <clr-checkbox-container>\n            <clr-checkbox-wrapper>\n                <input type="checkbox" clrCheckbox [formControl]="liveUpdate" name="live-update"/>\n                <label>{{ \'common.live-update\' | translate }}</label>\n            </clr-checkbox-wrapper>\n            <clr-checkbox-wrapper>\n                <input\n                    type="checkbox"\n                    clrCheckbox\n                    [formControl]="hideSettled"\n                    name="hide-settled"\n                    (change)="refresh()"\n                />\n                <label>{{ \'system.hide-settled-jobs\' | translate }}</label>\n            </clr-checkbox-wrapper>\n        </clr-checkbox-container>\n    </vdr-ab-left>\n    <vdr-ab-right>\n        <ng-select\n            [addTag]="false"\n            [items]="queues$ | async"\n            [hideSelected]="true"\n            [multiple]="false"\n            [markFirst]="false"\n            [clearable]="false"\n            [searchable]="false"\n            bindValue="name"\n            [formControl]="queueFilter"\n            (change)="refresh()"\n        >\n            <ng-template ng-label-tmp ng-option-tmp let-item="item">\n                <ng-container *ngIf="item.name === \'all\'; else others">\n                    {{ \'system.all-job-queues\' | translate }}\n                </ng-container>\n                <ng-template #others>\n                    <vdr-chip [colorFrom]="item.name">{{ item.name }}</vdr-chip>\n                </ng-template>\n            </ng-template>\n        </ng-select>\n        <vdr-action-bar-items locationId="job-list"></vdr-action-bar-items>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]="items$ | async"\n    [itemsPerPage]="itemsPerPage$ | async"\n    [totalItems]="totalItems$ | async"\n    [currentPage]="currentPage$ | async"\n    (pageChange)="setPageNumber($event)"\n    (itemsPerPageChange)="setItemsPerPage($event)"\n>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column>{{ \'system.job-queue-name\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'common.created-at\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'system.job-state\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'system.job-duration\' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ \'system.job-result\' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-job="item">\n        <td class="left align-middle">\n            <vdr-entity-info [entity]="job"></vdr-entity-info>\n        </td>\n        <td class="left align-middle">\n            <vdr-dropdown *ngIf="job.data">\n                <button\n                    class="btn btn-link btn-icon"\n                    vdrDropdownTrigger\n                    [title]="\'system.job-data\' | translate"\n                >\n                    <clr-icon shape="details"></clr-icon>\n                </button>\n                <vdr-dropdown-menu>\n                    <div class="result-detail">\n                        <vdr-object-tree [value]="job.data"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-chip [colorFrom]="job.queueName">{{ job.queueName }}</vdr-chip>\n        </td>\n\n        <td class="left align-middle">{{ job.createdAt | timeAgo }}</td>\n        <td class="left align-middle">\n            <vdr-job-state-label [job]="job"></vdr-job-state-label>\n        </td>\n        <td class="left align-middle">{{ job.duration | duration }}</td>\n        <td class="left align-middle">\n            <vdr-dropdown *ngIf="hasResult(job)">\n                <button class="btn btn-link btn-sm details-button" vdrDropdownTrigger>\n                    <clr-icon shape="details"></clr-icon>\n                    {{ \'system.job-result\' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class="result-detail">\n                        <vdr-object-tree [value]="job.result"></vdr-object-tree>\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n            <vdr-dropdown *ngIf="job.error">\n                <button class="btn btn-link btn-sm details-button" vdrDropdownTrigger>\n                    <clr-icon shape="exclamation-circle"></clr-icon>\n                    {{ \'system.job-error\' | translate }}\n                </button>\n                <vdr-dropdown-menu>\n                    <div class="result-detail">\n                        {{ job.error }}\n                    </div>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n        <td class="right align-middle">\n            <vdr-dropdown *ngIf="!job.isSettled && job.state !== \'FAILED\'">\n                <button class="icon-button" vdrDropdownTrigger>\n                    <clr-icon shape="ellipsis-vertical"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition="bottom-right">\n                    <button\n                        type="button"\n                        class="delete-button"\n                        (click)="cancelJob(job.id)"\n                        [disabled]="!([\'DeleteSettings\', \'DeleteSystem\'] | hasPermission)"\n                        vdrDropdownItem\n                    >\n                        <clr-icon shape="ban" class="is-danger"></clr-icon>\n                        {{ \'common.cancel\' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".result-detail{margin:0 12px}"]}]}],m.ctorParameters=function(){return[{type:n.DataService},{type:n.ModalService},{type:n.NotificationService},{type:a.Router},{type:a.ActivatedRoute}]};var b=function(){function e(){}return Object.defineProperty(e.prototype,"iconShape",{get:function(){switch(this.job.state){case n.JobState.COMPLETED:return"check-circle";case n.JobState.FAILED:return"exclamation-circle";case n.JobState.CANCELLED:return"ban";case n.JobState.PENDING:case n.JobState.RETRYING:return"hourglass";case n.JobState.RUNNING:return"sync"}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"colorType",{get:function(){switch(this.job.state){case n.JobState.COMPLETED:return"success";case n.JobState.FAILED:case n.JobState.CANCELLED:return"error";case n.JobState.PENDING:case n.JobState.RETRYING:return"";case n.JobState.RUNNING:return"warning"}},enumerable:!1,configurable:!0}),e}();b.decorators=[{type:t.Component,args:[{selector:"vdr-job-state-label",template:'<vdr-chip [colorType]="colorType">\n    <clr-icon [attr.shape]="iconShape"></clr-icon>\n    {{ job.state | titlecase }}\n    <span *ngIf="job.state === \'RUNNING\'" class="progress">\n        {{ (job.progress / 100) | percent }}\n    </span>\n</vdr-chip>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:[".progress{margin-left:3px}clr-icon{min-width:12px}"]}]}],b.propDecorators={job:[{type:t.Input}]};var p={breadcrumb:l.marker("breadcrumb.job-queue")},h={breadcrumb:l.marker("breadcrumb.system-status")},v=[{path:"jobs",component:m,data:p},{path:"system-status",component:c,data:h}],g=function(){};g.decorators=[{type:t.NgModule,args:[{declarations:[c,m,b],imports:[n.SharedModule,a.RouterModule.forChild(v)]}]}],e.HealthCheckComponent=c,e.JobListComponent=m,e.JobStateLabelComponent=b,e.SystemModule=g,e.systemRoutes=v,e.ɵ0=p,e.ɵ1=h,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=vendure-admin-ui-system.umd.min.js.map