{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/catalog/src/components/asset-detail/asset-detail.component.ts","../../src/lib/catalog/src/components/asset-list/asset-list.component.ts","../../src/lib/catalog/src/components/collection-detail/collection-detail.component.ts","../../src/lib/catalog/src/components/collection-list/collection-list.component.ts","../../src/lib/catalog/src/components/facet-detail/facet-detail.component.ts","../../src/lib/catalog/src/components/facet-list/facet-list.component.ts","../../src/lib/catalog/src/providers/product-detail/replace-last.ts","../../src/lib/catalog/src/providers/product-detail/product-detail.service.ts","../../src/lib/catalog/src/components/apply-facet-dialog/apply-facet-dialog.component.ts","../../src/lib/catalog/src/components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component.ts","../../src/lib/catalog/src/components/product-detail/product-detail.component.ts","../../src/lib/catalog/src/components/product-list/product-list.component.ts","../../src/lib/catalog/src/components/product-variants-editor/product-variants-editor.component.ts","../../src/lib/catalog/src/providers/routing/asset-resolver.ts","../../src/lib/catalog/src/providers/routing/collection-resolver.ts","../../src/lib/catalog/src/providers/routing/facet-resolver.ts","../../src/lib/catalog/src/providers/routing/product-resolver.ts","../../src/lib/catalog/src/providers/routing/product-variants-resolver.ts","../../src/lib/catalog/src/catalog.routes.ts","../../src/lib/catalog/src/components/collection-contents/collection-contents.component.ts","../../src/lib/catalog/src/components/collection-tree/array-to-tree.ts","../../src/lib/catalog/src/components/collection-tree/collection-tree.component.ts","../../src/lib/catalog/src/components/collection-tree/collection-tree-node.component.ts","../../src/lib/catalog/src/components/generate-product-variants/generate-product-variants.component.ts","../../src/lib/catalog/src/components/option-value-input/option-value-input.component.ts","../../src/lib/catalog/src/components/product-assets/product-assets.component.ts","../../src/lib/catalog/src/components/product-search-input/product-search-input.component.ts","../../src/lib/catalog/src/components/update-product-option-dialog/update-product-option-dialog.component.ts","../../src/lib/catalog/src/components/product-variants-list/product-variants-list.component.ts","../../src/lib/catalog/src/components/product-variants-table/product-variants-table.component.ts","../../src/lib/catalog/src/components/variant-price-detail/variant-price-detail.component.ts","../../src/lib/catalog/src/catalog.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","AssetDetailComponent","router","route","serverConfigService","notificationService","dataService","formBuilder","_this","_super","detailForm","FormGroup","customFields","getCustomFieldConfig","ngOnInit","name","FormControl","tags","group","reduce","hash","field","assign","_c","init","ngOnDestroy","destroy","onAssetChange","event","_a","get","setValue","_b","markAsDirty","save","product","updateAsset","id","subscribe","success","entity","err","setFormValues","languageCode","customFieldsGroup","_d","_e","key","control","patchValue","BaseDetailComponent","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Router","ActivatedRoute","ServerConfigService","NotificationService","DataService","FormBuilder","AssetListComponent","modalService","searchTerm$","BehaviorSubject","undefined","filterByTags$","uploading","setQueryFn","_i","getAssetList","data","assets","skip","take","searchTerm","map","options","filter","contains","sort","createdAt","SortOrder","DESC","tagsOperator","LogicalOperator","AND","paginationConfig$","combineLatest","itemsPerPage$","currentPage$","totalItems$","pipe","itemsPerPage","currentPage","totalItems","debounceTime","takeUntil","destroy$","refresh","allTags$","getTagList","mapStream","items","filesSelected","files","createAssets","finalize","successCount","createAssets_1","createAssets_1_1","__typename","message","count","deleteAssets","showModalAndDelete","a","switchMap","response","DeletionResult","DELETED","assetIds","dialog","title","translationVars","buttons","type","returnValue","res","EMPTY","BaseListComponent","ModalService","CollectionDetailComponent","changeDetector","assetChanges","filters","allFilters","updatePermission","Permission","UpdateCatalog","UpdateCollection","Validators","required","slug","description","visible","array","collection","getCollectionFilters","single$","collectionFilters","getFilterDefinition","find","code","customFieldIsSet","assetsChanged","values","updateSlug","nameValue","entity$","languageCode$","slugControl","currentTranslation","findTranslation","currentSlugIsEmpty","pristine","normalizeString","addFilter","collectionFilter","filtersArray","findIndex","argsHash","output","arg","getConfigArgValue","removeFilter","index","removeAt","splice","dirty","mergeMap","category","input","getUpdatedCollection","parentId","snapshot","paramMap","createCollection","markAsPristine","markForCheck","navigate","relativeTo","updateCollection","contentsComponent","canDeactivate","featuredAsset","isPrivate","forEach","fieldDef","form","updatedCategory","createUpdatedTranslatable","translatable","updatedFields","customFieldConfig","defaultTranslation","featuredAssetId","mapOperationsToInputs","operations","formValueOperations","j","encodeConfigArgValue","ChangeDetectorRef","ViewChild","CollectionListComponent","expandAll","queryResult","getCollections","refetchOnChannelChange","items$","collections","shareReplay","activeCollectionId$","pm","distinctUntilChanged","activeCollectionTitle$","match","c","completed$","onRearrange","moveCollection","deleteCollection","parent","hasChildren","closeContents","params","contents","queryParamsHandling","ref","refetch","FacetDetailComponent","UpdateFacet","customValueFields","facet","updateCode","currentCode","codeControl","updateValueCode","customValueFieldIsSet","getValuesFormArray","addFacetValue","valuesFormArray","insert","facetForm","newFacet","getUpdatedFacet","createFacet","getAllFacets","mapTo","facetGroup","updateOperations","updateFacet","valuesArray","newValues","controls","facetId","translations","createFacetValues","getFacet","updatedValues","getUpdatedFacetValues","updateFacetValues","forkJoin","deleteFacetValue","facetValueId","deleted","deleteFacetValues","currentValuesFormArray","valueTranslation","valueControl","at","customValueFieldsGroup","addControl","fieldValue","facetFormGroup","dirtyValues","formRow","toString","dirtyValueValues","Error","notNullOrUndefined","FacetListComponent","initialLimit","displayLimit","getFacets","facets","toggleDisplayLimit","deleteFacet","replaceLast","target","search","replace","lastIndex","lastIndexOf","substr","ProductDetailService","mapSingle","getTaxCategories","settings","taxCategories","createProductWithVariants","createVariantsConfig","createProduct$","createProduct","nonEmptyOptionGroups","groups","createOptionGroups$","createProductOptionGroups","optionGroups","optionGroup","addOptionGroupToProduct","productId","optionGroupId","of","variants","optionIds","optionValues","optionName","option","og","flat","createProductVariants","createProductOptionGroup","variantData","join","price","sku","stockOnHand","stock","updateProduct","updateOptions","autoUpdate","productInput","updateVariantsInput","variantsInput","productOldName","productNewName","variant","currentVariantName","variantInput","existingVariantInput","variantTranslation","_f","updateProductVariants","updateProductOption","updateProductVariantNames$","oldOptionName","newOptionName","variantsToUpdate","includes","variantName","deleteProductVariant","getProduct","throwError","Injectable","providedIn","ApplyFacetDialogComponent","selectedValues","ngAfterViewInit","setTimeout","focus","selectValues","resolveWith","cancel","FacetValueSelectorComponent","AssignProductsToChannelDialogComponent","priceFactorControl","selectedChannelIdControl","defineProperty","productVariantIds","activeChannelId$","client","userStatus","activeChannelId","allChannels$","getChannels","channels","currentChannel","availableChannels","valueChanges","ids","selectChannel","variantsPreview$","from","getTopVariants","startWith","factor","pricePreview","channelIds","selectedChannel","isProductVariantMode","assignVariantsToChannel","channelId","priceFactor","channel","assignProductsToChannel","productIds","toPromise","productVariants","slice","ProductDetailComponent","productDetailService","location","filterInput","variantAssetChanges","selectedVariantIds","variantDisplayMode","customVariantFields","customOptionGroupFields","customOptionFields","enabled","autoUpdateVariantNames","facetValueIds","product$","variants$","filterTerm$","term","toLocaleLowerCase","taxCategories$","activeTab$","qpm","facets$","productFacetValues$","facetValues","allFacetValues$","flattenFacetValues","formFacetValueIdChanges$","getProductFormGroup","val","formChangeFacetValues$","combined","fv","facetValues$","merge","productChannels$","channelPriceIncludesTax$","getActiveChannel","activeChannel","pricesIncludeTax","navigateToTab","tabName","replaceState","createUrlTree","tab","isDefaultChannel","channelCode","DEFAULT_CHANNEL_CODE","assignToChannel","fromComponent","size","locals","currentChannelIds","removeFromChannel","removeProductsFromChannel","assignVariantToChannel","removeVariantFromChannel","removeVariantsFromChannel","variantAssetsChanged","keys","variantAssetChange","variantId","selectProductFacetValue","displayFacetValueModal","productGroup","currentFacetValueIds","unique","removeProductFacetValue","selectVariantFacetValue","withLatestFrom","existingFacetValueIds","variantFormGroup","selectedVariantIds_1","selectedVariantIds_1_1","variantsToCreateAreValid","every","closable","newProduct","getUpdatedProduct","console","priceIncludesTax","variantsArray","getUpdatedProductVariants","updateSlugAfterSave","cfCurrentTranslation","cfProduct","variantsFormArray","priceWithTax","taxCategoryId","taxCategory","useGlobalOutOfStockThreshold","outOfStockThreshold","trackInventory","productFormGroup","updatedProduct","dirtyVariants","dirtyVariantValues","formValue","results","firstResult","emitEvent","Location","ProductListComponent","jobQueueService","groupByProduct","searchProducts","facetValueOperator","result$","queryParamMap","productSearchInput","setSearchTerm","fvids$","getAll","setFacetValues","delay","setQueryParam","q","page","setFacetValueIds","fvids","rebuildSearchIndex","reindex","info","addJob","job","state","JobState","COMPLETED","time","Intl","NumberFormat","format","duration","indexedItemCount","deleteProduct","JobQueueService","static","config","ProductVariantsEditorComponent","formValueChanged","generatedVariants","initOptionsAndVariants","getDefaultUiLanguage","currencyCode","onFormChanged","variantInfo","getVariantsToAdd","existing","getVariantName","addOption","isNew","generateVariants","previousVariants","generatedVariantFactory","isDefault","existingVariant","getVariantPrototype","GeneratedVariant","productVariantId","generateAllCombinations","optionsAreEqual","pick","deleteVariant","reFetchProduct","newOptionGroups","confirmDeletionOfDefault","createdOptionGroups","addOptionGroupsToProduct","addNewOptionsToGroups","groupsIds","fetchOptionGroups","createNewProductVariants","deleteDefaultVariant","hasOnlyDefaultVariant","newOptions","createdGroup","cog","productOptionGroupId","locked","allGroupIds","addOptionToGroup","getProductOptionGroup","productOptionGroup","getProductVariantsOptions","toOptionString","x","Default","AssetResolver","updatedAt","AssetType","IMAGE","fileSize","mimeType","width","height","source","preview","focalPoint","getAsset","asset","BaseEntityResolver","CollectionResolver","children","getCollection","FacetResolver","ProductResolver","ProductVariantsResolver","breadcrumb","ɵ1","productBreadcrumb","ɵ2","productVariantEditorBreadcrumb","ɵ3","ɵ4","facetBreadcrumb","ɵ5","ɵ6","collectionBreadcrumb","ɵ7","ɵ8","assetBreadcrumb","catalogRoutes","path","component","ɵ0$1","createResolveData","CanDeactivateDetailGuard","detailBreadcrumb","breadcrumbKey","getName","link","CollectionContentsComponent","filterTermControl","collectionIdChange$","refresh$","Subject","contentsCurrentPage$","contentsItemsPerPage$","perPage","tap","setContentsPageNumber","collection$","filterTerm","getCollectionContents","contents$","contentsTotalItems$","ngOnChanges","changes","collectionId","currentValue","complete","setParam","setContentsItemsPerPage","arrayToTree","nodes","currentState","topLevelNodes","mappedArr","currentStateMap","tree","nodeMap","Map","visit","node","set","treeToMap","nodes_1","nodes_1_1","mappedElem","expanded","Input","ContentChild","TemplateRef","CollectionTreeComponent","rearrange","EventEmitter","collectionTree","onDrop","item","newParentId","container","emit","currentIndex","onMove","onDelete","isRootNode","Output","CollectionTreeNodeComponent","root","depth","parentName","permissions$","permissions","hasUpdatePermission$","perms","hasDeletePermission$","DeleteCatalog","DeleteCollection","expandAllChange","previousValue","trackByFn","getMoveListItems","parentPath","path_1","child","move","moveUp","moveDown","drop","moveItemInArray","previousIndex","delete","decorators","SkipSelf","Optional","DEFAULT_VARIANT_CODE","GenerateProductVariantsComponent","variantsChange","variantFormValues","removeOption","sum","copyFromDefault","onFormChange","handleEnter","optionValueInputComponent","preventDefault","stopPropagation","variantsToCreate","prop","OPTION_VALUE_INPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","OptionValueInputComponent","multi","groupName","disabled","isFocussed","lastSelected","registerOnChange","fn","onChangeFn","registerOnTouched","onTouchFn","setDisabledState","isDisabled","writeValue","obj","textArea","nativeElement","handleKey","addOptionValue","removeLastOption","handleBlur","parseInputIntoOptions","split","trim","providers","ProductAssetsComponent","viewportRuler","collectionDetailComponent","compact","change","updateCollectionPermissions","updateProductPermissions","UpdateProduct","dropListEnterPredicate","drag","placeholder","activeContainer","phElement","element","sourceElement","dropContainer","dropElement","parentElement","dragIndex","__indexOf","dropIndex","sourceIndex","style","clientWidth","clientHeight","removeChild","targetIndex","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","selectAssets","AssetPickerDialogComponent","emitChangeEvent","setAsFeatured","isFeatured","previewAsset","AssetPreviewDialogComponent","removeAsset","dragMoved","point","getPointerPositionOnPage","listGroup","_items","dropList","getBoundingClientRect","top","bottom","left","right","__isInsideDropListClientRect","dropListDropped","appendChild","startsWith","__isTouchEvent","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","indexOf","ViewportRuler","HostBinding","read","CdkDropListGroup","CdkDropList","SingleSearchSelectionModelFactory","ProductSearchInputComponent","searchTermChange","facetValueChange","lastTerm","lastFacetValueIds","filterFacetResults","isFacetValueItem","facetValue","toLowerCase","selectComponent","select","currentTerm","selectedItems","unselect","onSelectChange","isArray","searchTermItem","addTagFn","isSearchHeaderSelected","itemsList","markedIndex","SELECTION_MODEL_FACTORY","useValue","ɵ0","UpdateProductOptionDialogComponent","updateVariantName","codeInputTouched","productOption","activeLanguage","customFieldsForm","update","ProductVariantsListComponent","assetChange","selectionChange","selectFacetValueClick","pagination","formGroupMap","GlobalFlag","getGlobalSettings","globalSettings","globalTrackInventory","globalOutOfStockThreshold","subscription","formArray","add","buildFormGroupMap","unsubscribe","trackById","inventoryIsNotTracked","formGroup","FALSE","INHERIT","getTaxCategoryName","getSaleableStockLevel","effectiveOutOfStockThreshold","stockAllocated","areAllSelected","toggleSelectAll","toggleSelectVariant","optionGroupName","pendingFacetValues","formFacetValueIds","getFacetValueIds","variantFacetValueIds_1","existingFacetValues","removeFacetValue","newValue","isVariantSelected","editOption","clear","controlGroup","ProductVariantsTableComponent","getFeaturedAsset","pendingAssetChanges","VariantPriceDetailComponent","priceChange$","taxCategoryIdChange$","taxRates$","getTaxRates","taxRates","activeChannel$","taxRate$","defaultTaxZone","applicableRate","taxRate","zone","grossPrice$","Math","round","NgModule","imports","SharedModule","RouterModule","forChild","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    GetAsset,\n    LanguageCode,\n} from '@vendure/admin-ui/core';\nimport { DataService, NotificationService, ServerConfigService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-asset-detail',\n    templateUrl: './asset-detail.component.html',\n    styleUrls: ['./asset-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssetDetailComponent extends BaseDetailComponent<GetAsset.Asset> implements OnInit, OnDestroy {\n    detailForm = new FormGroup({});\n    customFields: CustomFieldConfig[];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Asset');\n    }\n\n    ngOnInit() {\n        this.detailForm = new FormGroup({\n            name: new FormControl(''),\n            tags: new FormControl([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    onAssetChange(event: { id: string; name: string; tags: string[] }) {\n        this.detailForm.get('name')?.setValue(event.name);\n        this.detailForm.get('tags')?.setValue(event.tags);\n        this.detailForm.markAsDirty();\n    }\n\n    save() {\n        this.dataService.product\n            .updateAsset({\n                id: this.id,\n                name: this.detailForm.value.name,\n                tags: this.detailForm.value.tags,\n                customFields: this.detailForm.value.customFields,\n            })\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Asset' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Asset',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(entity: GetAsset.Asset, languageCode: LanguageCode): void {\n        this.detailForm.get('name')?.setValue(entity.name);\n        this.detailForm.get('tags')?.setValue(entity.tags);\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetAssetList,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SortOrder,\n    TagFragment,\n} from '@vendure/admin-ui/core';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable } from 'rxjs';\nimport { debounceTime, finalize, map, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-asset-list',\n    templateUrl: './asset-list.component.html',\n    styleUrls: ['./asset-list.component.scss'],\n})\nexport class AssetListComponent\n    extends BaseListComponent<GetAssetList.Query, GetAssetList.Items, GetAssetList.Variables>\n    implements OnInit {\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\n    uploading = false;\n    allTags$: Observable<TagFragment[]>;\n    paginationConfig$: Observable<PaginationInstance>;\n\n    constructor(\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.product.getAssetList(...args),\n            data => data.assets,\n            (skip, take) => {\n                const searchTerm = this.searchTerm$.value;\n                const tags = this.filterByTags$.value?.map(t => t.value);\n                return {\n                    options: {\n                        skip,\n                        take,\n                        ...(searchTerm\n                            ? {\n                                  filter: {\n                                      name: { contains: searchTerm },\n                                  },\n                              }\n                            : {}),\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                        tags,\n                        tagsOperator: LogicalOperator.AND,\n                    },\n                };\n            },\n            { take: 25, skip: 0 },\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.paginationConfig$ = combineLatest(this.itemsPerPage$, this.currentPage$, this.totalItems$).pipe(\n            map(([itemsPerPage, currentPage, totalItems]) => ({ itemsPerPage, currentPage, totalItems })),\n        );\n        this.searchTerm$.pipe(debounceTime(250), takeUntil(this.destroy$)).subscribe(() => this.refresh());\n\n        this.filterByTags$.pipe(takeUntil(this.destroy$)).subscribe(() => this.refresh());\n        this.allTags$ = this.dataService.product.getTagList().mapStream(data => data.tags.items);\n    }\n\n    filesSelected(files: File[]) {\n        if (files.length) {\n            this.uploading = true;\n            this.dataService.product\n                .createAssets(files)\n                .pipe(finalize(() => (this.uploading = false)))\n                .subscribe(({ createAssets }) => {\n                    let successCount = 0;\n                    for (const result of createAssets) {\n                        switch (result.__typename) {\n                            case 'Asset':\n                                successCount++;\n                                break;\n                            case 'MimeTypeError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                    if (0 < successCount) {\n                        super.refresh();\n                        this.notificationService.success(_('asset.notify-create-assets-success'), {\n                            count: successCount,\n                        });\n                    }\n                });\n        }\n    }\n\n    deleteAssets(assets: Asset[]) {\n        this.showModalAndDelete(assets.map(a => a.id))\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(\n                            assets.map(a => a.id),\n                            response.message || '',\n                        ).pipe(map(r => r.result === DeletionResult.DELETED));\n                    }\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Assets',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Assets',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(assetIds: string[], message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-assets'),\n                translationVars: {\n                    count: assetIds.length,\n                },\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.product.deleteAssets(assetIds, !!message) : EMPTY)),\n                map(res => res.deleteAssets),\n            );\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    Collection,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    ConfigurableOperationInput,\n    CreateCollectionInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    encodeConfigArgValue,\n    findTranslation,\n    getConfigArgValue,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCollectionInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nimport { CollectionContentsComponent } from '../collection-contents/collection-contents.component';\n\n@Component({\n    selector: 'vdr-collection-detail',\n    templateUrl: './collection-detail.component.html',\n    styleUrls: ['./collection-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionDetailComponent\n    extends BaseDetailComponent<Collection.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    assetChanges: { assets?: Asset[]; featuredAsset?: Asset } = {};\n    filters: ConfigurableOperation[] = [];\n    allFilters: ConfigurableOperationDefinition[] = [];\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    @ViewChild('collectionContents') contentsComponent: CollectionContentsComponent;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Collection');\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            slug: '',\n            description: '',\n            visible: false,\n            filters: this.formBuilder.array([]),\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.dataService.collection.getCollectionFilters().single$.subscribe(res => {\n            this.allFilters = res.collectionFilters;\n        });\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    getFilterDefinition(filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\n        return this.allFilters.find(f => f.code === filter.code);\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    /**\n     * If creating a new Collection, automatically generate the slug based on the collection name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    addFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index === -1) {\n            const argsHash = collectionFilter.args.reduce(\n                (output, arg) => ({\n                    ...output,\n                    [arg.name]: getConfigArgValue(arg.value),\n                }),\n                {},\n            );\n            filtersArray.push(\n                this.formBuilder.control({\n                    code: collectionFilter.code,\n                    args: argsHash,\n                }),\n            );\n            this.filters.push({\n                code: collectionFilter.code,\n                args: collectionFilter.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\n            });\n        }\n    }\n\n    removeFilter(collectionFilter: ConfigurableOperation) {\n        const filtersArray = this.detailForm.get('filters') as FormArray;\n        const index = filtersArray.value.findIndex(o => o.code === collectionFilter.code);\n        if (index !== -1) {\n            filtersArray.removeAt(index);\n            this.filters.splice(index, 1);\n        }\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as CreateCollectionInput;\n                    const parentId = this.route.snapshot.paramMap.get('parentId');\n                    if (parentId) {\n                        input.parentId = parentId;\n                    }\n                    return this.dataService.collection.createCollection(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Collection',\n                    });\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCollection.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([category, languageCode]) => {\n                    const input = this.getUpdatedCollection(\n                        category,\n                        this.detailForm,\n                        languageCode,\n                    ) as UpdateCollectionInput;\n                    return this.dataService.collection.updateCollection(input);\n                }),\n            )\n            .subscribe(\n                () => {\n                    this.assetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Collection',\n                    });\n                    this.contentsComponent.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the category or current language.\n     */\n    protected setFormValues(entity: Collection.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(entity, languageCode);\n\n        this.detailForm.patchValue({\n            name: currentTranslation ? currentTranslation.name : '',\n            slug: currentTranslation ? currentTranslation.slug : '',\n            description: currentTranslation ? currentTranslation.description : '',\n            visible: !entity.isPrivate,\n        });\n\n        entity.filters.forEach(f => this.addFilter(f));\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n\n    /**\n     * Given a category and the value of the form, this method creates an updated copy of the category which\n     * can then be persisted to the API.\n     */\n    private getUpdatedCollection(\n        category: Collection.Fragment,\n        form: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateCollectionInput | UpdateCollectionInput {\n        const updatedCategory = createUpdatedTranslatable({\n            translatable: category,\n            updatedFields: form.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: category.name || '',\n                slug: category.slug || '',\n                description: category.description || '',\n            },\n        });\n        return {\n            ...updatedCategory,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            isPrivate: !form.value.visible,\n            filters: this.mapOperationsToInputs(this.filters, this.detailForm.value.filters),\n        };\n    }\n\n    /**\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\n     */\n    private mapOperationsToInputs(\n        operations: ConfigurableOperation[],\n        formValueOperations: any,\n    ): ConfigurableOperationInput[] {\n        return operations.map((o, i) => {\n            return {\n                code: o.code,\n                arguments: Object.values(formValueOperations[i].args).map((value: any, j) => ({\n                    name: o.args[j].name,\n                    value: encodeConfigArgValue(value),\n                })),\n            };\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    GetCollectionList,\n    ModalService,\n    NotificationService,\n    QueryResult,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay, switchMap, take } from 'rxjs/operators';\n\nimport { RearrangeEvent } from '../collection-tree/collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-list',\n    templateUrl: './collection-list.component.html',\n    styleUrls: ['./collection-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionListComponent implements OnInit, OnDestroy {\n    activeCollectionId$: Observable<string | null>;\n    activeCollectionTitle$: Observable<string>;\n    items$: Observable<GetCollectionList.Items[]>;\n    expandAll = false;\n    private queryResult: QueryResult<any>;\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.queryResult = this.dataService.collection.getCollections(1000, 0).refetchOnChannelChange();\n        this.items$ = this.queryResult.mapStream(data => data.collections.items).pipe(shareReplay(1));\n        this.activeCollectionId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n        );\n\n        this.activeCollectionTitle$ = combineLatest(this.activeCollectionId$, this.items$).pipe(\n            map(([id, collections]) => {\n                if (id) {\n                    const match = collections.find(c => c.id === id);\n                    return match ? match.name : '';\n                }\n                return '';\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.queryResult.completed$.next();\n    }\n\n    onRearrange(event: RearrangeEvent) {\n        this.dataService.collection.moveCollection([event]).subscribe({\n            next: () => {\n                this.notificationService.success(_('common.notify-saved-changes'));\n                this.refresh();\n            },\n            error: err => {\n                this.notificationService.error(_('common.notify-save-changes-error'));\n            },\n        });\n    }\n\n    deleteCollection(id: string) {\n        this.items$\n            .pipe(\n                take(1),\n                map(items => -1 < items.findIndex(i => i.parent && i.parent.id === id)),\n                switchMap(hasChildren => {\n                    return this.modalService.dialog({\n                        title: _('catalog.confirm-delete-collection'),\n                        body: hasChildren\n                            ? _('catalog.confirm-delete-collection-and-children-body')\n                            : undefined,\n                        buttons: [\n                            { type: 'secondary', label: _('common.cancel') },\n                            { type: 'danger', label: _('common.delete'), returnValue: true },\n                        ],\n                    });\n                }),\n                switchMap(response => (response ? this.dataService.collection.deleteCollection(id) : EMPTY)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Collection',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Collection',\n                    });\n                },\n            );\n    }\n\n    closeContents() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    private refresh() {\n        this.queryResult.ref.refetch();\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateFacetInput,\n    CreateFacetValueInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateFacetInput,\n    UpdateFacetValueInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\nimport { map, mapTo, mergeMap, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-detail',\n    templateUrl: './facet-detail.component.html',\n    styleUrls: ['./facet-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetDetailComponent\n    extends BaseDetailComponent<FacetWithValues.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    customValueFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    values: Array<FacetWithValues.Values | { name: string; code: string }>;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Facet');\n        this.customValueFields = this.getCustomFieldConfig('FacetValue');\n        this.detailForm = this.formBuilder.group({\n            facet: this.formBuilder.group({\n                code: ['', Validators.required],\n                name: '',\n                visible: true,\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            values: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['facet', 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    updateValueCode(currentCode: string, nameValue: string, index: number) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['values', index, 'code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['facet', 'customFields', name]);\n    }\n\n    customValueFieldIsSet(index: number, name: string): boolean {\n        return !!this.detailForm.get(['values', index, 'customFields', name]);\n    }\n\n    getValuesFormArray(): FormArray {\n        return this.detailForm.get('values') as FormArray;\n    }\n\n    addFacetValue() {\n        const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n        if (valuesFormArray) {\n            valuesFormArray.insert(\n                valuesFormArray.length,\n                this.formBuilder.group({\n                    id: '',\n                    name: ['', Validators.required],\n                    code: '',\n                }),\n            );\n            this.values.push({ name: '', code: '' });\n        }\n    }\n\n    create() {\n        const facetForm = this.detailForm.get('facet');\n        if (!facetForm || !facetForm.dirty) {\n            return;\n        }\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const newFacet = this.getUpdatedFacet(\n                        facet,\n                        facetForm as FormGroup,\n                        languageCode,\n                    ) as CreateFacetInput;\n                    return this.dataService.facet.createFacet(newFacet);\n                }),\n                switchMap(data => this.dataService.facet.getAllFacets().single$.pipe(mapTo(data))),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([facet, languageCode]) => {\n                    const facetGroup = this.detailForm.get('facet');\n                    const updateOperations: Array<Observable<any>> = [];\n\n                    if (facetGroup && facetGroup.dirty) {\n                        const newFacet = this.getUpdatedFacet(\n                            facet,\n                            facetGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateFacetInput;\n                        if (newFacet) {\n                            updateOperations.push(this.dataService.facet.updateFacet(newFacet));\n                        }\n                    }\n                    const valuesArray = this.detailForm.get('values');\n                    if (valuesArray && valuesArray.dirty) {\n                        const newValues: CreateFacetValueInput[] = (valuesArray as FormArray).controls\n                            .filter(c => !c.value.id)\n                            .map(c => ({\n                                facetId: facet.id,\n                                code: c.value.code,\n                                translations: [{ name: c.value.name, languageCode }],\n                            }));\n                        if (newValues.length) {\n                            updateOperations.push(\n                                this.dataService.facet\n                                    .createFacetValues(newValues)\n                                    .pipe(switchMap(() => this.dataService.facet.getFacet(this.id).single$)),\n                            );\n                        }\n                        const updatedValues = this.getUpdatedFacetValues(\n                            facet,\n                            valuesArray as FormArray,\n                            languageCode,\n                        );\n                        if (updatedValues.length) {\n                            updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));\n                        }\n                    }\n\n                    return forkJoin(updateOperations);\n                }),\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Facet',\n                    });\n                },\n            );\n    }\n\n    deleteFacetValue(facetValueId: string | undefined, index: number) {\n        if (!facetValueId) {\n            // deleting a newly-added (not persisted) FacetValue\n            const valuesFormArray = this.detailForm.get('values') as FormArray | null;\n            if (valuesFormArray) {\n                valuesFormArray.removeAt(index);\n            }\n            this.values.splice(index, 1);\n            return;\n        }\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                switchMap(deleted => (deleted ? this.dataService.facet.getFacet(this.id).single$ : [])),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetValueId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet-value'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(result =>\n                    result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY,\n                ),\n                map(result => result.deleteFacetValues[0]),\n            );\n    }\n\n    /**\n     * Sets the values of the form on changes to the facet or current language.\n     */\n    protected setFormValues(facet: FacetWithValues.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(facet, languageCode);\n\n        this.detailForm.patchValue({\n            facet: {\n                code: facet.code,\n                visible: !facet.isPrivate,\n                name: currentTranslation?.name ?? '',\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['facet', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (facet as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const currentValuesFormArray = this.detailForm.get('values') as FormArray;\n        this.values = [...facet.values];\n        facet.values.forEach((value, i) => {\n            const valueTranslation = findTranslation(value, languageCode);\n            const group = {\n                id: value.id,\n                code: value.code,\n                name: valueTranslation ? valueTranslation.name : '',\n            };\n            const valueControl = currentValuesFormArray.at(i);\n            if (valueControl) {\n                valueControl.setValue(group);\n            } else {\n                currentValuesFormArray.insert(i, this.formBuilder.group(group));\n            }\n            if (this.customValueFields.length) {\n                let customValueFieldsGroup = this.detailForm.get(['values', i, 'customFields']) as FormGroup;\n                if (!customValueFieldsGroup) {\n                    customValueFieldsGroup = new FormGroup({});\n                    (this.detailForm.get(['values', i]) as FormGroup).addControl(\n                        'customFields',\n                        customValueFieldsGroup,\n                    );\n                }\n\n                if (customValueFieldsGroup) {\n                    for (const fieldDef of this.customValueFields) {\n                        const key = fieldDef.name;\n                        const fieldValue =\n                            fieldDef.type === 'localeString'\n                                ? (valueTranslation as any).customFields[key]\n                                : (value as any).customFields[key];\n                        const control = customValueFieldsGroup.get(key);\n                        if (control) {\n                            control.setValue(fieldValue);\n                        } else {\n                            customValueFieldsGroup.addControl(key, new FormControl(fieldValue));\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which\n     * can then be persisted to the API.\n     */\n    private getUpdatedFacet(\n        facet: FacetWithValues.Fragment,\n        facetFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): CreateFacetInput | UpdateFacetInput {\n        const input = createUpdatedTranslatable({\n            translatable: facet,\n            updatedFields: facetFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: facet.name || '',\n            },\n        });\n        input.isPrivate = !facetFormGroup.value.visible;\n        return input;\n    }\n\n    /**\n     * Given an array of facet values and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedFacetValues(\n        facet: FacetWithValues.Fragment,\n        valuesFormArray: FormArray,\n        languageCode: LanguageCode,\n    ): UpdateFacetValueInput[] {\n        const dirtyValues = facet.values.filter((v, i) => {\n            const formRow = valuesFormArray.get(i.toString());\n            return formRow && formRow.dirty && formRow.value.id;\n        });\n        const dirtyValueValues = valuesFormArray.controls\n            .filter(c => c.dirty && c.value.id)\n            .map(c => c.value);\n\n        if (dirtyValues.length !== dirtyValueValues.length) {\n            throw new Error(_(`error.facet-value-form-values-do-not-match`));\n        }\n        return dirtyValues\n            .map((value, i) => {\n                return createUpdatedTranslatable({\n                    translatable: value,\n                    updatedFields: dirtyValueValues[i],\n                    customFieldConfig: this.customValueFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n            })\n            .filter(notNullOrUndefined);\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { DeletionResult, GetFacetList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-facet-list',\n    templateUrl: './facet-list.component.html',\n    styleUrls: ['./facet-list.component.scss'],\n})\nexport class FacetListComponent extends BaseListComponent<GetFacetList.Query, GetFacetList.Items> {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.facet.getFacets(...args).refetchOnChannelChange(),\n            data => data.facets,\n        );\n    }\n\n    toggleDisplayLimit(facet: GetFacetList.Items) {\n        if (this.displayLimit[facet.id] === facet.values.length) {\n            this.displayLimit[facet.id] = this.initialLimit;\n        } else {\n            this.displayLimit[facet.id] = facet.values.length;\n        }\n    }\n\n    deleteFacet(facetValueId: string) {\n        this.showModalAndDelete(facetValueId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(facetValueId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.facet.getAllFacets().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'FacetValue',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'FacetValue',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(facetId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-facet'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.facet.deleteFacet(facetId, !!message) : EMPTY)),\n                map(res => res.deleteFacet),\n            );\n    }\n}\n","/**\n * @description\n * Like String.prototype.replace(), but replaces the last instance\n * rather than the first.\n */\nexport function replaceLast(target: string | undefined | null, search: string, replace: string): string {\n    if (!target) {\n        return '';\n    }\n    const lastIndex = target.lastIndexOf(search);\n    if (lastIndex === -1) {\n        return target;\n    }\n    const head = target.substr(0, lastIndex);\n    const tail = target.substr(lastIndex).replace(search, replace);\n    return head + tail;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CreateProductInput,\n    CreateProductVariantInput,\n    DataService,\n    DeletionResult,\n    FacetWithValues,\n    findTranslation,\n    LanguageCode,\n    ProductWithVariants,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';\n\nimport { CreateProductVariantsConfig } from '../../components/generate-product-variants/generate-product-variants.component';\n\nimport { replaceLast } from './replace-last';\n\n/**\n * Handles the logic for making the API calls to perform CRUD operations on a Product and its related\n * entities. This logic was extracted out of the component because it became too large and hard to follow.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductDetailService {\n    constructor(private dataService: DataService) {}\n\n    getFacets(): Observable<FacetWithValues.Fragment[]> {\n        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);\n    }\n\n    getTaxCategories() {\n        return this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories)\n            .pipe(shareReplay(1));\n    }\n\n    createProductWithVariants(\n        input: CreateProductInput,\n        createVariantsConfig: CreateProductVariantsConfig,\n        languageCode: LanguageCode,\n    ) {\n        const createProduct$ = this.dataService.product.createProduct(input);\n        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);\n        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);\n\n        return forkJoin(createProduct$, createOptionGroups$).pipe(\n            mergeMap(([{ createProduct }, optionGroups]) => {\n                const addOptionsToProduct$ = optionGroups.length\n                    ? forkJoin(\n                          optionGroups.map(optionGroup => {\n                              return this.dataService.product.addOptionGroupToProduct({\n                                  productId: createProduct.id,\n                                  optionGroupId: optionGroup.id,\n                              });\n                          }),\n                      )\n                    : of([]);\n                return addOptionsToProduct$.pipe(\n                    map(() => {\n                        return { createProduct, optionGroups };\n                    }),\n                );\n            }),\n            mergeMap(({ createProduct, optionGroups }) => {\n                const variants = createVariantsConfig.variants.map(v => {\n                    const optionIds = optionGroups.length\n                        ? v.optionValues.map((optionName, index) => {\n                              const option = optionGroups[index].options.find(o => o.name === optionName);\n                              if (!option) {\n                                  throw new Error(\n                                      `Could not find a matching ProductOption \"${optionName}\" when creating variant`,\n                                  );\n                              }\n                              return option.id;\n                          })\n                        : [];\n                    return {\n                        ...v,\n                        optionIds,\n                    };\n                });\n                const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);\n                return this.createProductVariants(createProduct, variants, options, languageCode);\n            }),\n        );\n    }\n\n    createProductOptionGroups(groups: Array<{ name: string; values: string[] }>, languageCode: LanguageCode) {\n        return groups.length\n            ? forkJoin(\n                  groups.map(c => {\n                      return this.dataService.product\n                          .createProductOptionGroups({\n                              code: normalizeString(c.name, '-'),\n                              translations: [{ languageCode, name: c.name }],\n                              options: c.values.map(v => ({\n                                  code: normalizeString(v, '-'),\n                                  translations: [{ languageCode, name: v }],\n                              })),\n                          })\n                          .pipe(map(data => data.createProductOptionGroup));\n                  }),\n              )\n            : of([]);\n    }\n\n    createProductVariants(\n        product: { name: string; id: string },\n        variantData: Array<{ price: number; sku: string; stock: number; optionIds: string[] }>,\n        options: Array<{ id: string; name: string }>,\n        languageCode: LanguageCode,\n    ) {\n        const variants: CreateProductVariantInput[] = variantData.map(v => {\n            const name = options.length\n                ? `${product.name} ${v.optionIds\n                      .map(id => options.find(o => o.id === id))\n                      .filter(notNullOrUndefined)\n                      .map(o => o.name)\n                      .join(' ')}`\n                : product.name;\n            return {\n                productId: product.id,\n                price: v.price,\n                sku: v.sku,\n                stockOnHand: v.stock,\n                translations: [\n                    {\n                        languageCode,\n                        name,\n                    },\n                ],\n                optionIds: v.optionIds,\n            };\n        });\n        return this.dataService.product.createProductVariants(variants).pipe(\n            map(({ createProductVariants }) => ({\n                createProductVariants,\n                productId: product.id,\n            })),\n        );\n    }\n\n    updateProduct(updateOptions: {\n        product: ProductWithVariants.Fragment;\n        languageCode: LanguageCode;\n        autoUpdate: boolean;\n        productInput?: UpdateProductInput;\n        variantsInput?: UpdateProductVariantInput[];\n    }) {\n        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;\n        const updateOperations: Array<Observable<UpdateProductMutation | UpdateProductVariantsMutation>> = [];\n        const updateVariantsInput = variantsInput || [];\n        if (productInput) {\n            updateOperations.push(this.dataService.product.updateProduct(productInput));\n\n            const productOldName = findTranslation(product, languageCode)?.name;\n            const productNewName = findTranslation(productInput, languageCode)?.name;\n            if (productOldName && productNewName && autoUpdate) {\n                for (const variant of product.variants) {\n                    const currentVariantName = findTranslation(variant, languageCode)?.name || '';\n                    let variantInput: UpdateProductVariantInput;\n                    const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);\n                    if (existingVariantInput) {\n                        variantInput = existingVariantInput;\n                    } else {\n                        variantInput = {\n                            id: variant.id,\n                            translations: [{ languageCode, name: currentVariantName }],\n                        };\n                        updateVariantsInput.push(variantInput);\n                    }\n                    const variantTranslation = findTranslation(variantInput, languageCode);\n                    if (variantTranslation) {\n                        variantTranslation.name = replaceLast(\n                            variantTranslation.name,\n                            productOldName,\n                            productNewName,\n                        );\n                    }\n                }\n            }\n        }\n        if (updateVariantsInput.length) {\n            updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));\n        }\n        return forkJoin(updateOperations);\n    }\n\n    updateProductOption(\n        input: UpdateProductOptionInput & { autoUpdate: boolean },\n        product: ProductWithVariants.Fragment,\n        languageCode: LanguageCode,\n    ) {\n        let updateProductVariantNames$: Observable<any> = of([]);\n        if (input.autoUpdate) {\n            // Update any ProductVariants' names which include the option name\n            let oldOptionName: string | undefined;\n            const newOptionName = findTranslation(input, languageCode)?.name;\n            if (!newOptionName) {\n                updateProductVariantNames$ = of([]);\n            }\n            const variantsToUpdate: UpdateProductVariantInput[] = [];\n            for (const variant of product.variants) {\n                if (variant.options.map(o => o.id).includes(input.id)) {\n                    if (!oldOptionName) {\n                        oldOptionName = findTranslation(\n                            variant.options.find(o => o.id === input.id),\n                            languageCode,\n                        )?.name;\n                    }\n                    const variantName = findTranslation(variant, languageCode)?.name || '';\n                    if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {\n                        variantsToUpdate.push({\n                            id: variant.id,\n                            translations: [\n                                {\n                                    languageCode,\n                                    name: replaceLast(variantName, oldOptionName, newOptionName),\n                                },\n                            ],\n                        });\n                    }\n                }\n            }\n            if (variantsToUpdate.length) {\n                updateProductVariantNames$ = this.dataService.product.updateProductVariants(variantsToUpdate);\n            }\n        }\n        return this.dataService.product\n            .updateProductOption(input)\n            .pipe(mergeMap(() => updateProductVariantNames$));\n    }\n\n    deleteProductVariant(id: string, productId: string) {\n        return this.dataService.product.deleteProductVariant(id).pipe(\n            switchMap(result => {\n                if (result.deleteProductVariant.result === DeletionResult.DELETED) {\n                    return this.dataService.product.getProduct(productId).single$;\n                } else {\n                    return throwError(result.deleteProductVariant.message);\n                }\n            }),\n        );\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n} from '@angular/core';\nimport { Dialog, FacetValue, FacetValueSelectorComponent, FacetWithValues } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-apply-facet-dialog',\n    templateUrl: './apply-facet-dialog.component.html',\n    styleUrls: ['./apply-facet-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyFacetDialogComponent implements Dialog<FacetValue[]>, AfterViewInit {\n    @ViewChild(FacetValueSelectorComponent) private selector: FacetValueSelectorComponent;\n    resolveWith: (result?: FacetValue[]) => void;\n    selectedValues: FacetValue[] = [];\n    // Provided by caller\n    facets: FacetWithValues.Fragment[];\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngAfterViewInit() {\n        setTimeout(() => this.selector.focus(), 0);\n    }\n\n    selectValues() {\n        this.resolveWith(this.selectedValues);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { GetChannels, ProductVariantFragment } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { combineLatest, from, Observable } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-assign-products-to-channel-dialog',\n    templateUrl: './assign-products-to-channel-dialog.component.html',\n    styleUrls: ['./assign-products-to-channel-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AssignProductsToChannelDialogComponent implements OnInit, Dialog<any> {\n    selectedChannel: GetChannels.Channels | null | undefined;\n    currentChannel: GetChannels.Channels;\n    availableChannels: GetChannels.Channels[];\n    resolveWith: (result?: any) => void;\n    variantsPreview$: Observable<Array<{ id: string; name: string; price: number; pricePreview: number }>>;\n    priceFactorControl = new FormControl(1);\n    selectedChannelIdControl = new FormControl();\n\n    // assigned by ModalService.fromComponent() call\n    productIds: string[];\n    productVariantIds: string[] | undefined;\n    currentChannelIds: string[];\n\n    get isProductVariantMode(): boolean {\n        return this.productVariantIds != null;\n    }\n\n    constructor(private dataService: DataService, private notificationService: NotificationService) {}\n\n    ngOnInit() {\n        const activeChannelId$ = this.dataService.client\n            .userStatus()\n            .mapSingle(({ userStatus }) => userStatus.activeChannelId);\n        const allChannels$ = this.dataService.settings.getChannels().mapSingle(data => data.channels);\n\n        combineLatest(activeChannelId$, allChannels$).subscribe(([activeChannelId, channels]) => {\n            // tslint:disable-next-line:no-non-null-assertion\n            this.currentChannel = channels.find(c => c.id === activeChannelId)!;\n            this.availableChannels = channels;\n        });\n\n        this.selectedChannelIdControl.valueChanges.subscribe(ids => {\n            this.selectChannel(ids);\n        });\n\n        this.variantsPreview$ = combineLatest(\n            from(this.getTopVariants(10)),\n            this.priceFactorControl.valueChanges.pipe(startWith(1)),\n        ).pipe(\n            map(([variants, factor]) => {\n                return variants.map(v => ({\n                    id: v.id,\n                    name: v.name,\n                    price: v.price,\n                    pricePreview: v.price * +factor,\n                }));\n            }),\n        );\n    }\n\n    selectChannel(channelIds: string[]) {\n        this.selectedChannel = this.availableChannels.find(c => c.id === channelIds[0]);\n    }\n\n    assign() {\n        const selectedChannel = this.selectedChannel;\n        if (selectedChannel) {\n            if (!this.isProductVariantMode) {\n                this.dataService.product\n                    .assignProductsToChannel({\n                        channelId: selectedChannel.id,\n                        productIds: this.productIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-product-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            } else if (this.productVariantIds) {\n                this.dataService.product\n                    .assignVariantsToChannel({\n                        channelId: selectedChannel.id,\n                        productVariantIds: this.productVariantIds,\n                        priceFactor: +this.priceFactorControl.value,\n                    })\n                    .subscribe(() => {\n                        this.notificationService.success(_('catalog.assign-variant-to-channel-success'), {\n                            channel: selectedChannel.code,\n                        });\n                        this.resolveWith(true);\n                    });\n            }\n        }\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    private async getTopVariants(take: number): Promise<ProductVariantFragment[]> {\n        const variants: ProductVariantFragment[] = [];\n\n        for (let i = 0; i < this.productIds.length && variants.length < take; i++) {\n            const productVariants = await this.dataService.product\n                .getProduct(this.productIds[i])\n                .mapSingle(({ product }) => {\n                    const _variants = product ? product.variants : [];\n                    return _variants.filter(v =>\n                        this.isProductVariantMode ? this.productVariantIds?.includes(v.id) : true,\n                    );\n                })\n                .toPromise();\n            variants.push(...(productVariants || []));\n        }\n        return variants.slice(0, take);\n    }\n}\n","import { Location } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    BaseDetailComponent,\n    CreateProductInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    FacetWithValues,\n    findTranslation,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductWithVariants,\n    ServerConfigService,\n    TaxCategory,\n    UpdateProductInput,\n    UpdateProductMutation,\n    UpdateProductOptionInput,\n    UpdateProductVariantInput,\n    UpdateProductVariantsMutation,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { unique } from '@vendure/common/lib/unique';\nimport { combineLatest, EMPTY, merge, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    mergeMap,\n    shareReplay,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\nimport { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';\nimport { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CreateProductVariantsConfig } from '../generate-product-variants/generate-product-variants.component';\nimport { VariantAssetChange } from '../product-variants-list/product-variants-list.component';\n\nexport type TabName = 'details' | 'variants';\nexport interface VariantFormValue {\n    id: string;\n    enabled: boolean;\n    sku: string;\n    name: string;\n    price: number;\n    priceWithTax: number;\n    taxCategoryId: string;\n    stockOnHand: number;\n    useGlobalOutOfStockThreshold: boolean;\n    outOfStockThreshold: number;\n    trackInventory: GlobalFlag;\n    facetValueIds: string[];\n    customFields?: any;\n}\n\nexport interface SelectedAssets {\n    assets?: Asset[];\n    featuredAsset?: Asset;\n}\n\n@Component({\n    selector: 'vdr-product-detail',\n    templateUrl: './product-detail.component.html',\n    styleUrls: ['./product-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailComponent\n    extends BaseDetailComponent<ProductWithVariants.Fragment>\n    implements OnInit, OnDestroy {\n    activeTab$: Observable<TabName>;\n    product$: Observable<ProductWithVariants.Fragment>;\n    variants$: Observable<ProductWithVariants.Variants[]>;\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    customFields: CustomFieldConfig[];\n    customVariantFields: CustomFieldConfig[];\n    customOptionGroupFields: CustomFieldConfig[];\n    customOptionFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n    filterInput = new FormControl('');\n    assetChanges: SelectedAssets = {};\n    variantAssetChanges: { [variantId: string]: SelectedAssets } = {};\n    productChannels$: Observable<ProductWithVariants.Channels[]>;\n    facetValues$: Observable<ProductWithVariants.FacetValues[]>;\n    facets$: Observable<FacetWithValues.Fragment[]>;\n    selectedVariantIds: string[] = [];\n    variantDisplayMode: 'card' | 'table' = 'card';\n    createVariantsConfig: CreateProductVariantsConfig = { groups: [], variants: [] };\n    channelPriceIncludesTax$: Observable<boolean>;\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private productDetailService: ProductDetailService,\n        private formBuilder: FormBuilder,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        protected dataService: DataService,\n        private location: Location,\n        private changeDetector: ChangeDetectorRef,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Product');\n        this.customVariantFields = this.getCustomFieldConfig('ProductVariant');\n        this.customOptionGroupFields = this.getCustomFieldConfig('ProductOptionGroup');\n        this.customOptionFields = this.getCustomFieldConfig('ProductOption');\n        this.detailForm = this.formBuilder.group({\n            product: this.formBuilder.group({\n                enabled: true,\n                name: ['', Validators.required],\n                autoUpdateVariantNames: true,\n                slug: '',\n                description: '',\n                facetValueIds: [[]],\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            variants: this.formBuilder.array([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.product$ = this.entity$;\n        const variants$ = this.product$.pipe(map(product => product.variants));\n        const filterTerm$ = this.filterInput.valueChanges.pipe(\n            startWith(''),\n            debounceTime(50),\n            shareReplay(),\n        );\n        this.variants$ = combineLatest(variants$, filterTerm$).pipe(\n            map(([variants, term]) => {\n                return term\n                    ? variants.filter(v => {\n                          const lcTerm = term.toLocaleLowerCase();\n                          return (\n                              v.name.toLocaleLowerCase().includes(term) ||\n                              v.sku.toLocaleLowerCase().includes(term)\n                          );\n                      })\n                    : variants;\n            }),\n        );\n        this.taxCategories$ = this.productDetailService.getTaxCategories().pipe(takeUntil(this.destroy$));\n        this.activeTab$ = this.route.paramMap.pipe(map(qpm => qpm.get('tab') as any));\n\n        // FacetValues are provided initially by the nested array of the\n        // Product entity, but once a fetch to get all Facets is made (as when\n        // opening the FacetValue selector modal), then these additional values\n        // are concatenated onto the initial array.\n        this.facets$ = this.productDetailService.getFacets();\n        const productFacetValues$ = this.product$.pipe(map(product => product.facetValues));\n        const allFacetValues$ = this.facets$.pipe(map(flattenFacetValues));\n        const productGroup = this.getProductFormGroup();\n\n        const formFacetValueIdChanges$ = productGroup.valueChanges.pipe(\n            map(val => val.facetValueIds as string[]),\n            distinctUntilChanged(),\n        );\n        const formChangeFacetValues$ = combineLatest(\n            formFacetValueIdChanges$,\n            productFacetValues$,\n            allFacetValues$,\n        ).pipe(\n            map(([ids, productFacetValues, allFacetValues]) => {\n                const combined = [...productFacetValues, ...allFacetValues];\n                return ids.map(id => combined.find(fv => fv.id === id)).filter(notNullOrUndefined);\n            }),\n        );\n\n        this.facetValues$ = merge(productFacetValues$, formChangeFacetValues$);\n        this.productChannels$ = this.product$.pipe(map(p => p.channels));\n        this.channelPriceIncludesTax$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel.pricesIncludeTax)\n            .pipe(shareReplay(1));\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    navigateToTab(tabName: TabName) {\n        this.location.replaceState(\n            this.router\n                .createUrlTree(['./', { ...this.route.snapshot.params, tab: tabName }], {\n                    queryParamsHandling: 'merge',\n                    relativeTo: this.route,\n                })\n                .toString(),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    assignToChannel() {\n        this.productChannels$\n            .pipe(\n                take(1),\n                switchMap(channels => {\n                    return this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {\n                        size: 'lg',\n                        locals: {\n                            productIds: [this.id],\n                            currentChannelIds: channels.map(c => c.id),\n                        },\n                    });\n                }),\n            )\n            .subscribe();\n    }\n\n    removeFromChannel(channelId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.remove-product-from-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeProductsFromChannel({\n                              channelId,\n                              productIds: [this.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));\n                },\n            );\n    }\n\n    assignVariantToChannel(variant: ProductWithVariants.Variants) {\n        return this.modalService\n            .fromComponent(AssignProductsToChannelDialogComponent, {\n                size: 'lg',\n                locals: {\n                    productIds: [this.id],\n                    productVariantIds: [variant.id],\n                    currentChannelIds: variant.channels.map(c => c.id),\n                },\n            })\n            .subscribe();\n    }\n\n    removeVariantFromChannel({\n        channelId,\n        variant,\n    }: {\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }) {\n        this.modalService\n            .dialog({\n                title: _('catalog.remove-product-variant-from-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('catalog.remove-from-channel'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.product.removeVariantsFromChannel({\n                              channelId,\n                              productVariantIds: [variant.id],\n                          })\n                        : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));\n                },\n                err => {\n                    this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));\n                },\n            );\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['product', 'customFields', name]);\n    }\n\n    assetsChanged(): boolean {\n        return !!Object.values(this.assetChanges).length;\n    }\n\n    variantAssetsChanged(): boolean {\n        return !!Object.keys(this.variantAssetChanges).length;\n    }\n\n    variantAssetChange(event: VariantAssetChange) {\n        this.variantAssetChanges[event.variantId] = event;\n    }\n\n    /**\n     * If creating a new product, automatically generate the slug based on the product name.\n     */\n    updateSlug(nameValue: string) {\n        combineLatest(this.entity$, this.languageCode$)\n            .pipe(take(1))\n            .subscribe(([entity, languageCode]) => {\n                const slugControl = this.detailForm.get(['product', 'slug']);\n                const currentTranslation = findTranslation(entity, languageCode);\n                const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;\n                if (slugControl && slugControl.pristine && currentSlugIsEmpty) {\n                    slugControl.setValue(normalizeString(`${nameValue}`, '-'));\n                }\n            });\n    }\n\n    selectProductFacetValue() {\n        this.displayFacetValueModal().subscribe(facetValueIds => {\n            if (facetValueIds) {\n                const productGroup = this.getProductFormGroup();\n                const currentFacetValueIds = productGroup.value.facetValueIds;\n                productGroup.patchValue({\n                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),\n                });\n                productGroup.markAsDirty();\n            }\n        });\n    }\n\n    updateProductOption(input: UpdateProductOptionInput & { autoUpdate: boolean }) {\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) =>\n                    this.productDetailService.updateProductOption(input, product, languageCode),\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ProductOption',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ProductOption',\n                    });\n                },\n            );\n    }\n\n    removeProductFacetValue(facetValueId: string) {\n        const productGroup = this.getProductFormGroup();\n        const currentFacetValueIds = productGroup.value.facetValueIds;\n        productGroup.patchValue({\n            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),\n        });\n        productGroup.markAsDirty();\n    }\n\n    /**\n     * Opens a dialog to select FacetValues to apply to the select ProductVariants.\n     */\n    selectVariantFacetValue(selectedVariantIds: string[]) {\n        this.displayFacetValueModal()\n            .pipe(withLatestFrom(this.variants$))\n            .subscribe(([facetValueIds, variants]) => {\n                if (facetValueIds) {\n                    for (const variantId of selectedVariantIds) {\n                        const index = variants.findIndex(v => v.id === variantId);\n                        const variant = variants[index];\n                        const existingFacetValueIds = variant ? variant.facetValues.map(fv => fv.id) : [];\n                        const variantFormGroup = this.detailForm.get(['variants', index]);\n                        if (variantFormGroup) {\n                            variantFormGroup.patchValue({\n                                facetValueIds: unique([...existingFacetValueIds, ...facetValueIds]),\n                            });\n                            variantFormGroup.markAsDirty();\n                        }\n                    }\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    variantsToCreateAreValid(): boolean {\n        return (\n            0 < this.createVariantsConfig.variants.length &&\n            this.createVariantsConfig.variants.every(v => {\n                return v.sku !== '';\n            })\n        );\n    }\n\n    private displayFacetValueModal(): Observable<string[] | undefined> {\n        return this.productDetailService.getFacets().pipe(\n            mergeMap(facets =>\n                this.modalService.fromComponent(ApplyFacetDialogComponent, {\n                    size: 'md',\n                    closable: true,\n                    locals: { facets },\n                }),\n            ),\n            map(facetValues => facetValues && facetValues.map(v => v.id)),\n        );\n    }\n\n    create() {\n        const productGroup = this.getProductFormGroup();\n        if (!productGroup.dirty) {\n            return;\n        }\n        combineLatest(this.product$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode]) => {\n                    const newProduct = this.getUpdatedProduct(\n                        product,\n                        productGroup as FormGroup,\n                        languageCode,\n                    ) as CreateProductInput;\n                    return this.productDetailService.createProductWithVariants(\n                        newProduct,\n                        this.createVariantsConfig,\n                        languageCode,\n                    );\n                }),\n            )\n            .subscribe(\n                ({ createProductVariants, productId }) => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Product',\n                    });\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.detailForm.markAsPristine();\n                    this.router.navigate(['../', productId], { relativeTo: this.route });\n                },\n                err => {\n                    // tslint:disable-next-line:no-console\n                    console.error(err);\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.product$, this.languageCode$, this.channelPriceIncludesTax$)\n            .pipe(\n                take(1),\n                mergeMap(([product, languageCode, priceIncludesTax]) => {\n                    const productGroup = this.getProductFormGroup();\n                    let productInput: UpdateProductInput | undefined;\n                    let variantsInput: UpdateProductVariantInput[] | undefined;\n\n                    if (productGroup.dirty || this.assetsChanged()) {\n                        productInput = this.getUpdatedProduct(\n                            product,\n                            productGroup as FormGroup,\n                            languageCode,\n                        ) as UpdateProductInput;\n                    }\n                    const variantsArray = this.detailForm.get('variants');\n                    if ((variantsArray && variantsArray.dirty) || this.variantAssetsChanged()) {\n                        variantsInput = this.getUpdatedProductVariants(\n                            product,\n                            variantsArray as FormArray,\n                            languageCode,\n                            priceIncludesTax,\n                        );\n                    }\n\n                    return this.productDetailService.updateProduct({\n                        product,\n                        languageCode,\n                        autoUpdate:\n                            this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,\n                        productInput,\n                        variantsInput,\n                    });\n                }),\n            )\n            .subscribe(\n                result => {\n                    this.updateSlugAfterSave(result);\n                    this.detailForm.markAsPristine();\n                    this.assetChanges = {};\n                    this.variantAssetChanges = {};\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Product',\n                    });\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n\n    canDeactivate(): boolean {\n        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;\n    }\n\n    /**\n     * Sets the values of the form on changes to the product or current language.\n     */\n    protected setFormValues(product: ProductWithVariants.Fragment, languageCode: LanguageCode) {\n        const currentTranslation = findTranslation(product, languageCode);\n        this.detailForm.patchValue({\n            product: {\n                enabled: product.enabled,\n                name: currentTranslation ? currentTranslation.name : '',\n                slug: currentTranslation ? currentTranslation.slug : '',\n                description: currentTranslation ? currentTranslation.description : '',\n                facetValueIds: product.facetValues.map(fv => fv.id),\n            },\n        });\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['product', 'customFields']) as FormGroup;\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n            const cfProduct = (product as any).customFields || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = fieldDef.type === 'localeString' ? cfCurrentTranslation[key] : cfProduct[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n\n        const variantsFormArray = this.detailForm.get('variants') as FormArray;\n        product.variants.forEach((variant, i) => {\n            const variantTranslation = findTranslation(variant, languageCode);\n            const facetValueIds = variant.facetValues.map(fv => fv.id);\n            const group: VariantFormValue = {\n                id: variant.id,\n                enabled: variant.enabled,\n                sku: variant.sku,\n                name: variantTranslation ? variantTranslation.name : '',\n                price: variant.price,\n                priceWithTax: variant.priceWithTax,\n                taxCategoryId: variant.taxCategory.id,\n                stockOnHand: variant.stockOnHand,\n                useGlobalOutOfStockThreshold: variant.useGlobalOutOfStockThreshold,\n                outOfStockThreshold: variant.outOfStockThreshold,\n                trackInventory: variant.trackInventory,\n                facetValueIds,\n            };\n\n            let variantFormGroup = variantsFormArray.at(i) as FormGroup | undefined;\n            if (variantFormGroup) {\n                variantFormGroup.patchValue(group);\n            } else {\n                variantFormGroup = this.formBuilder.group({\n                    ...group,\n                    facetValueIds: this.formBuilder.control(facetValueIds),\n                });\n                variantsFormArray.insert(i, variantFormGroup);\n            }\n            if (this.customVariantFields.length) {\n                let customFieldsGroup = variantFormGroup.get(['customFields']) as FormGroup | undefined;\n\n                if (!customFieldsGroup) {\n                    customFieldsGroup = this.formBuilder.group(\n                        this.customVariantFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                    );\n                    variantFormGroup.addControl('customFields', customFieldsGroup);\n                }\n\n                for (const fieldDef of this.customVariantFields) {\n                    const key = fieldDef.name;\n                    const value =\n                        fieldDef.type === 'localeString'\n                            ? (variantTranslation as any).customFields[key]\n                            : (variant as any).customFields[key];\n                    const control = customFieldsGroup.get(key);\n                    if (control) {\n                        control.patchValue(value);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Given a product and the value of the detailForm, this method creates an updated copy of the product which\n     * can then be persisted to the API.\n     */\n    private getUpdatedProduct(\n        product: ProductWithVariants.Fragment,\n        productFormGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): UpdateProductInput | CreateProductInput {\n        const updatedProduct = createUpdatedTranslatable({\n            translatable: product,\n            updatedFields: productFormGroup.value,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: product.name || '',\n                slug: product.slug || '',\n                description: product.description || '',\n            },\n        });\n        return {\n            ...updatedProduct,\n            assetIds: this.assetChanges.assets?.map(a => a.id),\n            featuredAssetId: this.assetChanges.featuredAsset?.id,\n            facetValueIds: productFormGroup.value.facetValueIds,\n        } as UpdateProductInput | CreateProductInput;\n    }\n\n    /**\n     * Given an array of product variants and the values from the detailForm, this method creates an new array\n     * which can be persisted to the API.\n     */\n    private getUpdatedProductVariants(\n        product: ProductWithVariants.Fragment,\n        variantsFormArray: FormArray,\n        languageCode: LanguageCode,\n        priceIncludesTax: boolean,\n    ): UpdateProductVariantInput[] {\n        const dirtyVariants = product.variants.filter((v, i) => {\n            const formRow = variantsFormArray.get(i.toString());\n            return formRow && formRow.dirty;\n        });\n        const dirtyVariantValues = variantsFormArray.controls.filter(c => c.dirty).map(c => c.value);\n\n        if (dirtyVariants.length !== dirtyVariantValues.length) {\n            throw new Error(_(`error.product-variant-form-values-do-not-match`));\n        }\n        return dirtyVariants\n            .map((variant, i) => {\n                const formValue: VariantFormValue = dirtyVariantValues[i];\n                const result: UpdateProductVariantInput = createUpdatedTranslatable({\n                    translatable: variant,\n                    updatedFields: formValue,\n                    customFieldConfig: this.customVariantFields,\n                    languageCode,\n                    defaultTranslation: {\n                        languageCode,\n                        name: '',\n                    },\n                });\n                result.taxCategoryId = formValue.taxCategoryId;\n                result.facetValueIds = formValue.facetValueIds;\n                result.price = priceIncludesTax ? formValue.priceWithTax : formValue.price;\n                const assetChanges = this.variantAssetChanges[variant.id];\n                if (assetChanges) {\n                    result.featuredAssetId = assetChanges.featuredAsset?.id;\n                    result.assetIds = assetChanges.assets?.map(a => a.id);\n                }\n                return result;\n            })\n            .filter(notNullOrUndefined);\n    }\n\n    private getProductFormGroup(): FormGroup {\n        return this.detailForm.get('product') as FormGroup;\n    }\n\n    /**\n     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.\n     */\n    private updateSlugAfterSave(results: Array<UpdateProductMutation | UpdateProductVariantsMutation>) {\n        const firstResult = results[0];\n        const slugControl = this.detailForm.get(['product', 'slug']);\n\n        function isUpdateMutation(input: any): input is UpdateProductMutation {\n            return input.hasOwnProperty('updateProduct');\n        }\n\n        if (slugControl && isUpdateMutation(firstResult)) {\n            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });\n        }\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    JobQueueService,\n    JobState,\n    LogicalOperator,\n    ModalService,\n    NotificationService,\n    SearchInput,\n    SearchProducts,\n} from '@vendure/admin-ui/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { delay, map, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\n\nimport { ProductSearchInputComponent } from '../product-search-input/product-search-input.component';\n\n@Component({\n    selector: 'vdr-products-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent\n    extends BaseListComponent<SearchProducts.Query, SearchProducts.Items, SearchProducts.Variables>\n    implements OnInit {\n    searchTerm = '';\n    facetValueIds: string[] = [];\n    groupByProduct = true;\n    facetValues$: Observable<SearchProducts.FacetValues[]>;\n    @ViewChild('productSearchInputComponent', { static: true })\n    private productSearchInput: ProductSearchInputComponent;\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private jobQueueService: JobQueueService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.product.searchProducts(this.searchTerm, ...args).refetchOnChannelChange(),\n            data => data.search,\n            // tslint:disable-next-line:no-shadowed-variable\n            (skip, take) => ({\n                input: {\n                    skip,\n                    take,\n                    term: this.searchTerm,\n                    facetValueIds: this.facetValueIds,\n                    facetValueOperator: LogicalOperator.AND,\n                    groupByProduct: this.groupByProduct,\n                } as SearchInput,\n            }),\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.facetValues$ = this.result$.pipe(map(data => data.search.facetValues));\n        // this.facetValues$ = of([]);\n        this.route.queryParamMap\n            .pipe(\n                map(qpm => qpm.get('q')),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(term => {\n                this.productSearchInput.setSearchTerm(term);\n            });\n\n        const fvids$ = this.route.queryParamMap.pipe(map(qpm => qpm.getAll('fvids')));\n\n        fvids$.pipe(takeUntil(this.destroy$)).subscribe(ids => {\n            this.productSearchInput.setFacetValues(ids);\n        });\n\n        this.facetValues$.pipe(take(1), delay(100), withLatestFrom(fvids$)).subscribe(([__, ids]) => {\n            this.productSearchInput.setFacetValues(ids);\n        });\n    }\n\n    setSearchTerm(term: string) {\n        this.searchTerm = term;\n        this.setQueryParam({ q: term || null, page: 1 });\n        this.refresh();\n    }\n\n    setFacetValueIds(ids: string[]) {\n        this.facetValueIds = ids;\n        this.setQueryParam({ fvids: ids, page: 1 });\n        this.refresh();\n    }\n\n    rebuildSearchIndex() {\n        this.dataService.product.reindex().subscribe(({ reindex }) => {\n            this.notificationService.info(_('catalog.reindexing'));\n            this.jobQueueService.addJob(reindex.id, job => {\n                if (job.state === JobState.COMPLETED) {\n                    const time = new Intl.NumberFormat().format(job.duration || 0);\n                    this.notificationService.success(_('catalog.reindex-successful'), {\n                        count: job.result.indexedItemCount,\n                        time,\n                    });\n                    this.refresh();\n                } else {\n                    this.notificationService.error(_('catalog.reindex-error'));\n                }\n            });\n        });\n    }\n\n    deleteProduct(productId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.product.deleteProduct(productId) : EMPTY)),\n                // Short delay to allow the product to be removed from the search index before\n                // refreshing.\n                delay(500),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Product',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Product',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CreateProductOptionGroup,\n    CreateProductOptionInput,\n    CurrencyCode,\n    DataService,\n    DeactivateAware,\n    getDefaultUiLanguage,\n    GetProductVariantOptions,\n    LanguageCode,\n    ModalService,\n    NotificationService,\n    ProductOptionGroupWithOptionsFragment,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { pick } from '@vendure/common/lib/pick';\nimport { generateAllCombinations, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, forkJoin, Observable, of } from 'rxjs';\nimport { filter, map, mergeMap, switchMap } from 'rxjs/operators';\n\nimport { ProductDetailService } from '../../providers/product-detail/product-detail.service';\n\nexport class GeneratedVariant {\n    isDefault: boolean;\n    options: Array<{ name: string; id?: string }>;\n    productVariantId?: string;\n    enabled: boolean;\n    existing: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n\n    constructor(config: Partial<GeneratedVariant>) {\n        for (const key of Object.keys(config)) {\n            this[key] = config[key];\n        }\n    }\n}\n\n@Component({\n    selector: 'vdr-product-variants-editor',\n    templateUrl: './product-variants-editor.component.html',\n    styleUrls: ['./product-variants-editor.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ProductVariantsEditorComponent implements OnInit, DeactivateAware {\n    formValueChanged = false;\n    generatedVariants: GeneratedVariant[] = [];\n    optionGroups: Array<{\n        id?: string;\n        isNew: boolean;\n        name: string;\n        values: Array<{\n            id?: string;\n            name: string;\n            locked: boolean;\n        }>;\n    }>;\n    product: GetProductVariantOptions.Product;\n    currencyCode: CurrencyCode;\n    private languageCode: LanguageCode;\n\n    constructor(\n        private route: ActivatedRoute,\n        private dataService: DataService,\n        private productDetailService: ProductDetailService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        this.initOptionsAndVariants();\n        this.languageCode =\n            (this.route.snapshot.paramMap.get('lang') as LanguageCode) || getDefaultUiLanguage();\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n    }\n\n    onFormChanged(variantInfo: GeneratedVariant) {\n        this.formValueChanged = true;\n        variantInfo.enabled = true;\n    }\n\n    canDeactivate(): boolean {\n        return !this.formValueChanged;\n    }\n\n    getVariantsToAdd() {\n        return this.generatedVariants.filter(v => !v.existing && v.enabled);\n    }\n\n    getVariantName(variant: GeneratedVariant) {\n        return variant.options.length === 0\n            ? _('catalog.default-variant')\n            : variant.options.map(o => o.name).join(' ');\n    }\n\n    addOption() {\n        this.optionGroups.push({\n            isNew: true,\n            name: '',\n            values: [],\n        });\n    }\n\n    generateVariants() {\n        const groups = this.optionGroups.map(g => g.values);\n        const previousVariants = this.generatedVariants;\n        const generatedVariantFactory = (\n            isDefault: boolean,\n            options: GeneratedVariant['options'],\n            existingVariant?: GetProductVariantOptions.Variants,\n        ): GeneratedVariant => {\n            const prototype = this.getVariantPrototype(options, previousVariants);\n            return new GeneratedVariant({\n                enabled: false,\n                existing: !!existingVariant,\n                productVariantId: existingVariant?.id,\n                isDefault,\n                options,\n                price: existingVariant?.price ?? prototype.price,\n                sku: existingVariant?.sku ?? prototype.sku,\n                stock: existingVariant?.stockOnHand ?? prototype.stock,\n            });\n        };\n        this.generatedVariants = groups.length\n            ? generateAllCombinations(groups).map(options => {\n                  const existingVariant = this.product.variants.find(v =>\n                      this.optionsAreEqual(v.options, options),\n                  );\n                  return generatedVariantFactory(false, options, existingVariant);\n              })\n            : [generatedVariantFactory(true, [], this.product.variants[0])];\n    }\n\n    /**\n     * Returns one of the existing variants to base the newly-generated variant's\n     * details off.\n     */\n    private getVariantPrototype(\n        options: GeneratedVariant['options'],\n        previousVariants: GeneratedVariant[],\n    ): Pick<GeneratedVariant, 'sku' | 'price' | 'stock'> {\n        const variantsWithSimilarOptions = previousVariants.filter(v =>\n            options.map(o => o.name).filter(name => v.options.map(o => o.name).includes(name)),\n        );\n        if (variantsWithSimilarOptions.length) {\n            return pick(previousVariants[0], ['sku', 'price', 'stock']);\n        }\n        return {\n            sku: '',\n            price: 0,\n            stock: 0,\n        };\n    }\n\n    deleteVariant(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-product-variant'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.productDetailService.deleteProductVariant(id, this.product.id) : EMPTY,\n                ),\n                switchMap(() => this.reFetchProduct(null)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ProductVariant',\n                    });\n                    this.initOptionsAndVariants();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ProductVariant',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const newOptionGroups = this.optionGroups\n            .filter(og => og.isNew)\n            .map(og => ({\n                name: og.name,\n                values: [],\n            }));\n\n        this.confirmDeletionOfDefault()\n            .pipe(\n                mergeMap(() =>\n                    this.productDetailService.createProductOptionGroups(newOptionGroups, this.languageCode),\n                ),\n                mergeMap(createdOptionGroups => this.addOptionGroupsToProduct(createdOptionGroups)),\n                mergeMap(createdOptionGroups => this.addNewOptionsToGroups(createdOptionGroups)),\n                mergeMap(groupsIds => this.fetchOptionGroups(groupsIds)),\n                mergeMap(groups => this.createNewProductVariants(groups)),\n                mergeMap(res => this.deleteDefaultVariant(res.createProductVariants)),\n                mergeMap(variants => this.reFetchProduct(variants)),\n            )\n            .subscribe({\n                next: variants => {\n                    this.formValueChanged = false;\n                    this.notificationService.success(_('catalog.created-new-variants-success'), {\n                        count: variants.length,\n                    });\n                    this.initOptionsAndVariants();\n                },\n            });\n    }\n\n    private confirmDeletionOfDefault(): Observable<boolean> {\n        if (this.hasOnlyDefaultVariant(this.product)) {\n            return this.modalService\n                .dialog({\n                    title: _('catalog.confirm-adding-options-delete-default-title'),\n                    body: _('catalog.confirm-adding-options-delete-default-body'),\n                    buttons: [\n                        { type: 'secondary', label: _('common.cancel') },\n                        { type: 'danger', label: _('catalog.delete-default-variant'), returnValue: true },\n                    ],\n                })\n                .pipe(\n                    mergeMap(res => {\n                        return res === true ? of(true) : EMPTY;\n                    }),\n                );\n        } else {\n            return of(true);\n        }\n    }\n\n    private hasOnlyDefaultVariant(product: GetProductVariantOptions.Product): boolean {\n        return product.variants.length === 1 && product.optionGroups.length === 0;\n    }\n\n    private addOptionGroupsToProduct(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<CreateProductOptionGroup.CreateProductOptionGroup[]> {\n        if (createdOptionGroups.length) {\n            return forkJoin(\n                createdOptionGroups.map(optionGroup => {\n                    return this.dataService.product.addOptionGroupToProduct({\n                        productId: this.product.id,\n                        optionGroupId: optionGroup.id,\n                    });\n                }),\n            ).pipe(map(() => createdOptionGroups));\n        } else {\n            return of([]);\n        }\n    }\n\n    private addNewOptionsToGroups(\n        createdOptionGroups: CreateProductOptionGroup.CreateProductOptionGroup[],\n    ): Observable<string[]> {\n        const newOptions: CreateProductOptionInput[] = this.optionGroups\n            .map(og => {\n                const createdGroup = createdOptionGroups.find(cog => cog.name === og.name);\n                const productOptionGroupId = createdGroup ? createdGroup.id : og.id;\n                if (!productOptionGroupId) {\n                    throw new Error('Could not get a productOptionGroupId');\n                }\n                return og.values\n                    .filter(v => !v.locked)\n                    .map(v => ({\n                        productOptionGroupId,\n                        code: normalizeString(v.name, '-'),\n                        translations: [{ name: v.name, languageCode: this.languageCode }],\n                    }));\n            })\n            .reduce((flat, options) => [...flat, ...options], []);\n\n        const allGroupIds = [\n            ...createdOptionGroups.map(g => g.id),\n            ...this.optionGroups.map(g => g.id).filter(notNullOrUndefined),\n        ];\n\n        if (newOptions.length) {\n            return forkJoin(newOptions.map(input => this.dataService.product.addOptionToGroup(input))).pipe(\n                map(() => allGroupIds),\n            );\n        } else {\n            return of(allGroupIds);\n        }\n    }\n\n    private fetchOptionGroups(groupsIds: string[]): Observable<ProductOptionGroupWithOptionsFragment[]> {\n        return forkJoin(\n            groupsIds.map(id =>\n                this.dataService.product\n                    .getProductOptionGroup(id)\n                    .mapSingle(data => data.productOptionGroup)\n                    .pipe(filter(notNullOrUndefined)),\n            ),\n        );\n    }\n\n    private createNewProductVariants(groups: ProductOptionGroupWithOptionsFragment[]) {\n        const options = groups\n            .filter(notNullOrUndefined)\n            .map(og => og.options)\n            .reduce((flat, o) => [...flat, ...o], []);\n        const variants = this.generatedVariants\n            .filter(v => v.enabled && !v.existing)\n            .map(v => ({\n                price: v.price,\n                sku: v.sku,\n                stock: v.stock,\n                optionIds: v.options\n                    .map(name => options.find(o => o.name === name.name))\n                    .filter(notNullOrUndefined)\n                    .map(o => o.id),\n            }));\n        return this.productDetailService.createProductVariants(\n            this.product,\n            variants,\n            options,\n            this.languageCode,\n        );\n    }\n\n    private deleteDefaultVariant<T>(input: T): Observable<T> {\n        if (this.hasOnlyDefaultVariant(this.product)) {\n            // If the default single product variant has been replaced by multiple variants,\n            // delete the original default variant.\n            return this.dataService.product\n                .deleteProductVariant(this.product.variants[0].id)\n                .pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    private reFetchProduct<T>(input: T): Observable<T> {\n        // Re-fetch the Product to force an update to the view.\n        const id = this.route.snapshot.paramMap.get('id');\n        if (id) {\n            return this.dataService.product.getProduct(id).single$.pipe(map(() => input));\n        } else {\n            return of(input);\n        }\n    }\n\n    initOptionsAndVariants() {\n        this.dataService.product\n            // tslint:disable-next-line:no-non-null-assertion\n            .getProductVariantsOptions(this.route.snapshot.paramMap.get('id')!)\n            // tslint:disable-next-line:no-non-null-assertion\n            .mapSingle(({ product }) => product!)\n            .subscribe(p => {\n                this.product = p;\n                this.optionGroups = p.optionGroups.map(og => {\n                    return {\n                        id: og.id,\n                        isNew: false,\n                        name: og.name,\n                        values: og.options.map(o => ({\n                            id: o.id,\n                            name: o.name,\n                            locked: true,\n                        })),\n                    };\n                });\n                this.generateVariants();\n            });\n    }\n\n    private optionsAreEqual(a: Array<{ name: string }>, b: Array<{ name: string }>): boolean {\n        function toOptionString(o: Array<{ name: string }>) {\n            return o\n                .map(x => x.name)\n                .sort()\n                .join('|');\n        }\n\n        return toOptionString(a) === toOptionString(b);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Asset, AssetType, BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetResolver extends BaseEntityResolver<Asset.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Asset' as const,\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                type: AssetType.IMAGE,\n                fileSize: 0,\n                mimeType: '',\n                width: 0,\n                height: 0,\n                source: '',\n                preview: '',\n                focalPoint: null,\n            },\n            id => dataService.product.getAsset(id).mapStream(data => data.asset),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Collection, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CollectionResolver extends BaseEntityResolver<Collection.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Collection' as 'Collection',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                isPrivate: false,\n                description: '',\n                featuredAsset: null,\n                assets: [],\n                translations: [],\n                filters: [],\n                parent: {} as any,\n                children: null,\n            },\n            id => dataService.collection.getCollection(id).mapStream(data => data.collection),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { FacetWithValues } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FacetResolver extends BaseEntityResolver<FacetWithValues.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Facet' as 'Facet',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                isPrivate: false,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                code: '',\n                translations: [],\n                values: [],\n            },\n            (id) => dataService.facet.getFacet(id).mapStream((data) => data.facet),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ProductWithVariants } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductResolver extends BaseEntityResolver<ProductWithVariants.Fragment> {\n    constructor(dataService: DataService, router: Router) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                enabled: true,\n                languageCode: getDefaultUiLanguage(),\n                name: '',\n                slug: '',\n                featuredAsset: null,\n                assets: [],\n                description: '',\n                translations: [],\n                optionGroups: [],\n                facetValues: [],\n                variants: [],\n                channels: [],\n            },\n            (id) =>\n                dataService.product\n                    .getProduct(id)\n                    .refetchOnChannelChange()\n                    .mapStream((data) => data.product),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetProductVariantOptions } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProductVariantsResolver extends BaseEntityResolver<GetProductVariantOptions.Product> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Product' as 'Product',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                optionGroups: [],\n                variants: [],\n            },\n            id => dataService.product.getProductVariantsOptions(id).mapStream(data => data.product),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Asset,\n    CanDeactivateDetailGuard,\n    Collection,\n    createResolveData,\n    detailBreadcrumb,\n    FacetWithValues,\n    ProductWithVariants,\n} from '@vendure/admin-ui/core';\nimport { map } from 'rxjs/operators';\n\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { AssetResolver } from './providers/routing/asset-resolver';\nimport { CollectionResolver } from './providers/routing/collection-resolver';\nimport { FacetResolver } from './providers/routing/facet-resolver';\nimport { ProductResolver } from './providers/routing/product-resolver';\nimport { ProductVariantsResolver } from './providers/routing/product-variants-resolver';\n\nexport const catalogRoutes: Route[] = [\n    {\n        path: 'products',\n        component: ProductListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.products'),\n        },\n    },\n    {\n        path: 'products/:id',\n        component: ProductDetailComponent,\n        resolve: createResolveData(ProductResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productBreadcrumb,\n        },\n    },\n    {\n        path: 'products/:id/manage-variants',\n        component: ProductVariantsEditorComponent,\n        resolve: createResolveData(ProductVariantsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: productVariantEditorBreadcrumb,\n        },\n    },\n    {\n        path: 'facets',\n        component: FacetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.facets'),\n        },\n    },\n    {\n        path: 'facets/:id',\n        component: FacetDetailComponent,\n        resolve: createResolveData(FacetResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: facetBreadcrumb,\n        },\n    },\n    {\n        path: 'collections',\n        component: CollectionListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.collections'),\n        },\n    },\n    {\n        path: 'collections/:id',\n        component: CollectionDetailComponent,\n        resolve: createResolveData(CollectionResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: collectionBreadcrumb,\n        },\n    },\n    {\n        path: 'assets',\n        component: AssetListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.assets'),\n        },\n    },\n    {\n        path: 'assets/:id',\n        component: AssetDetailComponent,\n        resolve: createResolveData(AssetResolver),\n        data: {\n            breadcrumb: assetBreadcrumb,\n        },\n    },\n];\n\nexport function productBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ProductWithVariants.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.products',\n        getName: product => product.name,\n        route: 'products',\n    });\n}\n\nexport function productVariantEditorBreadcrumb(data: any, params: any) {\n    return data.entity.pipe(\n        map((entity: any) => {\n            return [\n                {\n                    label: _('breadcrumb.products'),\n                    link: ['../', 'products'],\n                },\n                {\n                    label: `${entity.name}`,\n                    link: ['../', 'products', params.id, { tab: 'variants' }],\n                },\n                {\n                    label: _('breadcrumb.manage-variants'),\n                    link: ['manage-variants'],\n                },\n            ];\n        }),\n    );\n}\n\nexport function facetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<FacetWithValues.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.facets',\n        getName: facet => facet.name,\n        route: 'facets',\n    });\n}\n\nexport function collectionBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Collection.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.collections',\n        getName: collection => collection.name,\n        route: 'collections',\n    });\n}\n\nexport function assetBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Asset.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.assets',\n        getName: asset => asset.name,\n        route: 'assets',\n    });\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    startWith,\n    switchMap,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\n\nimport { GetCollectionContents } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-collection-contents',\n    templateUrl: './collection-contents.component.html',\n    styleUrls: ['./collection-contents.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionContentsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() collectionId: string;\n    @ContentChild(TemplateRef, { static: true }) headerTemplate: TemplateRef<any>;\n\n    contents$: Observable<GetCollectionContents.Items[]>;\n    contentsTotalItems$: Observable<number>;\n    contentsItemsPerPage$: Observable<number>;\n    contentsCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    private collectionIdChange$ = new BehaviorSubject<string>('');\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private route: ActivatedRoute, private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.contentsCurrentPage$ = this.route.paramMap.pipe(\n            map(qpm => qpm.get('contentsPage')),\n            map(page => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.contentsItemsPerPage$ = this.route.paramMap.pipe(\n            map(qpm => qpm.get('contentsPerPage')),\n            map(perPage => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        const collection$ = combineLatest(\n            this.collectionIdChange$,\n            this.contentsCurrentPage$,\n            this.contentsItemsPerPage$,\n            filterTerm$,\n            this.refresh$,\n        ).pipe(\n            takeUntil(this.destroy$),\n            switchMap(([id, currentPage, itemsPerPage, filterTerm]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                if (id) {\n                    return this.dataService.collection\n                        .getCollectionContents(id, take, skip, filterTerm)\n                        .mapSingle(data => data.collection);\n                } else {\n                    return of(null);\n                }\n            }),\n        );\n\n        this.contents$ = collection$.pipe(map(result => (result ? result.productVariants.items : [])));\n        this.contentsTotalItems$ = collection$.pipe(\n            map(result => (result ? result.productVariants.totalItems : 0)),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('collectionId' in changes) {\n            this.collectionIdChange$.next(changes.collectionId.currentValue);\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('contentsPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('contentsPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\n            relativeTo: this.route,\n            queryParamsHandling: 'merge',\n        });\n    }\n}\n","export type HasParent = { id: string; parent?: { id: string } | null };\nexport type TreeNode<T extends HasParent> = T & { children: Array<TreeNode<T>>; expanded: boolean };\nexport type RootNode<T extends HasParent> = { id?: string; children: Array<TreeNode<T>> };\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(nodes: T[], currentState?: RootNode<T>): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n    const currentStateMap = treeToMap(currentState);\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map(n => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            mappedElem.expanded = currentStateMap.get(id)?.expanded ?? false;\n            const parent = mappedElem.parent;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parent.id];\n            if (!parentIsRoot) {\n                if (mappedArr[parent.id]) {\n                    mappedArr[parent.id].children.push(mappedElem);\n                } else {\n                    mappedArr[parent.id] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-non-null-assertion\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parent!.id : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n\n/**\n * Converts an existing tree (as generated by the arrayToTree function) into a flat\n * Map. This is used to persist certain states (e.g. `expanded`) when re-building the\n * tree.\n */\nfunction treeToMap<T extends HasParent>(tree?: RootNode<T>): Map<string, TreeNode<T>> {\n    const nodeMap = new Map<string, TreeNode<T>>();\n    function visit(node: TreeNode<T>) {\n        nodeMap.set(node.id, node);\n        node.children.forEach(visit);\n    }\n    if (tree) {\n        visit(tree as TreeNode<T>);\n    }\n    return nodeMap;\n}\n","import { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { Collection } from '@vendure/admin-ui/core';\n\nimport { arrayToTree, HasParent, RootNode } from './array-to-tree';\n\nexport type RearrangeEvent = { collectionId: string; parentId: string; index: number };\nexport type CollectionPartial = Pick<Collection.Fragment, 'id' | 'parent' | 'name'>;\n\n@Component({\n    selector: 'vdr-collection-tree',\n    templateUrl: 'collection-tree.component.html',\n    styleUrls: ['./collection-tree.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeComponent implements OnChanges {\n    @Input() collections: CollectionPartial[];\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    @Output() rearrange = new EventEmitter<RearrangeEvent>();\n    @Output() deleteCollection = new EventEmitter<string>();\n    collectionTree: RootNode<CollectionPartial>;\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('collections' in changes && this.collections) {\n            this.collectionTree = arrayToTree(this.collections, this.collectionTree);\n        }\n    }\n\n    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        const item = event.item.data as CollectionPartial;\n        const newParent = event.container.data;\n        const newParentId = newParent.id;\n        if (newParentId == null) {\n            throw new Error(`Could not determine the ID of the root Collection`);\n        }\n        this.rearrange.emit({\n            collectionId: item.id,\n            parentId: newParentId,\n            index: event.currentIndex,\n        });\n    }\n\n    onMove(event: RearrangeEvent) {\n        this.rearrange.emit(event);\n    }\n\n    onDelete(id: string) {\n        this.deleteCollection.emit(id);\n    }\n\n    private isRootNode<T extends HasParent>(node: T | RootNode<T>): node is RootNode<T> {\n        return !node.hasOwnProperty('parent');\n    }\n}\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    Optional,\n    SimpleChanges,\n    SkipSelf,\n} from '@angular/core';\nimport { DataService, Permission } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\nimport { RootNode, TreeNode } from './array-to-tree';\nimport { CollectionPartial, CollectionTreeComponent } from './collection-tree.component';\n\n@Component({\n    selector: 'vdr-collection-tree-node',\n    templateUrl: './collection-tree-node.component.html',\n    styleUrls: ['./collection-tree-node.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CollectionTreeNodeComponent implements OnInit, OnChanges {\n    depth = 0;\n    parentName: string;\n    @Input() collectionTree: TreeNode<CollectionPartial>;\n    @Input() activeCollectionId: string;\n    @Input() expandAll = false;\n    hasUpdatePermission$: Observable<boolean>;\n    hasDeletePermission$: Observable<boolean>;\n\n    constructor(\n        @SkipSelf() @Optional() private parent: CollectionTreeNodeComponent,\n        private root: CollectionTreeComponent,\n        private dataService: DataService,\n    ) {\n        if (parent) {\n            this.depth = parent.depth + 1;\n        }\n    }\n\n    ngOnInit() {\n        this.parentName = this.collectionTree.name || '<root>';\n        const permissions$ = this.dataService.client\n            .userStatus()\n            .mapStream(data => data.userStatus.permissions)\n            .pipe(shareReplay(1));\n        this.hasUpdatePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.UpdateCatalog) || perms.includes(Permission.UpdateCollection),\n            ),\n        );\n        this.hasDeletePermission$ = permissions$.pipe(\n            map(\n                perms =>\n                    perms.includes(Permission.DeleteCatalog) || perms.includes(Permission.DeleteCollection),\n            ),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const expandAllChange = changes['expandAll'];\n        if (expandAllChange) {\n            if (expandAllChange.previousValue === true && expandAllChange.currentValue === false) {\n                this.collectionTree.children.forEach(c => (c.expanded = false));\n            }\n        }\n    }\n\n    trackByFn(index: number, item: CollectionPartial) {\n        return item.id;\n    }\n\n    getMoveListItems(collection: CollectionPartial): Array<{ path: string; id: string }> {\n        const visit = (\n            node: TreeNode<any>,\n            parentPath: string[],\n            output: Array<{ path: string; id: string }>,\n        ) => {\n            if (node.id !== collection.id) {\n                const path = parentPath.concat(node.name);\n                const parentId = collection.parent && collection.parent.id;\n                if (node.id !== parentId) {\n                    output.push({ path: path.slice(1).join(' / ') || 'root', id: node.id });\n                }\n                node.children.forEach(child => visit(child, path, output));\n            }\n            return output;\n        };\n        return visit(this.root.collectionTree, [], []);\n    }\n\n    move(collection: CollectionPartial, parentId: string) {\n        this.root.onMove({\n            index: 0,\n            parentId,\n            collectionId: collection.id,\n        });\n    }\n\n    moveUp(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex - 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    moveDown(collection: CollectionPartial, currentIndex: number) {\n        if (!collection.parent) {\n            return;\n        }\n        this.root.onMove({\n            index: currentIndex + 1,\n            parentId: collection.parent.id,\n            collectionId: collection.id,\n        });\n    }\n\n    drop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>) {\n        moveItemInArray(this.collectionTree.children, event.previousIndex, event.currentIndex);\n        this.root.onDrop(event);\n    }\n\n    delete(id: string) {\n        this.root.onDelete(id);\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { generateAllCombinations } from '@vendure/common/lib/shared-utils';\n\nimport { CurrencyCode } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { OptionValueInputComponent } from '../option-value-input/option-value-input.component';\n\nconst DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';\nexport type CreateVariantValues = {\n    optionValues: string[];\n    enabled: boolean;\n    sku: string;\n    price: number;\n    stock: number;\n};\nexport type CreateProductVariantsConfig = {\n    groups: Array<{ name: string; values: string[] }>;\n    variants: CreateVariantValues[];\n};\n\n@Component({\n    selector: 'vdr-generate-product-variants',\n    templateUrl: './generate-product-variants.component.html',\n    styleUrls: ['./generate-product-variants.component.scss'],\n})\nexport class GenerateProductVariantsComponent implements OnInit {\n    @Output() variantsChange = new EventEmitter<CreateProductVariantsConfig>();\n    optionGroups: Array<{ name: string; values: Array<{ name: string; locked: boolean }> }> = [];\n    currencyCode: CurrencyCode;\n    variants: Array<{ id: string; values: string[] }>;\n    variantFormValues: { [id: string]: CreateVariantValues } = {};\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.dataService.settings.getActiveChannel().single$.subscribe(data => {\n            this.currencyCode = data.activeChannel.currencyCode;\n        });\n\n        this.generateVariants();\n    }\n\n    addOption() {\n        this.optionGroups.push({ name: '', values: [] });\n    }\n\n    removeOption(name: string) {\n        this.optionGroups = this.optionGroups.filter(g => g.name !== name);\n        this.generateVariants();\n    }\n\n    generateVariants() {\n        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);\n        const groups = totalValuesCount\n            ? this.optionGroups.map(g => g.values.map(v => v.name))\n            : [[DEFAULT_VARIANT_CODE]];\n        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));\n\n        this.variants.forEach(variant => {\n            if (!this.variantFormValues[variant.id]) {\n                this.variantFormValues[variant.id] = {\n                    optionValues: variant.values,\n                    enabled: true,\n                    price: this.copyFromDefault(variant.id, 'price', 0),\n                    sku: this.copyFromDefault(variant.id, 'sku', ''),\n                    stock: this.copyFromDefault(variant.id, 'stock', 0),\n                };\n            }\n        });\n        this.onFormChange();\n    }\n\n    trackByFn(index: number, variant: { name: string; values: string[] }) {\n        return variant.values.join('|');\n    }\n\n    handleEnter(event: KeyboardEvent, optionValueInputComponent: OptionValueInputComponent) {\n        event.preventDefault();\n        event.stopPropagation();\n        optionValueInputComponent.focus();\n    }\n\n    onFormChange() {\n        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);\n        this.variantsChange.emit({\n            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),\n            variants: variantsToCreate,\n        });\n    }\n\n    private copyFromDefault<T extends keyof CreateVariantValues>(\n        variantId: string,\n        prop: T,\n        value: CreateVariantValues[T],\n    ): CreateVariantValues[T] {\n        return variantId !== DEFAULT_VARIANT_CODE\n            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]\n            : value;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    Provider,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { unique } from '@vendure/common/lib/unique';\n\nexport const OPTION_VALUE_INPUT_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => OptionValueInputComponent),\n    multi: true,\n};\n\n@Component({\n    selector: 'vdr-option-value-input',\n    templateUrl: './option-value-input.component.html',\n    styleUrls: ['./option-value-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [OPTION_VALUE_INPUT_VALUE_ACCESSOR],\n})\nexport class OptionValueInputComponent implements ControlValueAccessor {\n    @Input() groupName = '';\n    @ViewChild('textArea', { static: true }) textArea: ElementRef<HTMLTextAreaElement>;\n    options: Array<{ name: string; locked: boolean }>;\n    disabled = false;\n    input = '';\n    isFocussed = false;\n    lastSelected = false;\n    onChangeFn: (value: any) => void;\n    onTouchFn: (value: any) => void;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    registerOnChange(fn: any): void {\n        this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchFn = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    }\n\n    writeValue(obj: any): void {\n        this.options = obj || [];\n    }\n\n    focus() {\n        this.textArea.nativeElement.focus();\n    }\n\n    removeOption(option: { name: string; locked: boolean }) {\n        if (!option.locked) {\n            this.options = this.options.filter(o => o.name !== option.name);\n            this.onChangeFn(this.options);\n        }\n    }\n\n    handleKey(event: KeyboardEvent) {\n        switch (event.key) {\n            case ',':\n            case 'Enter':\n                this.addOptionValue();\n                event.preventDefault();\n                break;\n            case 'Backspace':\n                if (this.lastSelected) {\n                    this.removeLastOption();\n                    this.lastSelected = false;\n                } else if (this.input === '') {\n                    this.lastSelected = true;\n                }\n                break;\n            default:\n                this.lastSelected = false;\n        }\n    }\n\n    handleBlur() {\n        this.isFocussed = false;\n        this.addOptionValue();\n    }\n\n    private addOptionValue() {\n        this.options = unique([...this.options, ...this.parseInputIntoOptions(this.input)]);\n        this.input = '';\n        this.onChangeFn(this.options);\n    }\n\n    private parseInputIntoOptions(input: string): Array<{ name: string; locked: boolean }> {\n        return input\n            .split(/[,\\n]/)\n            .map(s => s.trim())\n            .filter(s => s !== '')\n            .map(s => ({ name: s, locked: false }));\n    }\n\n    private removeLastOption() {\n        if (!this.options[this.options.length - 1].locked) {\n            this.options = this.options.slice(0, this.options.length - 1);\n        }\n    }\n}\n","import { CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { ViewportRuler } from '@angular/cdk/overlay';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport {\n    Asset,\n    AssetPickerDialogComponent,\n    AssetPreviewDialogComponent,\n    ModalService,\n    Permission,\n} from '@vendure/admin-ui/core';\nimport { unique } from '@vendure/common/lib/unique';\n\nimport { CollectionDetailComponent } from '../collection-detail/collection-detail.component';\n\nexport interface AssetChange {\n    assets: Asset[];\n    featuredAsset: Asset | undefined;\n}\n\n/**\n * A component which displays the Assets associated with a product, and allows assets to be removed and\n * added, and for the featured asset to be set.\n *\n * Note: rather complex code for drag drop is due to a limitation of the default CDK implementation\n * which is addressed by a work-around from here: https://github.com/angular/components/issues/13372#issuecomment-483998378\n */\n@Component({\n    selector: 'vdr-product-assets',\n    templateUrl: './product-assets.component.html',\n    styleUrls: ['./product-assets.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAssetsComponent implements AfterViewInit {\n    @Input('assets') set assetsSetter(val: Asset[]) {\n        // create a new non-readonly array of assets\n        this.assets = val.slice();\n    }\n    @Input() featuredAsset: Asset | undefined;\n    @HostBinding('class.compact')\n    @Input()\n    compact = false;\n    @Output() change = new EventEmitter<AssetChange>();\n    @ViewChild('dlg', { static: false, read: CdkDropListGroup }) listGroup: CdkDropListGroup<CdkDropList>;\n    @ViewChild('dl', { static: false, read: CdkDropList }) placeholder: CdkDropList;\n\n    public target: CdkDropList | null;\n    public targetIndex: number;\n    public source: CdkDropList | null;\n    public sourceIndex: number;\n    public dragIndex: number;\n    public activeContainer;\n    public assets: Asset[] = [];\n\n    private readonly updateCollectionPermissions = [Permission.UpdateCatalog, Permission.UpdateCollection];\n    private readonly updateProductPermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];\n\n    get updatePermissions(): Permission[] {\n        if (this.collectionDetailComponent) {\n            return this.updateCollectionPermissions;\n        } else {\n            return this.updateProductPermissions;\n        }\n    }\n\n    constructor(\n        private modalService: ModalService,\n        private changeDetector: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private collectionDetailComponent?: CollectionDetailComponent,\n    ) {}\n\n    ngAfterViewInit() {\n        const phElement = this.placeholder.element.nativeElement;\n\n        phElement.style.display = 'none';\n        if (phElement.parentElement) {\n            phElement.parentElement.removeChild(phElement);\n        }\n    }\n\n    selectAssets() {\n        this.modalService\n            .fromComponent(AssetPickerDialogComponent, {\n                size: 'xl',\n            })\n            .subscribe(result => {\n                if (result && result.length) {\n                    this.assets = unique(this.assets.concat(result), 'id');\n                    if (!this.featuredAsset) {\n                        this.featuredAsset = result[0];\n                    }\n                    this.emitChangeEvent(this.assets, this.featuredAsset);\n                    this.changeDetector.markForCheck();\n                }\n            });\n    }\n\n    setAsFeatured(asset: Asset) {\n        this.featuredAsset = asset;\n        this.emitChangeEvent(this.assets, asset);\n    }\n\n    isFeatured(asset: Asset): boolean {\n        return !!this.featuredAsset && this.featuredAsset.id === asset.id;\n    }\n\n    previewAsset(asset: Asset) {\n        this.modalService\n            .fromComponent(AssetPreviewDialogComponent, {\n                size: 'xl',\n                closable: true,\n                locals: { asset },\n            })\n            .subscribe();\n    }\n\n    removeAsset(asset: Asset) {\n        this.assets = this.assets.filter(a => a.id !== asset.id);\n        if (this.featuredAsset && this.featuredAsset.id === asset.id) {\n            this.featuredAsset = this.assets.length > 0 ? this.assets[0] : undefined;\n        }\n        this.emitChangeEvent(this.assets, this.featuredAsset);\n    }\n\n    private emitChangeEvent(assets: Asset[], featuredAsset: Asset | undefined) {\n        this.change.emit({\n            assets,\n            featuredAsset,\n        });\n    }\n\n    dragMoved(e: CdkDragMove) {\n        const point = this.getPointerPositionOnPage(e.event);\n\n        this.listGroup._items.forEach(dropList => {\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\n                this.activeContainer = dropList;\n                return;\n            }\n        });\n    }\n\n    dropListDropped() {\n        if (!this.target || !this.source) {\n            return;\n        }\n\n        const phElement = this.placeholder.element.nativeElement;\n        // tslint:disable-next-line:no-non-null-assertion\n        const parent = phElement.parentElement!;\n\n        phElement.style.display = 'none';\n\n        parent.removeChild(phElement);\n        parent.appendChild(phElement);\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\n\n        this.target = null;\n        this.source = null;\n\n        if (this.sourceIndex !== this.targetIndex) {\n            moveItemInArray(this.assets, this.sourceIndex, this.targetIndex);\n            this.emitChangeEvent(this.assets, this.featuredAsset);\n        }\n    }\n\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\n        if (drop === this.placeholder) {\n            return true;\n        }\n        if (drop !== this.activeContainer) {\n            return false;\n        }\n\n        const phElement = this.placeholder.element.nativeElement;\n        const sourceElement = drag.dropContainer.element.nativeElement;\n        const dropElement = drop.element.nativeElement;\n        const children = dropElement.parentElement && dropElement.parentElement.children;\n\n        const dragIndex = __indexOf(children, this.source ? phElement : sourceElement);\n        const dropIndex = __indexOf(children, dropElement);\n\n        if (!this.source) {\n            this.sourceIndex = dragIndex;\n            this.source = drag.dropContainer;\n\n            phElement.style.width = sourceElement.clientWidth + 'px';\n            phElement.style.height = sourceElement.clientHeight + 'px';\n\n            if (sourceElement.parentElement) {\n                sourceElement.parentElement.removeChild(sourceElement);\n            }\n        }\n\n        this.targetIndex = dropIndex;\n        this.target = drop;\n\n        phElement.style.display = '';\n        if (dropElement.parentElement) {\n            dropElement.parentElement.insertBefore(\n                phElement,\n                dropIndex > dragIndex ? dropElement.nextSibling : dropElement,\n            );\n        }\n\n        this.placeholder._dropListRef.enter(\n            drag._dragRef,\n            drag.element.nativeElement.offsetLeft,\n            drag.element.nativeElement.offsetTop,\n        );\n        return false;\n    };\n\n    /** Determines the point of the page that was touched by the user. */\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        const point = __isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\n\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top,\n        };\n    }\n}\n\nfunction __indexOf(collection: HTMLCollection | null, node: HTMLElement) {\n    if (!collection) {\n        return -1;\n    }\n    return Array.prototype.indexOf.call(collection, node);\n}\n\n/** Determines whether an event is a touch event. */\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n}\n\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\n    const { top, bottom, left, right } = dropList.element.nativeElement.getBoundingClientRect();\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { NgSelectComponent, SELECTION_MODEL_FACTORY } from '@ng-select/ng-select';\nimport { SearchProducts, SingleSearchSelectionModelFactory } from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\n\n@Component({\n    selector: 'vdr-product-search-input',\n    templateUrl: './product-search-input.component.html',\n    styleUrls: ['./product-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: SELECTION_MODEL_FACTORY, useValue: SingleSearchSelectionModelFactory }],\n})\nexport class ProductSearchInputComponent {\n    @Input() facetValueResults: SearchProducts.FacetValues[];\n    @Output() searchTermChange = new EventEmitter<string>();\n    @Output() facetValueChange = new EventEmitter<string[]>();\n    @ViewChild('selectComponent', { static: true }) private selectComponent: NgSelectComponent;\n    private lastTerm = '';\n    private lastFacetValueIds: string[] = [];\n\n    setSearchTerm(term: string | null) {\n        if (term) {\n            this.selectComponent.select({ label: term, value: { label: term } });\n        } else {\n            const currentTerm = this.selectComponent.selectedItems.find(i => !this.isFacetValueItem(i.value));\n            if (currentTerm) {\n                this.selectComponent.unselect(currentTerm);\n            }\n        }\n    }\n\n    setFacetValues(ids: string[]) {\n        const items = this.selectComponent.items;\n\n        this.selectComponent.selectedItems.forEach(item => {\n            if (this.isFacetValueItem(item.value) && !ids.includes(item.value.facetValue.id)) {\n                this.selectComponent.unselect(item);\n            }\n        });\n\n        ids.map(id => {\n            return items.find(item => this.isFacetValueItem(item) && item.facetValue.id === id);\n        })\n            .filter(notNullOrUndefined)\n            .forEach(item => {\n                const isSelected = this.selectComponent.selectedItems.find(i => {\n                    const val = i.value;\n                    if (this.isFacetValueItem(val)) {\n                        return val.facetValue.id === item.facetValue.id;\n                    }\n                    return false;\n                });\n                if (!isSelected) {\n                    this.selectComponent.select({ label: '', value: item });\n                }\n            });\n    }\n\n    filterFacetResults = (term: string, item: SearchProducts.FacetValues | { label: string }) => {\n        if (!this.isFacetValueItem(item)) {\n            return false;\n        }\n        return (\n            item.facetValue.name.toLowerCase().startsWith(term.toLowerCase()) ||\n            item.facetValue.facet.name.toLowerCase().startsWith(term.toLowerCase())\n        );\n    };\n\n    onSelectChange(selectedItems: Array<SearchProducts.FacetValues | { label: string }>) {\n        if (!Array.isArray(selectedItems)) {\n            selectedItems = [selectedItems];\n        }\n        const searchTermItem = selectedItems.find(item => !this.isFacetValueItem(item)) as\n            | { label: string }\n            | undefined;\n        const searchTerm = searchTermItem ? searchTermItem.label : '';\n\n        const facetValueIds = selectedItems.filter(this.isFacetValueItem).map(i => i.facetValue.id);\n\n        if (searchTerm !== this.lastTerm) {\n            this.searchTermChange.emit(searchTerm);\n            this.lastTerm = searchTerm;\n        }\n        if (this.lastFacetValueIds.join(',') !== facetValueIds.join(',')) {\n            this.facetValueChange.emit(facetValueIds);\n            this.lastFacetValueIds = facetValueIds;\n        }\n    }\n\n    addTagFn(item: any) {\n        return { label: item };\n    }\n\n    isSearchHeaderSelected(): boolean {\n        return this.selectComponent.itemsList.markedIndex === -1;\n    }\n\n    private isFacetValueItem = (input: unknown): input is SearchProducts.FacetValues => {\n        return typeof input === 'object' && !!input && input.hasOwnProperty('facetValue');\n    };\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    LanguageCode,\n    ProductVariant,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { createUpdatedTranslatable } from '@vendure/admin-ui/core';\nimport { Dialog } from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\n\n@Component({\n    selector: 'vdr-update-product-option-dialog',\n    templateUrl: './update-product-option-dialog.component.html',\n    styleUrls: ['./update-product-option-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpdateProductOptionDialogComponent\n    implements Dialog<UpdateProductOptionInput & { autoUpdate: boolean }>, OnInit {\n    resolveWith: (result?: UpdateProductOptionInput & { autoUpdate: boolean }) => void;\n    updateVariantName = true;\n    // Provided by caller\n    productOption: ProductVariant.Options;\n    activeLanguage: LanguageCode;\n    name: string;\n    code: string;\n    customFields: CustomFieldConfig[];\n    codeInputTouched = false;\n    customFieldsForm: FormGroup;\n\n    ngOnInit(): void {\n        const currentTranslation = this.productOption.translations.find(\n            t => t.languageCode === this.activeLanguage,\n        );\n        this.name = currentTranslation?.name ?? '';\n        this.code = this.productOption.code;\n        this.customFieldsForm = new FormGroup({});\n        if (this.customFields) {\n            const cfCurrentTranslation =\n                (currentTranslation && (currentTranslation as any).customFields) || {};\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? cfCurrentTranslation[key]\n                        : (this.productOption as any).customFields[key];\n                this.customFieldsForm.addControl(fieldDef.name, new FormControl(value));\n            }\n        }\n    }\n\n    update() {\n        const result = createUpdatedTranslatable({\n            translatable: this.productOption,\n            languageCode: this.activeLanguage,\n            updatedFields: {\n                code: this.code,\n                name: this.name,\n                customFields: this.customFieldsForm.value,\n            },\n            customFieldConfig: this.customFields,\n            defaultTranslation: {\n                languageCode: this.activeLanguage,\n                name: '',\n            },\n        });\n        this.resolveWith({ ...result, autoUpdate: this.updateVariantName });\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    updateCode(nameValue: string) {\n        if (!this.codeInputTouched && !this.productOption.code) {\n            this.code = normalizeString(nameValue, '-');\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport {\n    CustomFieldConfig,\n    DataService,\n    FacetValue,\n    FacetWithValues,\n    flattenFacetValues,\n    GlobalFlag,\n    LanguageCode,\n    ModalService,\n    Permission,\n    ProductOptionFragment,\n    ProductVariant,\n    ProductWithVariants,\n    TaxCategory,\n    UpdateProductOptionInput,\n} from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AssetChange } from '../product-assets/product-assets.component';\nimport { SelectedAssets, VariantFormValue } from '../product-detail/product-detail.component';\nimport { UpdateProductOptionDialogComponent } from '../update-product-option-dialog/update-product-option-dialog.component';\n\nexport interface VariantAssetChange extends AssetChange {\n    variantId: string;\n}\n\n@Component({\n    selector: 'vdr-product-variants-list',\n    templateUrl: './product-variants-list.component.html',\n    styleUrls: ['./product-variants-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsListComponent implements OnChanges, OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() taxCategories: TaxCategory[];\n    @Input() facets: FacetWithValues.Fragment[];\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() customFields: CustomFieldConfig[];\n    @Input() customOptionFields: CustomFieldConfig[];\n    @Input() activeLanguage: LanguageCode;\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    @Output() assignToChannel = new EventEmitter<ProductWithVariants.Variants>();\n    @Output() removeFromChannel = new EventEmitter<{\n        channelId: string;\n        variant: ProductWithVariants.Variants;\n    }>();\n    @Output() assetChange = new EventEmitter<VariantAssetChange>();\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() selectFacetValueClick = new EventEmitter<string[]>();\n    @Output() updateProductOption = new EventEmitter<UpdateProductOptionInput & { autoUpdate: boolean }>();\n    selectedVariantIds: string[] = [];\n    pagination: PaginationInstance = {\n        currentPage: 1,\n        itemsPerPage: 10,\n    };\n    formGroupMap = new Map<string, FormGroup>();\n    GlobalFlag = GlobalFlag;\n    globalTrackInventory: boolean;\n    globalOutOfStockThreshold: number;\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private facetValues: FacetValue.Fragment[];\n    private subscription: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private modalService: ModalService,\n        private dataService: DataService,\n    ) {}\n\n    ngOnInit() {\n        this.dataService.settings.getGlobalSettings('cache-first').single$.subscribe(({ globalSettings }) => {\n            this.globalTrackInventory = globalSettings.trackInventory;\n            this.globalOutOfStockThreshold = globalSettings.outOfStockThreshold;\n            this.changeDetector.markForCheck();\n        });\n        this.subscription = this.formArray.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n\n        this.subscription.add(\n            this.formArray.valueChanges\n                .pipe(\n                    map(value => value.length),\n                    debounceTime(1),\n                    distinctUntilChanged(),\n                )\n                .subscribe(() => {\n                    this.buildFormGroupMap();\n                }),\n        );\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('facets' in changes && !!changes['facets'].currentValue) {\n            this.facetValues = flattenFacetValues(this.facets);\n        }\n        if ('variants' in changes) {\n            if (changes['variants'].currentValue?.length !== changes['variants'].previousValue?.length) {\n                this.pagination.currentPage = 1;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    trackById(index: number, item: ProductWithVariants.Variants) {\n        return item.id;\n    }\n\n    inventoryIsNotTracked(formGroup: FormGroup): boolean {\n        const trackInventory = formGroup.get('trackInventory')?.value;\n        return (\n            trackInventory === GlobalFlag.FALSE ||\n            (trackInventory === GlobalFlag.INHERIT && this.globalTrackInventory === false)\n        );\n    }\n\n    getTaxCategoryName(group: FormGroup): string {\n        const control = group.get(['taxCategoryId']);\n        if (control && this.taxCategories) {\n            const match = this.taxCategories.find(t => t.id === control.value);\n            return match ? match.name : '';\n        }\n        return '';\n    }\n\n    getSaleableStockLevel(variant: ProductWithVariants.Variants) {\n        const effectiveOutOfStockThreshold = variant.useGlobalOutOfStockThreshold\n            ? this.globalOutOfStockThreshold\n            : variant.outOfStockThreshold;\n        return variant.stockOnHand - variant.stockAllocated - effectiveOutOfStockThreshold;\n    }\n\n    areAllSelected(): boolean {\n        return !!this.variants && this.selectedVariantIds.length === this.variants.length;\n    }\n\n    onAssetChange(variantId: string, event: AssetChange) {\n        this.assetChange.emit({\n            variantId,\n            ...event,\n        });\n        const index = this.variants.findIndex(v => v.id === variantId);\n        this.formArray.at(index).markAsDirty();\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectedVariantIds = [];\n        } else {\n            this.selectedVariantIds = this.variants.map(v => v.id);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    toggleSelectVariant(variantId: string) {\n        const index = this.selectedVariantIds.indexOf(variantId);\n        if (-1 < index) {\n            this.selectedVariantIds.splice(index, 1);\n        } else {\n            this.selectedVariantIds.push(variantId);\n        }\n        this.selectionChange.emit(this.selectedVariantIds);\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        if (group) {\n            const translation =\n                group?.translations.find(t => t.languageCode === this.activeLanguage) ??\n                group.translations[0];\n            return translation.name;\n        }\n    }\n\n    optionName(option: ProductOptionFragment) {\n        const translation =\n            option.translations.find(t => t.languageCode === this.activeLanguage) ?? option.translations[0];\n        return translation.name;\n    }\n\n    pendingFacetValues(variant: ProductWithVariants.Variants) {\n        if (this.facets) {\n            const formFacetValueIds = this.getFacetValueIds(variant.id);\n            const variantFacetValueIds = variant.facetValues.map(fv => fv.id);\n            return formFacetValueIds\n                .filter(x => !variantFacetValueIds.includes(x))\n                .map(id => this.facetValues.find(fv => fv.id === id))\n                .filter(notNullOrUndefined);\n        } else {\n            return [];\n        }\n    }\n\n    existingFacetValues(variant: ProductWithVariants.Variants) {\n        const formFacetValueIds = this.getFacetValueIds(variant.id);\n        const intersection = [...formFacetValueIds].filter(x =>\n            variant.facetValues.map(fv => fv.id).includes(x),\n        );\n        return intersection\n            .map(id => variant.facetValues.find(fv => fv.id === id))\n            .filter(notNullOrUndefined);\n    }\n\n    removeFacetValue(variant: ProductWithVariants.Variants, facetValueId: string) {\n        const formGroup = this.formGroupMap.get(variant.id);\n        if (formGroup) {\n            const newValue = (formGroup.value as VariantFormValue).facetValueIds.filter(\n                id => id !== facetValueId,\n            );\n            formGroup.patchValue({\n                facetValueIds: newValue,\n            });\n            formGroup.markAsDirty();\n        }\n    }\n\n    isVariantSelected(variantId: string): boolean {\n        return -1 < this.selectedVariantIds.indexOf(variantId);\n    }\n\n    editOption(option: ProductVariant.Options) {\n        this.modalService\n            .fromComponent(UpdateProductOptionDialogComponent, {\n                size: 'md',\n                locals: {\n                    productOption: option,\n                    activeLanguage: this.activeLanguage,\n                    customFields: this.customOptionFields,\n                },\n            })\n            .subscribe(result => {\n                if (result) {\n                    this.updateProductOption.emit(result);\n                }\n            });\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    private getFacetValueIds(id: string): string[] {\n        const formValue: VariantFormValue = this.formGroupMap.get(id)?.value;\n        return formValue.facetValueIds;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { Permission, ProductWithVariants } from '@vendure/admin-ui/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { SelectedAssets } from '../product-detail/product-detail.component';\n\n@Component({\n    selector: 'vdr-product-variants-table',\n    templateUrl: './product-variants-table.component.html',\n    styleUrls: ['./product-variants-table.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsTableComponent implements OnInit, OnDestroy {\n    @Input('productVariantsFormArray') formArray: FormArray;\n    @Input() variants: ProductWithVariants.Variants[];\n    @Input() channelPriceIncludesTax: boolean;\n    @Input() optionGroups: ProductWithVariants.OptionGroups[];\n    @Input() pendingAssetChanges: { [variantId: string]: SelectedAssets };\n    formGroupMap = new Map<string, FormGroup>();\n    readonly updatePermission = [Permission.UpdateCatalog, Permission.UpdateProduct];\n    private subscription: Subscription;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.subscription = this.formArray.valueChanges\n            .pipe(\n                map(value => value.length),\n                debounceTime(1),\n                distinctUntilChanged(),\n            )\n            .subscribe(() => {\n                this.buildFormGroupMap();\n            });\n\n        this.buildFormGroupMap();\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    getFeaturedAsset(variant: ProductWithVariants.Variants) {\n        return this.pendingAssetChanges[variant.id]?.featuredAsset || variant.featuredAsset;\n    }\n\n    optionGroupName(optionGroupId: string): string | undefined {\n        const group = this.optionGroups.find(g => g.id === optionGroupId);\n        return group && group.name;\n    }\n\n    private buildFormGroupMap() {\n        this.formGroupMap.clear();\n        for (const controlGroup of this.formArray.controls) {\n            this.formGroupMap.set(controlGroup.value.id, controlGroup as FormGroup);\n        }\n        this.changeDetector.markForCheck();\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-variant-price-detail',\n    templateUrl: './variant-price-detail.component.html',\n    styleUrls: ['./variant-price-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantPriceDetailComponent implements OnInit, OnChanges {\n    @Input() priceIncludesTax: boolean;\n    @Input() price: number;\n    @Input() currencyCode: string;\n    @Input() taxCategoryId: string;\n\n    grossPrice$: Observable<number>;\n    taxRate$: Observable<number>;\n\n    private priceChange$ = new BehaviorSubject<number>(0);\n    private taxCategoryIdChange$ = new BehaviorSubject<string>('');\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const taxRates$ = this.dataService.settings\n            .getTaxRates(999, 0, 'cache-first')\n            .mapStream(data => data.taxRates.items);\n        const activeChannel$ = this.dataService.settings\n            .getActiveChannel('cache-first')\n            .refetchOnChannelChange()\n            .mapStream(data => data.activeChannel);\n\n        this.taxRate$ = combineLatest(activeChannel$, taxRates$, this.taxCategoryIdChange$).pipe(\n            map(([channel, taxRates, taxCategoryId]) => {\n                const defaultTaxZone = channel.defaultTaxZone;\n                if (!defaultTaxZone) {\n                    return 0;\n                }\n                const applicableRate = taxRates.find(\n                    taxRate => taxRate.zone.id === defaultTaxZone.id && taxRate.category.id === taxCategoryId,\n                );\n\n                if (!applicableRate) {\n                    return 0;\n                }\n                return applicableRate.value;\n            }),\n        );\n\n        this.grossPrice$ = combineLatest(this.taxRate$, this.priceChange$).pipe(\n            map(([taxRate, price]) => {\n                return Math.round(price * ((100 + taxRate) / 100));\n            }),\n        );\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('price' in changes) {\n            this.priceChange$.next(changes.price.currentValue);\n        }\n        if ('taxCategoryId' in changes) {\n            this.taxCategoryIdChange$.next(changes.taxCategoryId.currentValue);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { catalogRoutes } from './catalog.routes';\nimport { ApplyFacetDialogComponent } from './components/apply-facet-dialog/apply-facet-dialog.component';\nimport { AssetDetailComponent } from './components/asset-detail/asset-detail.component';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssignProductsToChannelDialogComponent } from './components/assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';\nimport { CollectionContentsComponent } from './components/collection-contents/collection-contents.component';\nimport { CollectionDetailComponent } from './components/collection-detail/collection-detail.component';\nimport { CollectionListComponent } from './components/collection-list/collection-list.component';\nimport { CollectionTreeNodeComponent } from './components/collection-tree/collection-tree-node.component';\nimport { CollectionTreeComponent } from './components/collection-tree/collection-tree.component';\nimport { FacetDetailComponent } from './components/facet-detail/facet-detail.component';\nimport { FacetListComponent } from './components/facet-list/facet-list.component';\nimport { GenerateProductVariantsComponent } from './components/generate-product-variants/generate-product-variants.component';\nimport { OptionValueInputComponent } from './components/option-value-input/option-value-input.component';\nimport { ProductAssetsComponent } from './components/product-assets/product-assets.component';\nimport { ProductDetailComponent } from './components/product-detail/product-detail.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { ProductSearchInputComponent } from './components/product-search-input/product-search-input.component';\nimport { ProductVariantsEditorComponent } from './components/product-variants-editor/product-variants-editor.component';\nimport { ProductVariantsListComponent } from './components/product-variants-list/product-variants-list.component';\nimport { ProductVariantsTableComponent } from './components/product-variants-table/product-variants-table.component';\nimport { UpdateProductOptionDialogComponent } from './components/update-product-option-dialog/update-product-option-dialog.component';\nimport { VariantPriceDetailComponent } from './components/variant-price-detail/variant-price-detail.component';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(catalogRoutes)],\n    exports: [],\n    declarations: [\n        ProductListComponent,\n        ProductDetailComponent,\n        FacetListComponent,\n        FacetDetailComponent,\n        GenerateProductVariantsComponent,\n        ProductVariantsListComponent,\n        ApplyFacetDialogComponent,\n        AssetListComponent,\n        ProductAssetsComponent,\n        VariantPriceDetailComponent,\n        CollectionListComponent,\n        CollectionDetailComponent,\n        CollectionTreeComponent,\n        CollectionTreeNodeComponent,\n        CollectionContentsComponent,\n        ProductVariantsTableComponent,\n        ProductSearchInputComponent,\n        OptionValueInputComponent,\n        UpdateProductOptionDialogComponent,\n        ProductVariantsEditorComponent,\n        AssignProductsToChannelDialogComponent,\n        AssetDetailComponent,\n    ],\n})\nexport class CatalogModule {}\n"]}