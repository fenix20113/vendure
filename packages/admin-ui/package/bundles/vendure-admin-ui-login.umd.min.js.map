{"version":3,"sources":["../../src/lib/login/src/components/login/login.component.ts","../../src/lib/login/src/providers/login.guard.ts","../../src/lib/login/src/login.routes.ts","../../src/lib/login/src/login.module.ts"],"names":["LoginComponent","authService","router","this","username","password","rememberMe","version","ADMIN_UI_VERSION","brand","getAppConfig","hideVendureBranding","hideVersion","prototype","logIn","_this","errorMessage","undefined","subscribe","result","__typename","redirect","getRedirectRoute","navigateByUrl","message","redirectTo","re","RegExp","AUTH_REDIRECT_PARAM","redirectToParam","window","location","search","match","length","atob","decodeURIComponent","e","Component","args","selector","template","AuthService","Router","LoginGuard","canActivate","route","checkAuthenticatedStatus","pipe","map","authenticated","navigate","Injectable","providedIn","loginRoutes","path","component","pathMatch","NgModule","imports","SharedModule","RouterModule","forChild","exports","declarations"],"mappings":"4nBAmBI,SAAAA,EAAoBC,EAAkCC,GAAlCC,KAAAF,YAAAA,EAAkCE,KAAAD,OAAAA,EATtDC,KAAAC,SAAW,GACXD,KAAAE,SAAW,GACXF,KAAAG,YAAa,EACbH,KAAAI,QAAUC,EAAAA,iBAEVL,KAAAM,MAAQC,EAAAA,eAAeD,MACvBN,KAAAQ,oBAAsBD,EAAAA,eAAeC,oBACrCR,KAAAS,YAAcF,EAAAA,eAAeE,mBAI7BZ,EAAAa,UAAAC,MAAA,WAAA,IAAAC,EAAAZ,KACIA,KAAKa,kBAAeC,EACpBd,KAAKF,YAAYa,MAAMX,KAAKC,SAAUD,KAAKE,SAAUF,KAAKG,YAAYY,WAAU,SAAAC,GAC5E,OAAQA,EAAOC,YACX,IAAK,cACD,IAAMC,EAAWN,EAAKO,mBACtBP,EAAKb,OAAOqB,cAAcF,GAAsB,KAChD,MACJ,IAAK,0BACL,IAAK,0BACDN,EAAKC,aAAeG,EAAOK,aAUnCxB,EAAAa,UAAAS,iBAAA,WACJ,IAAIG,EACEC,EAAK,IAAIC,OAAUC,EAAAA,oBAAmB,SAC5C,IACI,IAAMC,EAAkBC,OAAOC,SAASC,OAAOC,MAAMP,GACjDG,GAAmB,EAAIA,EAAgBK,SACvCT,EAAaU,KAAKC,mBAAmBP,EAAgB,MAE3D,MAAOQ,IAGT,OAAOZ,4BAhDda,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVC,SAAA,uhGAJuBC,EAAAA,mBADlBC,EAAAA,2BCYL,SAAAC,EAAoB1C,EAAwBD,GAAxBE,KAAAD,OAAAA,EAAwBC,KAAAF,YAAAA,SAE5C2C,EAAA/B,UAAAgC,YAAA,SAAYC,GAAZ,IAAA/B,EAAAZ,KACI,OAAOA,KAAKF,YAAY8C,2BAA2BC,KAC/CC,EAAAA,KAAI,SAAAC,GAIA,OAHIA,GACAnC,EAAKb,OAAOiD,SAAS,CAAC,OAElBD,2KAZvBE,EAAAA,WAAUb,KAAA,CAAC,CACRc,WAAY,oDAT8BV,EAAAA,cACrCD,EAAAA,mBCGIY,EAAsB,CAC/B,CACIC,KAAM,GACNC,UAAWxD,EACXyD,UAAW,OACXZ,YAAa,CAACD,OCEtB,iCALCc,EAAAA,SAAQnB,KAAA,CAAC,CACNoB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aAAaC,SAASR,IAC9CS,QAAS,GACTC,aAAc,CAAChE","sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ADMIN_UI_VERSION, AuthService, AUTH_REDIRECT_PARAM, getAppConfig } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    username = '';\n    password = '';\n    rememberMe = false;\n    version = ADMIN_UI_VERSION;\n    errorMessage: string | undefined;\n    brand = getAppConfig().brand;\n    hideVendureBranding = getAppConfig().hideVendureBranding;\n    hideVersion = getAppConfig().hideVersion;\n\n    constructor(private authService: AuthService, private router: Router) {}\n\n    logIn(): void {\n        this.errorMessage = undefined;\n        this.authService.logIn(this.username, this.password, this.rememberMe).subscribe(result => {\n            switch (result.__typename) {\n                case 'CurrentUser':\n                    const redirect = this.getRedirectRoute();\n                    this.router.navigateByUrl(redirect ? redirect : '/');\n                    break;\n                case 'InvalidCredentialsError':\n                case 'NativeAuthStrategyError':\n                    this.errorMessage = result.message;\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Attempts to read a redirect param from the current url and parse it into a\n     * route from which the user was redirected after a 401 error.\n     */\n    private getRedirectRoute(): string | undefined {\n        let redirectTo: string | undefined;\n        const re = new RegExp(`${AUTH_REDIRECT_PARAM}=(.*)`);\n        try {\n            const redirectToParam = window.location.search.match(re);\n            if (redirectToParam && 1 < redirectToParam.length) {\n                redirectTo = atob(decodeURIComponent(redirectToParam[1]));\n            }\n        } catch (e) {\n            // ignore\n        }\n        return redirectTo;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * This guard prevents loggen-in users from navigating to the login screen.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class LoginGuard implements CanActivate {\n    constructor(private router: Router, private authService: AuthService) {}\n\n    canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n        return this.authService.checkAuthenticatedStatus().pipe(\n            map(authenticated => {\n                if (authenticated) {\n                    this.router.navigate(['/']);\n                }\n                return !authenticated;\n            }),\n        );\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { LoginGuard } from './providers/login.guard';\n\nexport const loginRoutes: Routes = [\n    {\n        path: '',\n        component: LoginComponent,\n        pathMatch: 'full',\n        canActivate: [LoginGuard],\n    },\n];\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { loginRoutes } from './login.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(loginRoutes)],\n    exports: [],\n    declarations: [LoginComponent],\n})\nexport class LoginModule {}\n"]}