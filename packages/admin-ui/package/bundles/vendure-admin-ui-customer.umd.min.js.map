{"version":3,"sources":["../../src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","../../src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","../../src/lib/customer/src/components/address-card/address-card.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","../../src/lib/customer/src/components/customer-detail/customer-detail.component.ts","../../src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","../../src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","../../src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","../../src/lib/customer/src/components/customer-history/customer-history.component.ts","../../src/lib/customer/src/components/customer-list/customer-list.component.ts","../../src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","../../src/lib/customer/src/providers/routing/customer-resolver.ts","../../src/lib/customer/src/customer.routes.ts","../../src/lib/customer/src/customer.module.ts"],"names":["AddCustomerToGroupDialogComponent","dataService","this","selectedCustomerIds","fetchGroupMembers$","BehaviorSubject","skip","take","filterTerm","prototype","ngOnInit","_this","customerResult$","pipe","switchMap","_a","customer","getCustomerList","mapStream","res","customers","customers$","map","items","customersTotal$","totalItems","cancel","resolveWith","add","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DataService","AddressDetailDialogComponent","changeDetector","availableCountries","addressForm","valueChanges","subscribe","markForCheck","save","ChangeDetectorRef","AddressCardComponent","modalService","editable","setAsDefaultShipping","EventEmitter","setAsDefaultBilling","dataDependenciesPopulated","get","value","filter","editAddress","ngOnChanges","changes","customFields","next","getCountryName","countryCode","match","find","c","code","name","setAsDefaultBillingAddress","emit","id","markAsDirty","setAsDefaultShippingAddress","fromComponent","locals","size","closable","ModalService","Input","Output","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__rest","s","e","t","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__values","o","Symbol","iterator","m","done","__read","n","r","ar","push","error","__spread","arguments","concat","SelectCustomerGroupDialogComponent","selectedGroupIds","groups$","getCustomerGroupList","customerGroups","CustomerDetailComponent","route","router","serverConfigService","formBuilder","notificationService","_super","fetchHistory","Subject","addressDefaultsUpdated","ordersPerPage","currentOrdersPage","orderListUpdates$","getCustomFieldConfig","addressCustomFields","detailForm","group","title","firstName","Validators","required","lastName","phoneNumber","emailAddress","email","password","reduce","hash","field","assign","_d","addresses","FormArray","init","availableCountries$","settings","getAvailableCountries","mapSingle","result","countries","shareReplay","customerWithUpdates$","entity$","merge","orders$","orders","ordersCount$","history$","startWith","getCustomerHistory","sort","createdAt","SortOrder","DESC","data","history","ngOnDestroy","destroy","complete","customFieldIsSet","getAddressFormControls","controls","setDefaultBillingAddressId","defaultBillingAddressId","setDefaultShippingAddressId","defaultShippingAddressId","addAddress","addressFormArray","newAddress","fullName","company","streetLine1","streetLine2","city","province","postalCode","defaultShippingAddress","defaultBillingAddress","customFieldsGroup","_e","_f","fieldDef","addControl","FormControl","setOrderItemsPerPage","itemsPerPage","fetchOrdersList","setOrderCurrentPage","page","customerForm","formValue","createCustomer","__typename","success","_","entity","notify","message","translationVars","type","duration","markAsPristine","navigate","relativeTo","mergeMap","saveOperations","dirty","updateCustomer","_g","addressControl","address","input","updateCustomerAddress","createCustomerAddress","forkJoin","data_1","data_1_1","err","addToGroup","groupIds","from","EMPTY","concatMap","groupId","addCustomersToGroup","customerCount","groupName","getCustomer","single$","removeFromGroup","dialog","buttons","label","returnValue","response","removeCustomersFromGroup","addNoteToCustomer","note","updateNote","entry","EditNoteDialogComponent","displayPrivacyControls","updateCustomerNote","noteId","deleteNote","body","deleteCustomerNote","setFormValues","customerGroup","patchValue","addressesArray","_h","_c","rest","addressGroup","country","_j","e_5","_k","key","control","setControl","_l","_m","_b","notNullOrUndefined","BaseDetailComponent","ActivatedRoute","Router","ServerConfigService","FormBuilder","NotificationService","CustomerGroupDetailDialogComponent","CustomerGroupListComponent","refreshActiveGroupMembers$","undefined","activeGroupId$","paramMap","pm","distinctUntilChanged","tap","listIsEmpty$","groups","activeGroup$","combineLatest","activeGroupId","g","membersResult$","activeGroup","getCustomerGroupWithCustomers","contains","of","members$","membersTotal$","createCustomerGroup","customerIds","delete","deleteCustomerGroup","DeletionResult","DELETED","errorMessage","update","updateCustomerGroup","closeMembers","params","snapshot","contents","queryParamsHandling","verticalAlign","mapTo","CustomerGroupMemberListComponent","selectedMemberIds","selectionChange","fetchParamsChange","filterTermControl","refresh$","destroy$","isMemberSelected","member","membersCurrentPage$","qpm","membersItemsPerPage$","perPage","filterTerm$","debounceTime","setContentsPageNumber","takeUntil","currentPage","setParam","setContentsItemsPerPage","refresh","areAllSelected","members","toggleSelectAll","v","toggleSelectMember","includes","CustomerHistoryComponent","addNote","HistoryEntryType","getDisplayType","CUSTOMER_VERIFIED","CUSTOMER_EMAIL_UPDATE_VERIFIED","CUSTOMER_PASSWORD_RESET_VERIFIED","CUSTOMER_REGISTERED","CUSTOMER_REMOVED_FROM_GROUP","getTimelineIcon","CUSTOMER_NOTE","CUSTOMER_ADDED_TO_GROUP","isFeatured","getName","administrator","CustomerListComponent","emailSearchTerm","lastNameSearchTerm","setQueryFn","_i","apply","refetchOnChannelChange","options","deleteCustomer","BaseListComponent","CustomerResolver","updatedAt","user","BaseEntityResolver","Injectable","providedIn","breadcrumb","ɵ1","customerBreadcrumb","ɵ2","customerRoutes","path","component","pathMatch","ɵ0","resolve","createResolveData","canDeactivate","CanDeactivateDetailGuard","detailBreadcrumb","breadcrumbKey","NgModule","imports","SharedModule","RouterModule","forChild","declarations","CustomerStatusLabelComponent","exports"],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-add-customer-to-group-dialog',\n    templateUrl: './add-customer-to-group-dialog.component.html',\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    group: GetCustomerGroups.Items;\n    route: ActivatedRoute;\n    selectedCustomerIds: string[] = [];\n    customers$: Observable<GetCustomerList.Items[]>;\n    customersTotal$: Observable<number>;\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 10,\n        filterTerm: '',\n    });\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const customerResult$ = this.fetchGroupMembers$.pipe(\n            switchMap(({ skip, take, filterTerm }) => {\n                return this.dataService.customer\n                    .getCustomerList(take, skip, filterTerm)\n                    .mapStream((res) => res.customers);\n            }),\n        );\n\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedCustomerIds);\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-address-detail-dialog',\n    templateUrl: './address-detail-dialog.component.html',\n    styleUrls: ['./address-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\n    addressForm: FormGroup;\n    customFields: CustomFieldConfig;\n    availableCountries: GetAvailableCountries.Items[] = [];\n    resolveWith: (result?: FormGroup) => void;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.addressForm);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-address-card',\n    templateUrl: './address-card.component.html',\n    styleUrls: ['./address-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressCardComponent implements OnInit, OnChanges {\n    @Input() addressForm: FormGroup;\n    @Input() customFields: CustomFieldConfig;\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\n    @Input() isDefaultBilling: string;\n    @Input() isDefaultShipping: string;\n    @Input() editable = true;\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\n        // Make the address dialog display automatically if there is no address line\n        // as is the case when adding a new address.\n        if (!streetLine1.value) {\n            this.dataDependenciesPopulated\n                .pipe(\n                    filter(value => value),\n                    take(1),\n                )\n                .subscribe(() => {\n                    this.editAddress();\n                });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.customFields != null && this.availableCountries != null) {\n            this.dataDependenciesPopulated.next(true);\n        }\n    }\n\n    getCountryName(countryCode: string) {\n        if (!this.availableCountries) {\n            return '';\n        }\n        const match = this.availableCountries.find(c => c.code === countryCode);\n        return match ? match.name : '';\n    }\n\n    setAsDefaultBillingAddress() {\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    setAsDefaultShippingAddress() {\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    editAddress() {\n        this.modalService\n            .fromComponent(AddressDetailDialogComponent, {\n                locals: {\n                    addressForm: this.addressForm,\n                    customFields: this.customFields,\n                    availableCountries: this.availableCountries,\n                },\n                size: 'md',\n                closable: true,\n            })\n            .subscribe(() => {\n                this.changeDetector.markForCheck();\n            });\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-select-customer-group-dialog',\n    templateUrl: './select-customer-group-dialog.component.html',\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    selectedGroupIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((res) => res.customerGroups.items);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedGroupIds);\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateAddressInput,\n    CreateCustomerAddress,\n    CreateCustomerAddressMutation,\n    CreateCustomerInput,\n    Customer,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    GetAvailableCountries,\n    GetCustomer,\n    GetCustomerHistory,\n    GetCustomerQuery,\n    HistoryEntry,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n    SortOrder,\n    UpdateCustomer,\n    UpdateCustomerAddress,\n    UpdateCustomerAddressMutation,\n    UpdateCustomerInput,\n    UpdateCustomerMutation,\n} from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\nimport {\n    concatMap,\n    filter,\n    map,\n    merge,\n    mergeMap,\n    shareReplay,\n    startWith,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\n\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\n\n@Component({\n    selector: 'vdr-customer-detail',\n    templateUrl: './customer-detail.component.html',\n    styleUrls: ['./customer-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerDetailComponent extends BaseDetailComponent<CustomerWithOrders>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    addressCustomFields: CustomFieldConfig[];\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    orders$: Observable<GetCustomer.Items[]>;\n    ordersCount$: Observable<number>;\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\n    fetchHistory = new Subject<void>();\n    defaultShippingAddressId: string;\n    defaultBillingAddressId: string;\n    addressDefaultsUpdated = false;\n    ordersPerPage = 10;\n    currentOrdersPage = 1;\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        private formBuilder: FormBuilder,\n        protected dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n\n        this.customFields = this.getCustomFieldConfig('Customer');\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.detailForm = this.formBuilder.group({\n            customer: this.formBuilder.group({\n                title: '',\n                firstName: ['', Validators.required],\n                lastName: ['', Validators.required],\n                phoneNumber: '',\n                emailAddress: ['', [Validators.required, Validators.email]],\n                password: '',\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            addresses: new FormArray([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.customer\n                    .getCustomerHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.customer?.history.items);\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n        this.orderListUpdates$.complete();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customer', 'customFields', name]);\n    }\n\n    getAddressFormControls(): FormControl[] {\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\n        return formArray.controls as FormControl[];\n    }\n\n    setDefaultBillingAddressId(id: string) {\n        this.defaultBillingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    setDefaultShippingAddressId(id: string) {\n        this.defaultShippingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    addAddress() {\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\n        const newAddress = this.formBuilder.group({\n            fullName: '',\n            company: '',\n            streetLine1: ['', Validators.required],\n            streetLine2: '',\n            city: '',\n            province: '',\n            postalCode: '',\n            countryCode: ['', Validators.required],\n            phoneNumber: '',\n            defaultShippingAddress: false,\n            defaultBillingAddress: false,\n        });\n        if (this.addressCustomFields.length) {\n            const customFieldsGroup = this.formBuilder.group({});\n            for (const fieldDef of this.addressCustomFields) {\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\n            }\n            newAddress.addControl('customFields', customFieldsGroup);\n        }\n        addressFormArray.push(newAddress);\n    }\n\n    setOrderItemsPerPage(itemsPerPage: number) {\n        this.ordersPerPage = +itemsPerPage;\n        this.fetchOrdersList();\n    }\n\n    setOrderCurrentPage(page: number) {\n        this.currentOrdersPage = +page;\n        this.fetchOrdersList();\n    }\n\n    create() {\n        const customerForm = this.detailForm.get('customer');\n        if (!customerForm) {\n            return;\n        }\n        const formValue = customerForm.value;\n        const customFields = customerForm.get('customFields')?.value;\n        const customer: CreateCustomerInput = {\n            title: formValue.title,\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            phoneNumber: formValue.phoneNumber,\n            customFields,\n        };\n        this.dataService.customer\n            .createCustomer(customer, formValue.password)\n            .subscribe(({ createCustomer }) => {\n                switch (createCustomer.__typename) {\n                    case 'Customer':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Customer',\n                        });\n                        if (createCustomer.emailAddress && !formValue.password) {\n                            this.notificationService.notify({\n                                message: _('customer.email-verification-sent'),\n                                translationVars: { emailAddress: formValue.emailAddress },\n                                type: 'info',\n                                duration: 10000,\n                            });\n                        }\n                        this.detailForm.markAsPristine();\n                        this.addressDefaultsUpdated = false;\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\n                        break;\n                    case 'EmailAddressConflictError':\n                        this.notificationService.error(createCustomer.message);\n                }\n            });\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const saveOperations: Array<Observable<\n                        | UpdateCustomer.UpdateCustomer\n                        | CreateCustomerAddress.CreateCustomerAddress\n                        | UpdateCustomerAddress.UpdateCustomerAddress\n                    >> = [];\n                    const customerForm = this.detailForm.get('customer');\n                    if (customerForm && customerForm.dirty) {\n                        const formValue = customerForm.value;\n                        const customFields = customerForm.get('customFields')?.value;\n                        const customer: UpdateCustomerInput = {\n                            id,\n                            title: formValue.title,\n                            emailAddress: formValue.emailAddress,\n                            firstName: formValue.firstName,\n                            lastName: formValue.lastName,\n                            phoneNumber: formValue.phoneNumber,\n                            customFields,\n                        };\n                        saveOperations.push(\n                            this.dataService.customer\n                                .updateCustomer(customer)\n                                .pipe(map(res => res.updateCustomer)),\n                        );\n                    }\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\n                        for (const addressControl of addressFormArray.controls) {\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\n                                const address = addressControl.value;\n                                const input: CreateAddressInput = {\n                                    fullName: address.fullName,\n                                    company: address.company,\n                                    streetLine1: address.streetLine1,\n                                    streetLine2: address.streetLine2,\n                                    city: address.city,\n                                    province: address.province,\n                                    postalCode: address.postalCode,\n                                    countryCode: address.countryCode,\n                                    phoneNumber: address.phoneNumber,\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\n                                    customFields: address.customFields,\n                                };\n                                if (!address.id) {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .createCustomerAddress(id, input)\n                                            .pipe(map(res => res.createCustomerAddress)),\n                                    );\n                                } else {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .updateCustomerAddress({\n                                                ...input,\n                                                id: address.id,\n                                            })\n                                            .pipe(map(res => res.updateCustomerAddress)),\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    return forkJoin(saveOperations);\n                }),\n            )\n            .subscribe(\n                data => {\n                    for (const result of data) {\n                        switch (result.__typename) {\n                            case 'Customer':\n                            case 'Address':\n                                this.notificationService.success(_('common.notify-update-success'), {\n                                    entity: 'Customer',\n                                });\n                                this.detailForm.markAsPristine();\n                                this.addressDefaultsUpdated = false;\n                                this.changeDetector.markForCheck();\n                                this.fetchHistory.next();\n                                break;\n                            case 'EmailAddressConflictError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n\n    addToGroup() {\n        this.modalService\n            .fromComponent(SelectCustomerGroupDialogComponent, {\n                size: 'md',\n            })\n            .pipe(\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\n            )\n            .subscribe({\n                next: res => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: 1,\n                        groupName: res.addCustomersToGroup.name,\n                    });\n                },\n                complete: () => {\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\n                    this.fetchHistory.next();\n                },\n            });\n    }\n\n    removeFromGroup(group: GetCustomer.Groups) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-remove-customer-from-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\n                        : EMPTY,\n                ),\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\n            )\n            .subscribe(result => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: 1,\n                    groupName: group.name,\n                });\n                this.fetchHistory.next();\n            });\n    }\n\n    addNoteToCustomer({ note }: { note: string }) {\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\n            this.fetchHistory.next();\n            this.notificationService.success(_('common.notify-create-success'), {\n                entity: 'Note',\n            });\n        });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: false,\n                    note: entry.data.note,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.customer.updateCustomerNote({\n                            noteId: entry.id,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    protected setFormValues(entity: Customer.Fragment): void {\n        const customerGroup = this.detailForm.get('customer');\n        if (customerGroup) {\n            customerGroup.patchValue({\n                title: entity.title,\n                firstName: entity.firstName,\n                lastName: entity.lastName,\n                phoneNumber: entity.phoneNumber,\n                emailAddress: entity.emailAddress,\n            });\n        }\n\n        if (entity.addresses) {\n            const addressesArray = new FormArray([]);\n            for (const address of entity.addresses) {\n                const { customFields, ...rest } = address as any;\n                const addressGroup = this.formBuilder.group({\n                    ...rest,\n                    countryCode: address.country.code,\n                });\n                addressesArray.push(addressGroup);\n                if (address.defaultShippingAddress) {\n                    this.defaultShippingAddressId = address.id;\n                }\n                if (address.defaultBillingAddress) {\n                    this.defaultBillingAddressId = address.id;\n                }\n\n                if (this.addressCustomFields.length) {\n                    const customFieldsGroup = this.formBuilder.group({});\n                    for (const fieldDef of this.addressCustomFields) {\n                        const key = fieldDef.name;\n                        const value = (address as any).customFields?.[key];\n                        const control = new FormControl(value);\n                        customFieldsGroup.addControl(key, control);\n                    }\n                    addressGroup.addControl('customFields', customFieldsGroup);\n                }\n            }\n            this.detailForm.setControl('addresses', addressesArray);\n        }\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customer', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields?.[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    /**\n     * Refetch the customer with the current order list settings.\n     */\n    private fetchOrdersList() {\n        this.dataService.customer\n            .getCustomer(this.id, {\n                take: this.ordersPerPage,\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\n            })\n            .single$.pipe(\n                map(data => data.customer),\n                filter(notNullOrUndefined),\n            )\n            .subscribe(result => this.orderListUpdates$.next(result));\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-group-detail-dialog',\n    templateUrl: './customer-group-detail-dialog.component.html',\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupDetailDialogComponent implements Dialog<string> {\n    group: { id?: string; name: string };\n    resolveWith: (result?: string) => void;\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.group.name);\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCustomerGroups,\n    GetCustomerGroupWithCustomers,\n    GetZones,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-customer-group-list',\n    templateUrl: './customer-group-list.component.html',\n    styleUrls: ['./customer-group-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupListComponent implements OnInit {\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    listIsEmpty$: Observable<boolean>;\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\n    membersTotal$: Observable<number>;\n    selectedCustomerIds: string[] = [];\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 0,\n        filterTerm: '',\n    });\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        public route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit(): void {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((data) => data.customerGroups.items);\n        const activeGroupId$ = this.route.paramMap.pipe(\n            map((pm) => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedCustomerIds = [])),\n        );\n        this.listIsEmpty$ = this.groups$.pipe(map((groups) => groups.length === 0));\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\n            map(([groups, activeGroupId]) => {\n                if (activeGroupId) {\n                    return groups.find((g) => g.id === activeGroupId);\n                }\n            }),\n        );\n        const membersResult$ = combineLatest(\n            this.activeGroup$,\n            this.fetchGroupMembers$,\n            this.refreshActiveGroupMembers$,\n        ).pipe(\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\n                if (activeGroup) {\n                    return this.dataService.customer\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\n                            skip,\n                            take,\n                            filter: {\n                                emailAddress: {\n                                    contains: filterTerm,\n                                },\n                            },\n                        })\n                        .mapStream((res) => res.customerGroup?.customers);\n                } else {\n                    return of(undefined);\n                }\n            }),\n        );\n\n        this.members$ = membersResult$.pipe(map((res) => res?.items ?? []));\n        this.membersTotal$ = membersResult$.pipe(map((res) => res?.totalItems ?? 0));\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.createCustomerGroup({ name, customerIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    delete(groupId: string) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-delete-customer-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((response) =>\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\n                ),\n\n                switchMap((result) => {\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.customer\n                            .getCustomerGroupList()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\n                    }\n                }),\n            )\n            .subscribe(\n                (result) => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'CustomerGroup',\n                        });\n                    }\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    update(group: GetCustomerGroups.Items) {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.updateCustomerGroup({ id: group.id, name }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\n        this.modalService\n            .fromComponent(AddCustomerToGroupDialogComponent, {\n                locals: {\n                    group,\n                    route: this.route,\n                },\n                size: 'md',\n                verticalAlign: 'top',\n            })\n            .pipe(\n                switchMap((customerIds) =>\n                    customerIds\n                        ? this.dataService.customer\n                              .addCustomersToGroup(group.id, customerIds)\n                              .pipe(mapTo(customerIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: (result) => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: result.length,\n                        groupName: group.name,\n                    });\n                    this.refreshActiveGroupMembers$.next();\n                    this.selectedCustomerIds = [];\n                },\n            });\n    }\n\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: customerIds.length,\n                    groupName: group.name,\n                });\n                this.refreshActiveGroupMembers$.next();\n                this.selectedCustomerIds = [];\n            },\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\nimport { ZoneMember } from '@vendure/admin-ui/settings';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\n\nexport interface CustomerGroupMemberFetchParams {\n    skip: number;\n    take: number;\n    filterTerm: string;\n}\n\n@Component({\n    selector: 'vdr-customer-group-member-list',\n    templateUrl: './customer-group-member-list.component.html',\n    styleUrls: ['./customer-group-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\n    @Input() members: Array<\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\n    >;\n    @Input() totalItems: number;\n    @Input() route: ActivatedRoute;\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\n\n    membersItemsPerPage$: Observable<number>;\n    membersCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPage')),\n            map((page) => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPerPage')),\n            map((perPage) => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                this.fetchParamsChange.emit({\n                    filterTerm,\n                    skip,\n                    take,\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('membersPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('membersPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\n            relativeTo: this.route,\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map((v) => v.id));\n        }\n    }\n\n    toggleSelectMember(member: ZoneMember) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    Customer,\n    GetCustomerHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-history',\n    templateUrl: './customer-history.component.html',\n    styleUrls: ['./customer-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerHistoryComponent {\n    @Input() customer: Customer.Fragment;\n    @Input() history: GetCustomerHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\n                return 'success';\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'muted';\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'error';\n            default:\n                return 'default';\n        }\n    }\n\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'user';\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return ['assign-user', 'is-solid'];\n            case HistoryEntryType.CUSTOMER_NOTE:\n                return 'note';\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'users';\n        }\n    }\n\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getName(entry: GetCustomerHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            return `${this.customer.firstName} ${this.customer.lastName}`;\n        }\n    }\n\n    addNoteToCustomer() {\n        this.addNote.emit({ note: this.note });\n        this.note = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetCustomerList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\nimport { EMPTY, merge } from 'rxjs';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.scss'],\n})\nexport class CustomerListComponent\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\n    implements OnInit {\n    emailSearchTerm = new FormControl('');\n    lastNameSearchTerm = new FormControl('');\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\n            data => data.customers,\n            (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        emailAddress: {\n                            contains: this.emailSearchTerm.value,\n                        },\n                        lastName: {\n                            contains: this.lastNameSearchTerm.value,\n                        },\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            }),\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        merge(this.emailSearchTerm.valueChanges, this.lastNameSearchTerm.valueChanges)\n            .pipe(\n                filter(value => 2 < value.length || value.length === 0),\n                debounceTime(250),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n    }\n\n    deleteCustomer(customer: GetCustomerList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-customer'),\n                body: `${customer.firstName} ${customer.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Customer',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nimport { Customer } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-status-label',\n    templateUrl: './customer-status-label.component.html',\n    styleUrls: ['./customer-status-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerStatusLabelComponent {\n    @Input() customer: Customer.Fragment;\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Customer } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Customer',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                title: '',\n                firstName: '',\n                lastName: '',\n                emailAddress: '',\n                phoneNumber: null,\n                addresses: null,\n                user: null,\n            },\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CanDeactivateDetailGuard,\n    createResolveData,\n    Customer,\n    detailBreadcrumb,\n} from '@vendure/admin-ui/core';\n\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerResolver } from './providers/routing/customer-resolver';\n\nexport const customerRoutes: Route[] = [\n    {\n        path: 'customers',\n        component: CustomerListComponent,\n        pathMatch: '',\n        data: {\n            breadcrumb: _('breadcrumb.customers'),\n        },\n    },\n    {\n        path: 'customers/:id',\n        component: CustomerDetailComponent,\n        resolve: createResolveData(CustomerResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: customerBreadcrumb,\n        },\n    },\n    {\n        path: 'groups',\n        component: CustomerGroupListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.customer-groups'),\n        },\n    },\n];\n\nexport function customerBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Customer.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.customers',\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\n        route: 'customers',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { AddressCardComponent } from './components/address-card/address-card.component';\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\nimport { customerRoutes } from './customer.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\n    declarations: [\n        CustomerListComponent,\n        CustomerDetailComponent,\n        CustomerStatusLabelComponent,\n        AddressCardComponent,\n        CustomerGroupListComponent,\n        CustomerGroupDetailDialogComponent,\n        AddCustomerToGroupDialogComponent,\n        CustomerGroupMemberListComponent,\n        SelectCustomerGroupDialogComponent,\n        CustomerHistoryComponent,\n        AddressDetailDialogComponent,\n    ],\n    exports: [AddressCardComponent],\n})\nexport class CustomerModule {}\n"]}