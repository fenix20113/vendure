import { Injectable } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import * as i0 from "@angular/core";
/**
 * Responsible for registering dashboard widget components and querying for layouts.
 */
export class DashboardWidgetService {
    constructor() {
        this.registry = new Map();
        this.layoutDef = [];
    }
    registerWidget(id, config) {
        if (this.registry.has(id)) {
            throw new Error(`A dashboard widget with the id "${id}" already exists`);
        }
        this.registry.set(id, config);
    }
    getAvailableIds(currentUserPermissions) {
        const hasAllPermissions = (requiredPerms, userPerms) => {
            return requiredPerms.every(p => userPerms.includes(p));
        };
        return [...this.registry.entries()]
            .filter(([id, config]) => {
            return (!config.requiresPermissions ||
                hasAllPermissions(config.requiresPermissions, currentUserPermissions));
        })
            .map(([id]) => id);
    }
    getWidgetById(id) {
        if (!this.registry.has(id)) {
            throw new Error(`No widget was found with the id "${id}"`);
        }
        return this.registry.get(id);
    }
    setDefaultLayout(layout) {
        this.layoutDef = layout;
    }
    getDefaultLayout() {
        return this.layoutDef;
    }
    getWidgetLayout(layoutDef) {
        const intermediateLayout = (layoutDef || this.layoutDef)
            .map(({ id, width }) => {
            const config = this.registry.get(id);
            if (!config) {
                return this.idNotFound(id);
            }
            return { id, config, width: this.getValidWidth(id, config, width) };
        })
            .filter(notNullOrUndefined);
        return this.buildLayout(intermediateLayout);
    }
    idNotFound(id) {
        // tslint:disable-next-line:no-console
        console.error(`No dashboard widget was found with the id "${id}"\nAvailable ids: ${[...this.registry.keys()]
            .map(_id => `"${_id}"`)
            .join(', ')}`);
        return;
    }
    getValidWidth(id, config, targetWidth) {
        var _a;
        let adjustedWidth = targetWidth;
        const supportedWidths = ((_a = config.supportedWidths) === null || _a === void 0 ? void 0 : _a.length) ? config.supportedWidths
            : [3, 4, 6, 8, 12];
        if (!supportedWidths.includes(targetWidth)) {
            // Fall back to the largest supported width
            const sortedWidths = supportedWidths.sort((a, b) => a - b);
            const fallbackWidth = supportedWidths[sortedWidths.length - 1];
            // tslint:disable-next-line:no-console
            console.error(`The "${id}" widget does not support the specified width (${targetWidth}).\nSupported widths are: [${sortedWidths.join(', ')}].\nUsing (${fallbackWidth}) instead.`);
            adjustedWidth = fallbackWidth;
        }
        return adjustedWidth;
    }
    buildLayout(intermediateLayout) {
        const layout = [];
        let row = [];
        for (const { id, config, width } of intermediateLayout) {
            const rowSize = row.reduce((size, c) => size + c.width, 0);
            if (12 < rowSize + width) {
                layout.push(row);
                row = [];
            }
            row.push({ id, config, width });
        }
        layout.push(row);
        return layout;
    }
}
DashboardWidgetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DashboardWidgetService_Factory() { return new DashboardWidgetService(); }, token: DashboardWidgetService, providedIn: "root" });
DashboardWidgetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvZGFzaGJvYXJkLXdpZGdldC9kYXNoYm9hcmQtd2lkZ2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7QUFXdEU7O0dBRUc7QUFJSCxNQUFNLE9BQU8sc0JBQXNCO0lBSG5DO1FBSVksYUFBUSxHQUFHLElBQUksR0FBRyxFQUFpQyxDQUFDO1FBQ3BELGNBQVMsR0FBMkIsRUFBRSxDQUFDO0tBc0dsRDtJQXBHRyxjQUFjLENBQUMsRUFBVSxFQUFFLE1BQTZCO1FBQ3BELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQzVFO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxlQUFlLENBQUMsc0JBQW9DO1FBQ2hELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxhQUF1QixFQUFFLFNBQW1CLEVBQVcsRUFBRTtZQUNoRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM5QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFF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SUFBSSxDQUNsSCxJQUFJLENBQ1AsY0FBYyxhQUFhLFlBQVksQ0FDM0MsQ0FBQztZQUNGLGFBQWEsR0FBRyxhQUFhLENBQUM7U0FDakM7UUFDRCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBRU8sV0FBVyxDQUFDLGtCQUF3QztRQUN4RCxNQUFNLE1BQU0sR0FBaUIsRUFBRSxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUF5QixFQUFFLENBQUM7UUFDbkMsS0FBSyxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxrQkFBa0IsRUFBRTtZQUNwRCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxFQUFFLEdBQUcsT0FBTyxHQUFHLEtBQUssRUFBRTtnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakIsR0FBRyxHQUFHLEVBQUUsQ0FBQzthQUNaO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7OztZQTFHSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBub3ROdWxsT3JVbmRlZmluZWQgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XG5cbmltcG9ydCB7IFBlcm1pc3Npb24gfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcblxuaW1wb3J0IHtcbiAgICBEYXNoYm9hcmRXaWRnZXRDb25maWcsXG4gICAgRGFzaGJvYXJkV2lkZ2V0V2lkdGgsXG4gICAgV2lkZ2V0TGF5b3V0LFxuICAgIFdpZGdldExheW91dERlZmluaXRpb24sXG59IGZyb20gJy4vZGFzaGJvYXJkLXdpZGdldC10eXBlcyc7XG5cbi8qKlxuICogUmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIGRhc2hib2FyZCB3aWRnZXQgY29tcG9uZW50cyBhbmQgcXVlcnlpbmcgZm9yIGxheW91dHMuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZFdpZGdldFNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVnaXN0cnkgPSBuZXcgTWFwPHN0cmluZywgRGFzaGJvYXJkV2lkZ2V0Q29uZmlnPigpO1xuICAgIHByaXZhdGUgbGF5b3V0RGVmOiBXaWRnZXRMYXlvdXREZWZpbml0aW9uID0gW107XG5cbiAgICByZWdpc3RlcldpZGdldChpZDogc3RyaW5nLCBjb25maWc6IERhc2hib2FyZFdpZGdldENvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5yZWdpc3RyeS5oYXMoaWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgZGFzaGJvYXJkIHdpZGdldCB3aXRoIHRoZSBpZCBcIiR7aWR9XCIgYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVnaXN0cnkuc2V0KGlkLCBjb25maWcpO1xuICAgIH1cblxuICAgIGdldEF2YWlsYWJsZUlkcyhjdXJyZW50VXNlclBlcm1pc3Npb25zOiBQZXJtaXNzaW9uW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGhhc0FsbFBlcm1pc3Npb25zID0gKHJlcXVpcmVkUGVybXM6IHN0cmluZ1tdLCB1c2VyUGVybXM6IHN0cmluZ1tdKTogYm9vbGVhbiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZWRQZXJtcy5ldmVyeShwID0+IHVzZXJQZXJtcy5pbmNsdWRlcyhwKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLnJlZ2lzdHJ5LmVudHJpZXMoKV1cbiAgICAgICAgICAgIC5maWx0ZXIoKFtpZCwgY29uZmlnXSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICFjb25maWcucmVxdWlyZXNQZXJtaXNzaW9ucyB8fFxuICAgICAgICAgICAgICAgICAgICBoYXNBbGxQZXJtaXNzaW9ucyhjb25maWcucmVxdWlyZXNQZXJtaXNzaW9ucywgY3VycmVudFVzZXJQZXJtaXNzaW9ucylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoKFtpZF0pID0+IGlkKTtcbiAgICB9XG5cbiAgICBnZXRXaWRnZXRCeUlkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlZ2lzdHJ5LmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gd2lkZ2V0IHdhcyBmb3VuZCB3aXRoIHRoZSBpZCBcIiR7aWR9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5nZXQoaWQpO1xuICAgIH1cblxuICAgIHNldERlZmF1bHRMYXlvdXQobGF5b3V0OiBXaWRnZXRMYXlvdXREZWZpbml0aW9uKSB7XG4gICAgICAgIHRoaXMubGF5b3V0RGVmID0gbGF5b3V0O1xuICAgIH1cblxuICAgIGdldERlZmF1bHRMYXlvdXQoKTogV2lkZ2V0TGF5b3V0RGVmaW5pdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dERlZjtcbiAgICB9XG5cbiAgICBnZXRXaWRnZXRMYXlvdXQobGF5b3V0RGVmPzogV2lkZ2V0TGF5b3V0RGVmaW5pdGlvbik6IFdpZGdldExheW91dCB7XG4gICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUxheW91dCA9IChsYXlvdXREZWYgfHwgdGhpcy5sYXlvdXREZWYpXG4gICAgICAgICAgICAubWFwKCh7IGlkLCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5yZWdpc3RyeS5nZXQoaWQpO1xuICAgICAgICAgICAgICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlkTm90Rm91bmQoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBpZCwgY29uZmlnLCB3aWR0aDogdGhpcy5nZXRWYWxpZFdpZHRoKGlkLCBjb25maWcsIHdpZHRoKSB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIobm90TnVsbE9yVW5kZWZpbmVkKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZExheW91dChpbnRlcm1lZGlhdGVMYXlvdXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaWROb3RGb3VuZChpZDogc3RyaW5nKTogdW5kZWZpbmVkIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBObyBkYXNoYm9hcmQgd2lkZ2V0IHdhcyBmb3VuZCB3aXRoIHRoZSBpZCBcIiR7aWR9XCJcXG5BdmFpbGFibGUgaWRzOiAke1suLi50aGlzLnJlZ2lzdHJ5LmtleXMoKV1cbiAgICAgICAgICAgICAgICAubWFwKF9pZCA9PiBgXCIke19pZH1cImApXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyl9YCxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VmFsaWRXaWR0aChcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgY29uZmlnOiBEYXNoYm9hcmRXaWRnZXRDb25maWcsXG4gICAgICAgIHRhcmdldFdpZHRoOiBEYXNoYm9hcmRXaWRnZXRXaWR0aCxcbiAgICApOiBEYXNoYm9hcmRXaWRnZXRXaWR0aCB7XG4gICAgICAgIGxldCBhZGp1c3RlZFdpZHRoID0gdGFyZ2V0V2lkdGg7XG4gICAgICAgIGNvbnN0IHN1cHBvcnRlZFdpZHRocyA9IGNvbmZpZy5zdXBwb3J0ZWRXaWR0aHM/Lmxlbmd0aFxuICAgICAgICAgICAgPyBjb25maWcuc3VwcG9ydGVkV2lkdGhzXG4gICAgICAgICAgICA6IChbMywgNCwgNiwgOCwgMTJdIGFzIERhc2hib2FyZFdpZGdldFdpZHRoW10pO1xuICAgICAgICBpZiAoIXN1cHBvcnRlZFdpZHRocy5pbmNsdWRlcyh0YXJnZXRXaWR0aCkpIHtcbiAgICAgICAgICAgIC8vIEZhbGwgYmFjayB0byB0aGUgbGFyZ2VzdCBzdXBwb3J0ZWQgd2lkdGhcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZFdpZHRocyA9IHN1cHBvcnRlZFdpZHRocy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja1dpZHRoID0gc3VwcG9ydGVkV2lkdGhzW3NvcnRlZFdpZHRocy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgXCIke2lkfVwiIHdpZGdldCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBzcGVjaWZpZWQgd2lkdGggKCR7dGFyZ2V0V2lkdGh9KS5cXG5TdXBwb3J0ZWQgd2lkdGhzIGFyZTogWyR7c29ydGVkV2lkdGhzLmpvaW4oXG4gICAgICAgICAgICAgICAgICAgICcsICcsXG4gICAgICAgICAgICAgICAgKX1dLlxcblVzaW5nICgke2ZhbGxiYWNrV2lkdGh9KSBpbnN0ZWFkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWRqdXN0ZWRXaWR0aCA9IGZhbGxiYWNrV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkanVzdGVkV2lkdGg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZExheW91dChpbnRlcm1lZGlhdGVMYXlvdXQ6IFdpZGdldExheW91dFtudW1iZXJdKTogV2lkZ2V0TGF5b3V0IHtcbiAgICAgICAgY29uc3QgbGF5b3V0OiBXaWRnZXRMYXlvdXQgPSBbXTtcbiAgICAgICAgbGV0IHJvdzogV2lkZ2V0TGF5b3V0W251bWJlcl0gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IGlkLCBjb25maWcsIHdpZHRoIH0gb2YgaW50ZXJtZWRpYXRlTGF5b3V0KSB7XG4gICAgICAgICAgICBjb25zdCByb3dTaXplID0gcm93LnJlZHVjZSgoc2l6ZSwgYykgPT4gc2l6ZSArIGMud2lkdGgsIDApO1xuICAgICAgICAgICAgaWYgKDEyIDwgcm93U2l6ZSArIHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgbGF5b3V0LnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICByb3cgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdy5wdXNoKHsgaWQsIGNvbmZpZywgd2lkdGggfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGF5b3V0LnB1c2gocm93KTtcbiAgICAgICAgcmV0dXJuIGxheW91dDtcbiAgICB9XG59XG4iXX0=