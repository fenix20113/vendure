import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { merge, of, Subject, timer } from 'rxjs';
import { catchError, map, shareReplay, switchMap, throttleTime } from 'rxjs/operators';
import { getServerLocation } from '../../data/utils/get-server-location';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HealthCheckService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.pollingDelayMs = 60 * 1000;
        this._refresh = new Subject();
        this.healthCheckEndpoint = getServerLocation() + '/health';
        const refresh$ = this._refresh.pipe(throttleTime(1000));
        const result$ = merge(timer(0, this.pollingDelayMs), refresh$).pipe(switchMap(() => this.checkHealth()), shareReplay(1));
        this.status$ = result$.pipe(map(res => res.status));
        this.details$ = result$.pipe(map(res => Object.keys(res.details).map(key => {
            return { key, result: res.details[key] };
        })));
        this.lastCheck$ = result$.pipe(map(res => res.lastChecked));
    }
    refresh() {
        this._refresh.next();
    }
    checkHealth() {
        return this.httpClient.get(this.healthCheckEndpoint).pipe(catchError(err => of(err.error)), map(res => (Object.assign(Object.assign({}, res), { lastChecked: new Date() }))));
    }
}
HealthCheckService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HealthCheckService_Factory() { return new HealthCheckService(i0.ɵɵinject(i1.HttpClient)); }, token: HealthCheckService, providedIn: "root" });
HealthCheckService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HealthCheckService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhbHRoLWNoZWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3Byb3ZpZGVycy9oZWFsdGgtY2hlY2svaGVhbHRoLWNoZWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7QUF1QnpFLE1BQU0sT0FBTyxrQkFBa0I7SUFTM0IsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUp6QixtQkFBYyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFM0IsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixFQUFFLEdBQUcsU0FBUyxDQUFDO1FBRTNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQy9ELFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDbkMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNqQixDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FDTCxDQUNKLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxXQUFXO1FBQ2YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBb0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUN4RSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ2hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGlDQUFNLEdBQUcsS0FBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsSUFBRyxDQUFDLENBQ3BELENBQUM7SUFDTixDQUFDOzs7O1lBekNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBM0JRLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0LCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IGdldFNlcnZlckxvY2F0aW9uIH0gZnJvbSAnLi4vLi4vZGF0YS91dGlscy9nZXQtc2VydmVyLWxvY2F0aW9uJztcblxuZXhwb3J0IHR5cGUgU3lzdGVtU3RhdHVzID0gJ29rJyB8ICdlcnJvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tSZXN1bHQge1xuICAgIHN0YXR1czogU3lzdGVtU3RhdHVzO1xuICAgIGluZm86IHsgW25hbWU6IHN0cmluZ106IEhlYWx0aENoZWNrU3VjY2Vzc1Jlc3VsdCB9O1xuICAgIGRldGFpbHM6IHsgW25hbWU6IHN0cmluZ106IEhlYWx0aENoZWNrU3VjY2Vzc1Jlc3VsdCB8IEhlYWx0aENoZWNrRXJyb3JSZXN1bHQgfTtcbiAgICBlcnJvcjogeyBbbmFtZTogc3RyaW5nXTogSGVhbHRoQ2hlY2tFcnJvclJlc3VsdCB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aENoZWNrU3VjY2Vzc1Jlc3VsdCB7XG4gICAgc3RhdHVzOiAndXAnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aENoZWNrRXJyb3JSZXN1bHQge1xuICAgIHN0YXR1czogJ2Rvd24nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSGVhbHRoQ2hlY2tTZXJ2aWNlIHtcbiAgICBzdGF0dXMkOiBPYnNlcnZhYmxlPFN5c3RlbVN0YXR1cz47XG4gICAgZGV0YWlscyQ6IE9ic2VydmFibGU8QXJyYXk8eyBrZXk6IHN0cmluZzsgcmVzdWx0OiBIZWFsdGhDaGVja1N1Y2Nlc3NSZXN1bHQgfCBIZWFsdGhDaGVja0Vycm9yUmVzdWx0IH0+PjtcbiAgICBsYXN0Q2hlY2skOiBPYnNlcnZhYmxlPERhdGU+O1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb2xsaW5nRGVsYXlNcyA9IDYwICogMTAwMDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhlYWx0aENoZWNrRW5kcG9pbnQ6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZWZyZXNoID0gbmV3IFN1YmplY3QoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgICAgICB0aGlzLmhlYWx0aENoZWNrRW5kcG9pbnQgPSBnZXRTZXJ2ZXJMb2NhdGlvbigpICsgJy9oZWFsdGgnO1xuXG4gICAgICAgIGNvbnN0IHJlZnJlc2gkID0gdGhpcy5fcmVmcmVzaC5waXBlKHRocm90dGxlVGltZSgxMDAwKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCQgPSBtZXJnZSh0aW1lcigwLCB0aGlzLnBvbGxpbmdEZWxheU1zKSwgcmVmcmVzaCQpLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5jaGVja0hlYWx0aCgpKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KDEpLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuc3RhdHVzJCA9IHJlc3VsdCQucGlwZShtYXAocmVzID0+IHJlcy5zdGF0dXMpKTtcbiAgICAgICAgdGhpcy5kZXRhaWxzJCA9IHJlc3VsdCQucGlwZShcbiAgICAgICAgICAgIG1hcChyZXMgPT5cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZXMuZGV0YWlscykubWFwKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGtleSwgcmVzdWx0OiByZXMuZGV0YWlsc1trZXldIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmxhc3RDaGVjayQgPSByZXN1bHQkLnBpcGUobWFwKHJlcyA9PiByZXMubGFzdENoZWNrZWQpKTtcbiAgICB9XG5cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLl9yZWZyZXNoLm5leHQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrSGVhbHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxIZWFsdGhDaGVja1Jlc3VsdD4odGhpcy5oZWFsdGhDaGVja0VuZHBvaW50KS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4gb2YoZXJyLmVycm9yKSksXG4gICAgICAgICAgICBtYXAocmVzID0+ICh7IC4uLnJlcywgbGFzdENoZWNrZWQ6IG5ldyBEYXRlKCkgfSkpLFxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==