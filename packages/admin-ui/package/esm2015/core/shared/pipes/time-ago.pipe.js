import { Pipe } from '@angular/core';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import dayjs from 'dayjs';
import { I18nService } from '../../providers/i18n/i18n.service';
/**
 * Converts a date into the format "3 minutes ago", "5 hours ago" etc.
 */
export class TimeAgoPipe {
    constructor(i18nService) {
        this.i18nService = i18nService;
    }
    transform(value, nowVal) {
        const then = dayjs(value);
        const now = dayjs(nowVal || new Date());
        const secondsDiff = now.diff(then, 'second');
        const durations = [
            [60, _('datetime.ago-seconds')],
            [3600, _('datetime.ago-minutes')],
            [86400, _('datetime.ago-hours')],
            [31536000, _('datetime.ago-days')],
            [Number.MAX_SAFE_INTEGER, _('datetime.ago-years')],
        ];
        let lastUpperBound = 1;
        for (const [upperBound, translationToken] of durations) {
            if (secondsDiff < upperBound) {
                const count = Math.max(0, Math.floor(secondsDiff / lastUpperBound));
                return this.i18nService.translate(translationToken, { count });
            }
            lastUpperBound = upperBound;
        }
        return then.format();
    }
}
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'timeAgo',
                pure: false,
            },] }
];
TimeAgoPipe.ctorParameters = () => [
    { type: I18nService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL3BpcGVzL3RpbWUtYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN0RSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWhFOztHQUVHO0FBS0gsTUFBTSxPQUFPLFdBQVc7SUFDcEIsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBRyxDQUFDO0lBRWhELFNBQVMsQ0FBQyxLQUFvQixFQUFFLE1BQXNCO1FBQ2xELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3QyxNQUFNLFNBQVMsR0FBNEI7WUFDdkMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDL0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDakMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDaEMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDbEMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDckQsQ0FBQztRQUVGLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztRQUN2QixLQUFLLE1BQU0sQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxTQUFTLEVBQUU7WUFDcEQsSUFBSSxXQUFXLEdBQUcsVUFBVSxFQUFFO2dCQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNwRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNsRTtZQUNELGNBQWMsR0FBRyxVQUFVLENBQUM7U0FDL0I7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7WUE1QkosSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxLQUFLO2FBQ2Q7OztZQVJRLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXJrZXIgYXMgXyB9IGZyb20gJ0BiaWVzYmplcmcvbmd4LXRyYW5zbGF0ZS1leHRyYWN0LW1hcmtlcic7XG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9pMThuL2kxOG4uc2VydmljZSc7XG5cbi8qKlxuICogQ29udmVydHMgYSBkYXRlIGludG8gdGhlIGZvcm1hdCBcIjMgbWludXRlcyBhZ29cIiwgXCI1IGhvdXJzIGFnb1wiIGV0Yy5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICd0aW1lQWdvJyxcbiAgICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVGltZUFnb1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGkxOG5TZXJ2aWNlOiBJMThuU2VydmljZSkge31cblxuICAgIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nIHwgRGF0ZSwgbm93VmFsPzogc3RyaW5nIHwgRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHRoZW4gPSBkYXlqcyh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IG5vdyA9IGRheWpzKG5vd1ZhbCB8fCBuZXcgRGF0ZSgpKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kc0RpZmYgPSBub3cuZGlmZih0aGVuLCAnc2Vjb25kJyk7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uczogQXJyYXk8W251bWJlciwgc3RyaW5nXT4gPSBbXG4gICAgICAgICAgICBbNjAsIF8oJ2RhdGV0aW1lLmFnby1zZWNvbmRzJyldLFxuICAgICAgICAgICAgWzM2MDAsIF8oJ2RhdGV0aW1lLmFnby1taW51dGVzJyldLFxuICAgICAgICAgICAgWzg2NDAwLCBfKCdkYXRldGltZS5hZ28taG91cnMnKV0sXG4gICAgICAgICAgICBbMzE1MzYwMDAsIF8oJ2RhdGV0aW1lLmFnby1kYXlzJyldLFxuICAgICAgICAgICAgW051bWJlci5NQVhfU0FGRV9JTlRFR0VSLCBfKCdkYXRldGltZS5hZ28teWVhcnMnKV0sXG4gICAgICAgIF07XG5cbiAgICAgICAgbGV0IGxhc3RVcHBlckJvdW5kID0gMTtcbiAgICAgICAgZm9yIChjb25zdCBbdXBwZXJCb3VuZCwgdHJhbnNsYXRpb25Ub2tlbl0gb2YgZHVyYXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoc2Vjb25kc0RpZmYgPCB1cHBlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKHNlY29uZHNEaWZmIC8gbGFzdFVwcGVyQm91bmQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pMThuU2VydmljZS50cmFuc2xhdGUodHJhbnNsYXRpb25Ub2tlbiwgeyBjb3VudCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RVcHBlckJvdW5kID0gdXBwZXJCb3VuZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhlbi5mb3JtYXQoKTtcbiAgICB9XG59XG4iXX0=