import { Injectable } from '@angular/core';
import dayjs from 'dayjs';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { dayOfWeekIndex } from './constants';
export class DatetimePickerService {
    constructor() {
        this.selectedDatetime$ = new BehaviorSubject(null);
        this.viewingDatetime$ = new BehaviorSubject(dayjs());
        this.min = null;
        this.max = null;
        this.jumping = false;
        this.selected$ = this.selectedDatetime$.pipe(map(value => value && value.toDate()));
        this.viewing$ = this.viewingDatetime$.pipe(map(value => value.toDate()));
        this.weekStartDayIndex = dayOfWeekIndex['mon'];
        this.calendarView$ = combineLatest(this.viewingDatetime$, this.selectedDatetime$).pipe(map(([viewing, selected]) => this.generateCalendarView(viewing, selected)));
    }
    setWeekStartingDay(weekStartDay) {
        this.weekStartDayIndex = dayOfWeekIndex[weekStartDay];
    }
    setMin(min) {
        if (typeof min === 'string') {
            this.min = dayjs(min);
        }
    }
    setMax(max) {
        if (typeof max === 'string') {
            this.max = dayjs(max);
        }
    }
    selectDatetime(date) {
        let viewingValue;
        let selectedValue = null;
        if (date == null || date === '') {
            viewingValue = dayjs();
        }
        else {
            viewingValue = dayjs(date);
            selectedValue = dayjs(date);
        }
        this.selectedDatetime$.next(selectedValue);
        this.viewingDatetime$.next(viewingValue);
    }
    selectHour(hourOfDay) {
        const current = this.selectedDatetime$.value || dayjs();
        const next = current.hour(hourOfDay);
        this.selectedDatetime$.next(next);
        this.viewingDatetime$.next(next);
    }
    selectMinute(minutePastHour) {
        const current = this.selectedDatetime$.value || dayjs();
        const next = current.minute(minutePastHour);
        this.selectedDatetime$.next(next);
        this.viewingDatetime$.next(next);
    }
    viewNextMonth() {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'month'));
    }
    viewPrevMonth() {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'month'));
    }
    viewToday() {
        this.jumping = false;
        this.viewingDatetime$.next(dayjs());
    }
    viewJumpDown() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'week'));
    }
    viewJumpUp() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'week'));
    }
    viewJumpRight() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.add(1, 'day'));
    }
    viewJumpLeft() {
        this.jumping = true;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.subtract(1, 'day'));
    }
    selectToday() {
        this.jumping = false;
        this.selectDatetime(dayjs());
    }
    selectViewed() {
        this.jumping = false;
        this.selectDatetime(this.viewingDatetime$.value);
    }
    viewMonth(month) {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.month(month - 1));
    }
    viewYear(year) {
        this.jumping = false;
        const current = this.viewingDatetime$.value;
        this.viewingDatetime$.next(current.year(year));
    }
    generateCalendarView(viewing, selected) {
        if (!viewing.isValid() || (selected && !selected.isValid())) {
            return [];
        }
        const start = viewing.startOf('month');
        const end = viewing.endOf('month');
        const today = dayjs();
        const daysInMonth = viewing.daysInMonth();
        const selectedDayOfMonth = selected && selected.get('date');
        const startDayOfWeek = start.day();
        const startIndex = (7 + (startDayOfWeek - this.weekStartDayIndex)) % 7;
        const calendarView = [];
        let week = [];
        // Add the days at the tail of the previous month
        if (0 < startIndex) {
            const prevMonth = viewing.subtract(1, 'month');
            const daysInPrevMonth = prevMonth.daysInMonth();
            const prevIsCurrentMonth = prevMonth.isSame(today, 'month');
            for (let i = daysInPrevMonth - startIndex + 1; i <= daysInPrevMonth; i++) {
                const thisDay = viewing.subtract(1, 'month').date(i);
                week.push({
                    dayOfMonth: i,
                    selected: false,
                    inCurrentMonth: false,
                    isToday: prevIsCurrentMonth && today.get('date') === i,
                    isViewing: false,
                    disabled: !this.isInBounds(thisDay),
                    select: () => {
                        this.selectDatetime(thisDay);
                    },
                });
            }
        }
        // Add this month's days
        const isCurrentMonth = viewing.isSame(today, 'month');
        for (let i = 1; i <= daysInMonth; i++) {
            if ((i + startIndex - 1) % 7 === 0) {
                calendarView.push(week);
                week = [];
            }
            const thisDay = start.add(i - 1, 'day');
            const isViewingThisMonth = !!selected && selected.isSame(viewing, 'month') && selected.isSame(viewing, 'year');
            week.push({
                dayOfMonth: i,
                selected: i === selectedDayOfMonth && isViewingThisMonth,
                inCurrentMonth: true,
                isToday: isCurrentMonth && today.get('date') === i,
                isViewing: this.jumping && viewing.date() === i,
                disabled: !this.isInBounds(thisDay),
                select: () => {
                    this.selectDatetime(thisDay);
                },
            });
        }
        // Add the days at the start of the next month
        const emptyCellsEnd = 7 - ((startIndex + daysInMonth) % 7);
        if (emptyCellsEnd !== 7) {
            const nextMonth = viewing.add(1, 'month');
            const nextIsCurrentMonth = nextMonth.isSame(today, 'month');
            for (let i = 1; i <= emptyCellsEnd; i++) {
                const thisDay = end.add(i, 'day');
                week.push({
                    dayOfMonth: i,
                    selected: false,
                    inCurrentMonth: false,
                    isToday: nextIsCurrentMonth && today.get('date') === i,
                    isViewing: false,
                    disabled: !this.isInBounds(thisDay),
                    select: () => {
                        this.selectDatetime(thisDay);
                    },
                });
            }
        }
        calendarView.push(week);
        return calendarView;
    }
    isInBounds(date) {
        if (this.min && this.min.isAfter(date)) {
            return false;
        }
        if (this.max && this.max.isBefore(date)) {
            return false;
        }
        return true;
    }
}
DatetimePickerService.decorators = [
    { type: Injectable }
];
DatetimePickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUtcGlja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2RhdGV0aW1lLXBpY2tlci9kYXRldGltZS1waWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUk3QyxNQUFNLE9BQU8scUJBQXFCO0lBVzlCO1FBUFEsc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQXFCLElBQUksQ0FBQyxDQUFDO1FBQ2xFLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFjLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFN0QsUUFBRyxHQUF1QixJQUFJLENBQUM7UUFDL0IsUUFBRyxHQUF1QixJQUFJLENBQUM7UUFDL0IsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNB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QUFFLEdBQUcsRUFBRTt3QkFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNqQyxDQUFDO2lCQUNKLENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBaUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBN05KLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IGRheU9mV2Vla0luZGV4IH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3LCBEYXlDZWxsLCBEYXlPZldlZWsgfSBmcm9tICcuL3R5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERhdGV0aW1lUGlja2VyU2VydmljZSB7XG4gICAgY2FsZW5kYXJWaWV3JDogT2JzZXJ2YWJsZTxDYWxlbmRhclZpZXc+O1xuICAgIHNlbGVjdGVkJDogT2JzZXJ2YWJsZTxEYXRlIHwgbnVsbD47XG4gICAgdmlld2luZyQ6IE9ic2VydmFibGU8RGF0ZT47XG4gICAgcHJpdmF0ZSBzZWxlY3RlZERhdGV0aW1lJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8ZGF5anMuRGF5anMgfCBudWxsPihudWxsKTtcbiAgICBwcml2YXRlIHZpZXdpbmdEYXRldGltZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGRheWpzLkRheWpzPihkYXlqcygpKTtcbiAgICBwcml2YXRlIHdlZWtTdGFydERheUluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBtaW46IGRheWpzLkRheWpzIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBtYXg6IGRheWpzLkRheWpzIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBqdW1waW5nID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCQgPSB0aGlzLnNlbGVjdGVkRGF0ZXRpbWUkLnBpcGUobWFwKHZhbHVlID0+IHZhbHVlICYmIHZhbHVlLnRvRGF0ZSgpKSk7XG4gICAgICAgIHRoaXMudmlld2luZyQgPSB0aGlzLnZpZXdpbmdEYXRldGltZSQucGlwZShtYXAodmFsdWUgPT4gdmFsdWUudG9EYXRlKCkpKTtcbiAgICAgICAgdGhpcy53ZWVrU3RhcnREYXlJbmRleCA9IGRheU9mV2Vla0luZGV4Wydtb24nXTtcbiAgICAgICAgdGhpcy5jYWxlbmRhclZpZXckID0gY29tYmluZUxhdGVzdCh0aGlzLnZpZXdpbmdEYXRldGltZSQsIHRoaXMuc2VsZWN0ZWREYXRldGltZSQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFt2aWV3aW5nLCBzZWxlY3RlZF0pID0+IHRoaXMuZ2VuZXJhdGVDYWxlbmRhclZpZXcodmlld2luZywgc2VsZWN0ZWQpKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRXZWVrU3RhcnRpbmdEYXkod2Vla1N0YXJ0RGF5OiBEYXlPZldlZWspIHtcbiAgICAgICAgdGhpcy53ZWVrU3RhcnREYXlJbmRleCA9IGRheU9mV2Vla0luZGV4W3dlZWtTdGFydERheV07XG4gICAgfVxuXG4gICAgc2V0TWluKG1pbj86IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IGRheWpzKG1pbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRNYXgobWF4Pzogc3RyaW5nIHwgbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIG1heCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gZGF5anMobWF4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdERhdGV0aW1lKGRhdGU6IERhdGUgfCBzdHJpbmcgfCBkYXlqcy5EYXlqcyB8IG51bGwpIHtcbiAgICAgICAgbGV0IHZpZXdpbmdWYWx1ZTogZGF5anMuRGF5anM7XG4gICAgICAgIGxldCBzZWxlY3RlZFZhbHVlOiBkYXlqcy5EYXlqcyB8IG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoZGF0ZSA9PSBudWxsIHx8IGRhdGUgPT09ICcnKSB7XG4gICAgICAgICAgICB2aWV3aW5nVmFsdWUgPSBkYXlqcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlld2luZ1ZhbHVlID0gZGF5anMoZGF0ZSk7XG4gICAgICAgICAgICBzZWxlY3RlZFZhbHVlID0gZGF5anMoZGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZXRpbWUkLm5leHQoc2VsZWN0ZWRWYWx1ZSk7XG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KHZpZXdpbmdWYWx1ZSk7XG4gICAgfVxuXG4gICAgc2VsZWN0SG91cihob3VyT2ZEYXk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zZWxlY3RlZERhdGV0aW1lJC52YWx1ZSB8fCBkYXlqcygpO1xuICAgICAgICBjb25zdCBuZXh0ID0gY3VycmVudC5ob3VyKGhvdXJPZkRheSk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWREYXRldGltZSQubmV4dChuZXh0KTtcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQobmV4dCk7XG4gICAgfVxuXG4gICAgc2VsZWN0TWludXRlKG1pbnV0ZVBhc3RIb3VyOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuc2VsZWN0ZWREYXRldGltZSQudmFsdWUgfHwgZGF5anMoKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGN1cnJlbnQubWludXRlKG1pbnV0ZVBhc3RIb3VyKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGV0aW1lJC5uZXh0KG5leHQpO1xuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChuZXh0KTtcbiAgICB9XG5cbiAgICB2aWV3TmV4dE1vbnRoKCkge1xuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZTtcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQoY3VycmVudC5hZGQoMSwgJ21vbnRoJykpO1xuICAgIH1cblxuICAgIHZpZXdQcmV2TW9udGgoKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChjdXJyZW50LnN1YnRyYWN0KDEsICdtb250aCcpKTtcbiAgICB9XG5cbiAgICB2aWV3VG9kYXkoKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChkYXlqcygpKTtcbiAgICB9XG5cbiAgICB2aWV3SnVtcERvd24oKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnZpZXdpbmdEYXRldGltZSQudmFsdWU7XG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuYWRkKDEsICd3ZWVrJykpO1xuICAgIH1cblxuICAgIHZpZXdKdW1wVXAoKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnZpZXdpbmdEYXRldGltZSQudmFsdWU7XG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuc3VidHJhY3QoMSwgJ3dlZWsnKSk7XG4gICAgfVxuXG4gICAgdmlld0p1bXBSaWdodCgpIHtcbiAgICAgICAgdGhpcy5qdW1waW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZTtcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQoY3VycmVudC5hZGQoMSwgJ2RheScpKTtcbiAgICB9XG5cbiAgICB2aWV3SnVtcExlZnQoKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLnZpZXdpbmdEYXRldGltZSQudmFsdWU7XG4gICAgICAgIHRoaXMudmlld2luZ0RhdGV0aW1lJC5uZXh0KGN1cnJlbnQuc3VidHJhY3QoMSwgJ2RheScpKTtcbiAgICB9XG5cbiAgICBzZWxlY3RUb2RheSgpIHtcbiAgICAgICAgdGhpcy5qdW1waW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VsZWN0RGF0ZXRpbWUoZGF5anMoKSk7XG4gICAgfVxuXG4gICAgc2VsZWN0Vmlld2VkKCkge1xuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3REYXRldGltZSh0aGlzLnZpZXdpbmdEYXRldGltZSQudmFsdWUpO1xuICAgIH1cblxuICAgIHZpZXdNb250aChtb250aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuanVtcGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy52aWV3aW5nRGF0ZXRpbWUkLnZhbHVlO1xuICAgICAgICB0aGlzLnZpZXdpbmdEYXRldGltZSQubmV4dChjdXJyZW50Lm1vbnRoKG1vbnRoIC0gMSkpO1xuICAgIH1cblxuICAgIHZpZXdZZWFyKHllYXI6IG51bWJlcikge1xuICAgICAgICB0aGlzLmp1bXBpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudmlld2luZ0RhdGV0aW1lJC52YWx1ZTtcbiAgICAgICAgdGhpcy52aWV3aW5nRGF0ZXRpbWUkLm5leHQoY3VycmVudC55ZWFyKHllYXIpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlQ2FsZW5kYXJWaWV3KHZpZXdpbmc6IGRheWpzLkRheWpzLCBzZWxlY3RlZDogZGF5anMuRGF5anMgfCBudWxsKTogQ2FsZW5kYXJWaWV3IHtcbiAgICAgICAgaWYgKCF2aWV3aW5nLmlzVmFsaWQoKSB8fCAoc2VsZWN0ZWQgJiYgIXNlbGVjdGVkLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydCA9IHZpZXdpbmcuc3RhcnRPZignbW9udGgnKTtcbiAgICAgICAgY29uc3QgZW5kID0gdmlld2luZy5lbmRPZignbW9udGgnKTtcbiAgICAgICAgY29uc3QgdG9kYXkgPSBkYXlqcygpO1xuICAgICAgICBjb25zdCBkYXlzSW5Nb250aCA9IHZpZXdpbmcuZGF5c0luTW9udGgoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXlPZk1vbnRoID0gc2VsZWN0ZWQgJiYgc2VsZWN0ZWQuZ2V0KCdkYXRlJyk7XG5cbiAgICAgICAgY29uc3Qgc3RhcnREYXlPZldlZWsgPSBzdGFydC5kYXkoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9ICg3ICsgKHN0YXJ0RGF5T2ZXZWVrIC0gdGhpcy53ZWVrU3RhcnREYXlJbmRleCkpICUgNztcblxuICAgICAgICBjb25zdCBjYWxlbmRhclZpZXc6IENhbGVuZGFyVmlldyA9IFtdO1xuICAgICAgICBsZXQgd2VlazogRGF5Q2VsbFtdID0gW107XG5cbiAgICAgICAgLy8gQWRkIHRoZSBkYXlzIGF0IHRoZSB0YWlsIG9mIHRoZSBwcmV2aW91cyBtb250aFxuICAgICAgICBpZiAoMCA8IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZNb250aCA9IHZpZXdpbmcuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICAgICAgICBjb25zdCBkYXlzSW5QcmV2TW9udGggPSBwcmV2TW9udGguZGF5c0luTW9udGgoKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZJc0N1cnJlbnRNb250aCA9IHByZXZNb250aC5pc1NhbWUodG9kYXksICdtb250aCcpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGRheXNJblByZXZNb250aCAtIHN0YXJ0SW5kZXggKyAxOyBpIDw9IGRheXNJblByZXZNb250aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhpc0RheSA9IHZpZXdpbmcuc3VidHJhY3QoMSwgJ21vbnRoJykuZGF0ZShpKTtcbiAgICAgICAgICAgICAgICB3ZWVrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkYXlPZk1vbnRoOiBpLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGluQ3VycmVudE1vbnRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNUb2RheTogcHJldklzQ3VycmVudE1vbnRoICYmIHRvZGF5LmdldCgnZGF0ZScpID09PSBpLFxuICAgICAgICAgICAgICAgICAgICBpc1ZpZXdpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNJbkJvdW5kcyh0aGlzRGF5KSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdERhdGV0aW1lKHRoaXNEYXkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRoaXMgbW9udGgncyBkYXlzXG4gICAgICAgIGNvbnN0IGlzQ3VycmVudE1vbnRoID0gdmlld2luZy5pc1NhbWUodG9kYXksICdtb250aCcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBkYXlzSW5Nb250aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGkgKyBzdGFydEluZGV4IC0gMSkgJSA3ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJWaWV3LnB1c2god2Vlayk7XG4gICAgICAgICAgICAgICAgd2VlayA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGhpc0RheSA9IHN0YXJ0LmFkZChpIC0gMSwgJ2RheScpO1xuICAgICAgICAgICAgY29uc3QgaXNWaWV3aW5nVGhpc01vbnRoID1cbiAgICAgICAgICAgICAgICAhIXNlbGVjdGVkICYmIHNlbGVjdGVkLmlzU2FtZSh2aWV3aW5nLCAnbW9udGgnKSAmJiBzZWxlY3RlZC5pc1NhbWUodmlld2luZywgJ3llYXInKTtcbiAgICAgICAgICAgIHdlZWsucHVzaCh7XG4gICAgICAgICAgICAgICAgZGF5T2ZNb250aDogaSxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogaSA9PT0gc2VsZWN0ZWREYXlPZk1vbnRoICYmIGlzVmlld2luZ1RoaXNNb250aCxcbiAgICAgICAgICAgICAgICBpbkN1cnJlbnRNb250aDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc1RvZGF5OiBpc0N1cnJlbnRNb250aCAmJiB0b2RheS5nZXQoJ2RhdGUnKSA9PT0gaSxcbiAgICAgICAgICAgICAgICBpc1ZpZXdpbmc6IHRoaXMuanVtcGluZyAmJiB2aWV3aW5nLmRhdGUoKSA9PT0gaSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMuaXNJbkJvdW5kcyh0aGlzRGF5KSxcbiAgICAgICAgICAgICAgICBzZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRldGltZSh0aGlzRGF5KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIGRheXMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IG1vbnRoXG4gICAgICAgIGNvbnN0IGVtcHR5Q2VsbHNFbmQgPSA3IC0gKChzdGFydEluZGV4ICsgZGF5c0luTW9udGgpICUgNyk7XG4gICAgICAgIGlmIChlbXB0eUNlbGxzRW5kICE9PSA3KSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0TW9udGggPSB2aWV3aW5nLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJc0N1cnJlbnRNb250aCA9IG5leHRNb250aC5pc1NhbWUodG9kYXksICdtb250aCcpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBlbXB0eUNlbGxzRW5kOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzRGF5ID0gZW5kLmFkZChpLCAnZGF5Jyk7XG4gICAgICAgICAgICAgICAgd2Vlay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZGF5T2ZNb250aDogaSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpbkN1cnJlbnRNb250aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzVG9kYXk6IG5leHRJc0N1cnJlbnRNb250aCAmJiB0b2RheS5nZXQoJ2RhdGUnKSA9PT0gaSxcbiAgICAgICAgICAgICAgICAgICAgaXNWaWV3aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLmlzSW5Cb3VuZHModGhpc0RheSksXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3REYXRldGltZSh0aGlzRGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYWxlbmRhclZpZXcucHVzaCh3ZWVrKTtcbiAgICAgICAgcmV0dXJuIGNhbGVuZGFyVmlldztcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzSW5Cb3VuZHMoZGF0ZTogZGF5anMuRGF5anMpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMubWluICYmIHRoaXMubWluLmlzQWZ0ZXIoZGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tYXggJiYgdGhpcy5tYXguaXNCZWZvcmUoZGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXX0=