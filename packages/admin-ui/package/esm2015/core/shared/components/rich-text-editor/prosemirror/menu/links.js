import { icons, MenuItem } from 'prosemirror-menu';
import { TextSelection } from 'prosemirror-state';
import { LinkDialogComponent } from '../../link-dialog/link-dialog.component';
import { markActive } from './menu-common';
function selectionIsWithinLink(state, anchor, head) {
    const { doc } = state;
    const headLink = doc
        .resolve(head)
        .marks()
        .find(m => m.type.name === 'link');
    const anchorLink = doc
        .resolve(anchor)
        .marks()
        .find(m => m.type.name === 'link');
    if (headLink && anchorLink && headLink.eq(anchorLink)) {
        return true;
    }
    return false;
}
export function linkItem(linkMark, modalService) {
    return new MenuItem({
        title: 'Add or remove link',
        icon: icons.link,
        class: '',
        css: '',
        active(state) {
            return markActive(state, linkMark);
        },
        enable(state) {
            const { selection } = state;
            return !selection.empty || selectionIsWithinLink(state, selection.anchor, selection.head);
        },
        run(state, dispatch, view) {
            let attrs;
            const { selection, doc } = state;
            if (selection instanceof TextSelection &&
                selectionIsWithinLink(state, selection.anchor + 1, selection.head - 1)) {
                const mark = doc
                    .resolve(selection.anchor + 1)
                    .marks()
                    .find(m => m.type.name === 'link');
                if (mark) {
                    attrs = mark.attrs;
                }
            }
            modalService
                .fromComponent(LinkDialogComponent, {
                closable: true,
                locals: {
                    existing: attrs,
                },
            })
                .subscribe(result => {
                let tr = state.tr;
                if (result) {
                    const { $from, $to } = selection.ranges[0];
                    tr = tr.removeMark($from.pos, $to.pos, linkMark);
                    if (result.href !== '') {
                        tr = tr.addMark($from.pos, $to.pos, linkMark.create(result));
                    }
                }
                dispatch(tr.scrollIntoView());
                view.focus();
            });
            return true;
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvbWVudS9saW5rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRW5ELE9BQU8sRUFBZSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUcvRCxPQUFPLEVBQWEsbUJBQW1CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUV6RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLFNBQVMscUJBQXFCLENBQUMsS0FBa0IsRUFBRSxNQUFjLEVBQUUsSUFBWTtJQUMzRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLE1BQU0sUUFBUSxHQUFHLEdBQUc7U0FDZixPQUFPLENBQUMsSUFBSSxDQUFDO1NBQ2IsS0FBSyxFQUFFO1NBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsR0FBRztTQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDO1NBQ2YsS0FBSyxFQUFFO1NBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7SUFDdkMsSUFBSSxRQUFRLElBQUksVUFBVSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDbkQsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQWtCLEVBQUUsWUFBMEI7SUFDbkUsT0FBTyxJQUFJLFFBQVEsQ0FBQztRQUNoQixLQUFLLEVBQUUsb0JBQW9CO1FBQzNCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixLQUFLLEVBQUUsRUFBRTtRQUNULEdBQUcsRUFBRSxFQUFFO1FBQ1AsTUFBTSxDQUFDLEtBQUs7WUFDUixPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLO1lBQ1IsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUM1QixPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUNELEdBQUcsQ0FBQyxLQUFrQixFQUFFLFFBQVEsRUFBRSxJQUFJO1lBQ2xDLElBQUksS0FBNEIsQ0FBQztZQUNqQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUNqQyxJQUNJLFNBQVMsWUFBWSxhQUFhO2dCQUNsQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFDeEU7Z0JBQ0UsTUFBTSxJQUFJLEdBQUcsR0FBRztxQkFDWCxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7cUJBQzdCLEtBQUssRUFBRTtxQkFDUCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxJQUFJLEVBQUU7b0JBQ04sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFrQixDQUFDO2lCQUNuQzthQUNKO1lBQ0QsWUFBWTtpQkFDUCxhQUFhLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ2hDLFFBQVEsRUFBRSxJQUFJO2dCQUNkLE1BQU0sRUFBRTtvQkFDSixRQUFRLEVBQUUsS0FBSztpQkFDbEI7YUFDSixDQUFDO2lCQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDaEIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbEIsSUFBSSxNQUFNLEVBQUU7b0JBQ1IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ2pELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUU7d0JBQ3BCLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ2hFO2lCQUNKO2dCQUNELFFBQVEsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1lBQ1AsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUNKLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b2dnbGVNYXJrIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuaW1wb3J0IHsgaWNvbnMsIE1lbnVJdGVtIH0gZnJvbSAncHJvc2VtaXJyb3ItbWVudSc7XG5pbXBvcnQgeyBNYXJrVHlwZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBUZXh0U2VsZWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5pbXBvcnQgeyBNb2RhbFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9wcm92aWRlcnMvbW9kYWwvbW9kYWwuc2VydmljZSc7XG5pbXBvcnQgeyBMaW5rQXR0cnMsIExpbmtEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi8uLi9saW5rLWRpYWxvZy9saW5rLWRpYWxvZy5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBtYXJrQWN0aXZlIH0gZnJvbSAnLi9tZW51LWNvbW1vbic7XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbklzV2l0aGluTGluayhzdGF0ZTogRWRpdG9yU3RhdGUsIGFuY2hvcjogbnVtYmVyLCBoZWFkOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IGRvYyB9ID0gc3RhdGU7XG4gICAgY29uc3QgaGVhZExpbmsgPSBkb2NcbiAgICAgICAgLnJlc29sdmUoaGVhZClcbiAgICAgICAgLm1hcmtzKClcbiAgICAgICAgLmZpbmQobSA9PiBtLnR5cGUubmFtZSA9PT0gJ2xpbmsnKTtcbiAgICBjb25zdCBhbmNob3JMaW5rID0gZG9jXG4gICAgICAgIC5yZXNvbHZlKGFuY2hvcilcbiAgICAgICAgLm1hcmtzKClcbiAgICAgICAgLmZpbmQobSA9PiBtLnR5cGUubmFtZSA9PT0gJ2xpbmsnKTtcbiAgICBpZiAoaGVhZExpbmsgJiYgYW5jaG9yTGluayAmJiBoZWFkTGluay5lcShhbmNob3JMaW5rKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua0l0ZW0obGlua01hcms6IE1hcmtUeXBlLCBtb2RhbFNlcnZpY2U6IE1vZGFsU2VydmljZSkge1xuICAgIHJldHVybiBuZXcgTWVudUl0ZW0oe1xuICAgICAgICB0aXRsZTogJ0FkZCBvciByZW1vdmUgbGluaycsXG4gICAgICAgIGljb246IGljb25zLmxpbmssXG4gICAgICAgIGNsYXNzOiAnJyxcbiAgICAgICAgY3NzOiAnJyxcbiAgICAgICAgYWN0aXZlKHN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFya0FjdGl2ZShzdGF0ZSwgbGlua01hcmspO1xuICAgICAgICB9LFxuICAgICAgICBlbmFibGUoc3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiAhc2VsZWN0aW9uLmVtcHR5IHx8IHNlbGVjdGlvbklzV2l0aGluTGluayhzdGF0ZSwgc2VsZWN0aW9uLmFuY2hvciwgc2VsZWN0aW9uLmhlYWQpO1xuICAgICAgICB9LFxuICAgICAgICBydW4oc3RhdGU6IEVkaXRvclN0YXRlLCBkaXNwYXRjaCwgdmlldykge1xuICAgICAgICAgICAgbGV0IGF0dHJzOiBMaW5rQXR0cnMgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGlvbiwgZG9jIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uSXNXaXRoaW5MaW5rKHN0YXRlLCBzZWxlY3Rpb24uYW5jaG9yICsgMSwgc2VsZWN0aW9uLmhlYWQgLSAxKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IGRvY1xuICAgICAgICAgICAgICAgICAgICAucmVzb2x2ZShzZWxlY3Rpb24uYW5jaG9yICsgMSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcmtzKClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQobSA9PiBtLnR5cGUubmFtZSA9PT0gJ2xpbmsnKTtcbiAgICAgICAgICAgICAgICBpZiAobWFyaykge1xuICAgICAgICAgICAgICAgICAgICBhdHRycyA9IG1hcmsuYXR0cnMgYXMgTGlua0F0dHJzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZGFsU2VydmljZVxuICAgICAgICAgICAgICAgIC5mcm9tQ29tcG9uZW50KExpbmtEaWFsb2dDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGxvY2Fsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmc6IGF0dHJzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHIgPSBzdGF0ZS50cjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzZWxlY3Rpb24ucmFuZ2VzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHIgPSB0ci5yZW1vdmVNYXJrKCRmcm9tLnBvcywgJHRvLnBvcywgbGlua01hcmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5ocmVmICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyID0gdHIuYWRkTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIGxpbmtNYXJrLmNyZWF0ZShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4iXX0=