import { getOperationAST } from 'graphql';
const CREATE_ENTITY_REGEX = /Create([A-Za-z]+)Input/;
const UPDATE_ENTITY_REGEX = /Update([A-Za-z]+)Input/;
/**
 * Checks the current documentNode for an operation with a variable named "Create<Entity>Input" or "Update<Entity>Input"
 * and if a match is found, returns the <Entity> name.
 */
export function isEntityCreateOrUpdateMutation(documentNode) {
    const operationDef = getOperationAST(documentNode, null);
    if (operationDef && operationDef.variableDefinitions) {
        for (const variableDef of operationDef.variableDefinitions) {
            const namedType = extractInputType(variableDef.type);
            const inputTypeName = namedType.name.value;
            // special cases which don't follow the usual pattern
            if (inputTypeName === 'UpdateActiveAdministratorInput') {
                return 'Administrator';
            }
            const createMatch = inputTypeName.match(CREATE_ENTITY_REGEX);
            if (createMatch) {
                return createMatch[1];
            }
            const updateMatch = inputTypeName.match(UPDATE_ENTITY_REGEX);
            if (updateMatch) {
                return updateMatch[1];
            }
        }
    }
}
function extractInputType(type) {
    if (type.kind === 'NonNullType') {
        return extractInputType(type.type);
    }
    if (type.kind === 'ListType') {
        return extractInputType(type.type);
    }
    return type;
}
/**
 * Removes any `readonly` custom fields from an entity (including its translations).
 * To be used before submitting the entity for a create or update request.
 */
export function removeReadonlyCustomFields(variables, customFieldConfig) {
    if (variables.input) {
        removeReadonly(variables.input, customFieldConfig);
    }
    return removeReadonly(variables, customFieldConfig);
}
function removeReadonly(input, customFieldConfig) {
    for (const field of customFieldConfig) {
        if (field.readonly) {
            if (field.type === 'localeString') {
                if (hasTranslations(input)) {
                    for (const translation of input.translations) {
                        if (hasCustomFields(translation) &&
                            translation.customFields[field.name] !== undefined) {
                            delete translation.customFields[field.name];
                        }
                    }
                }
            }
            else {
                if (hasCustomFields(input) && input.customFields[field.name] !== undefined) {
                    delete input.customFields[field.name];
                }
            }
        }
    }
    return input;
}
function hasCustomFields(input) {
    return input != null && input.hasOwnProperty('customFields');
}
function hasTranslations(input) {
    return input != null && input.hasOwnProperty('translations');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvdXRpbHMvcmVtb3ZlLXJlYWRvbmx5LWN1c3RvbS1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFnQixlQUFlLEVBQTJCLE1BQU0sU0FBUyxDQUFDO0FBSWpGLE1BQU0sbUJBQW1CLEdBQUcsd0JBQXdCLENBQUM7QUFDckQsTUFBTSxtQkFBbUIsR0FBRyx3QkFBd0IsQ0FBQztBQUVyRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsOEJBQThCLENBQUMsWUFBMEI7SUFDckUsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsbUJBQW1CLEVBQUU7UUFDbEQsS0FBSyxNQUFNLFdBQVcsSUFBSSxZQUFZLENBQUMsbUJBQW1CLEVBQUU7WUFDeEQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBRTNDLHFEQUFxRDtZQUNyRCxJQUFJLGFBQWEsS0FBSyxnQ0FBZ0MsRUFBRTtnQkFDcEQsT0FBTyxlQUFlLENBQUM7YUFDMUI7WUFFRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLEVBQUU7Z0JBQ2IsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7WUFDRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLEVBQUU7Z0JBQ2IsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7U0FDSjtLQUNKO0FBQ0wsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsSUFBYztJQUNwQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO1FBQzdCLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUMxQixPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsMEJBQTBCLENBQ3RDLFNBQVksRUFDWixpQkFBc0M7SUFFdEMsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2pCLGNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7S0FDdEQ7SUFDRCxPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsS0FBVSxFQUFFLGlCQUFzQztJQUN0RSxLQUFLLE1BQU0sS0FBSyxJQUFJLGlCQUFpQixFQUFFO1FBQ25DLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNoQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssY0FBYyxFQUFFO2dCQUMvQixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDeEIsS0FBSyxNQUFNLFdBQVcsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO3dCQUMxQyxJQUNJLGVBQWUsQ0FBQyxXQUFXLENBQUM7NEJBQzVCLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFDcEQ7NEJBQ0UsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDL0M7cUJBQ0o7aUJBQ0o7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7b0JBQ3hFLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3pDO2FBQ0o7U0FDSjtLQUNKO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQVU7SUFDL0IsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQVU7SUFDL0IsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNpbXBsZURlZXBDbG9uZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2ltcGxlLWRlZXAtY2xvbmUnO1xuaW1wb3J0IHsgRG9jdW1lbnROb2RlLCBnZXRPcGVyYXRpb25BU1QsIE5hbWVkVHlwZU5vZGUsIFR5cGVOb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IEN1c3RvbUZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XG5cbmNvbnN0IENSRUFURV9FTlRJVFlfUkVHRVggPSAvQ3JlYXRlKFtBLVphLXpdKylJbnB1dC87XG5jb25zdCBVUERBVEVfRU5USVRZX1JFR0VYID0gL1VwZGF0ZShbQS1aYS16XSspSW5wdXQvO1xuXG4vKipcbiAqIENoZWNrcyB0aGUgY3VycmVudCBkb2N1bWVudE5vZGUgZm9yIGFuIG9wZXJhdGlvbiB3aXRoIGEgdmFyaWFibGUgbmFtZWQgXCJDcmVhdGU8RW50aXR5PklucHV0XCIgb3IgXCJVcGRhdGU8RW50aXR5PklucHV0XCJcbiAqIGFuZCBpZiBhIG1hdGNoIGlzIGZvdW5kLCByZXR1cm5zIHRoZSA8RW50aXR5PiBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRpdHlDcmVhdGVPclVwZGF0ZU11dGF0aW9uKGRvY3VtZW50Tm9kZTogRG9jdW1lbnROb2RlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBvcGVyYXRpb25EZWYgPSBnZXRPcGVyYXRpb25BU1QoZG9jdW1lbnROb2RlLCBudWxsKTtcbiAgICBpZiAob3BlcmF0aW9uRGVmICYmIG9wZXJhdGlvbkRlZi52YXJpYWJsZURlZmluaXRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgdmFyaWFibGVEZWYgb2Ygb3BlcmF0aW9uRGVmLnZhcmlhYmxlRGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVkVHlwZSA9IGV4dHJhY3RJbnB1dFR5cGUodmFyaWFibGVEZWYudHlwZSk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFR5cGVOYW1lID0gbmFtZWRUeXBlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZXMgd2hpY2ggZG9uJ3QgZm9sbG93IHRoZSB1c3VhbCBwYXR0ZXJuXG4gICAgICAgICAgICBpZiAoaW5wdXRUeXBlTmFtZSA9PT0gJ1VwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FkbWluaXN0cmF0b3InO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVNYXRjaCA9IGlucHV0VHlwZU5hbWUubWF0Y2goQ1JFQVRFX0VOVElUWV9SRUdFWCk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTWF0Y2hbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVNYXRjaCA9IGlucHV0VHlwZU5hbWUubWF0Y2goVVBEQVRFX0VOVElUWV9SRUdFWCk7XG4gICAgICAgICAgICBpZiAodXBkYXRlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlTWF0Y2hbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RJbnB1dFR5cGUodHlwZTogVHlwZU5vZGUpOiBOYW1lZFR5cGVOb2RlIHtcbiAgICBpZiAodHlwZS5raW5kID09PSAnTm9uTnVsbFR5cGUnKSB7XG4gICAgICAgIHJldHVybiBleHRyYWN0SW5wdXRUeXBlKHR5cGUudHlwZSk7XG4gICAgfVxuICAgIGlmICh0eXBlLmtpbmQgPT09ICdMaXN0VHlwZScpIHtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RJbnB1dFR5cGUodHlwZS50eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbnkgYHJlYWRvbmx5YCBjdXN0b20gZmllbGRzIGZyb20gYW4gZW50aXR5IChpbmNsdWRpbmcgaXRzIHRyYW5zbGF0aW9ucykuXG4gKiBUbyBiZSB1c2VkIGJlZm9yZSBzdWJtaXR0aW5nIHRoZSBlbnRpdHkgZm9yIGEgY3JlYXRlIG9yIHVwZGF0ZSByZXF1ZXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUmVhZG9ubHlDdXN0b21GaWVsZHM8VCBleHRlbmRzIHsgaW5wdXQ/OiBhbnkgfSAmIFJlY29yZDxzdHJpbmcsIGFueT4gPSBhbnk+KFxuICAgIHZhcmlhYmxlczogVCxcbiAgICBjdXN0b21GaWVsZENvbmZpZzogQ3VzdG9tRmllbGRDb25maWdbXSxcbik6IFQge1xuICAgIGlmICh2YXJpYWJsZXMuaW5wdXQpIHtcbiAgICAgICAgcmVtb3ZlUmVhZG9ubHkodmFyaWFibGVzLmlucHV0LCBjdXN0b21GaWVsZENvbmZpZyk7XG4gICAgfVxuICAgIHJldHVybiByZW1vdmVSZWFkb25seSh2YXJpYWJsZXMsIGN1c3RvbUZpZWxkQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVhZG9ubHkoaW5wdXQ6IGFueSwgY3VzdG9tRmllbGRDb25maWc6IEN1c3RvbUZpZWxkQ29uZmlnW10pIHtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGN1c3RvbUZpZWxkQ29uZmlnKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZWFkb25seSkge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdsb2NhbGVTdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zbGF0aW9ucyhpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc2xhdGlvbiBvZiBpbnB1dC50cmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDdXN0b21GaWVsZHModHJhbnNsYXRpb24pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24uY3VzdG9tRmllbGRzW2ZpZWxkLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0cmFuc2xhdGlvbi5jdXN0b21GaWVsZHNbZmllbGQubmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoYXNDdXN0b21GaWVsZHMoaW5wdXQpICYmIGlucHV0LmN1c3RvbUZpZWxkc1tmaWVsZC5uYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBpbnB1dC5jdXN0b21GaWVsZHNbZmllbGQubmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gaGFzQ3VzdG9tRmllbGRzKGlucHV0OiBhbnkpOiBpbnB1dCBpcyB7IGN1c3RvbUZpZWxkczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB9IHtcbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBpbnB1dC5oYXNPd25Qcm9wZXJ0eSgnY3VzdG9tRmllbGRzJyk7XG59XG5cbmZ1bmN0aW9uIGhhc1RyYW5zbGF0aW9ucyhpbnB1dDogYW55KTogaW5wdXQgaXMgeyB0cmFuc2xhdGlvbnM6IGFueVtdIH0ge1xuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIGlucHV0Lmhhc093blByb3BlcnR5KCd0cmFuc2xhdGlvbnMnKTtcbn1cbiJdfQ==