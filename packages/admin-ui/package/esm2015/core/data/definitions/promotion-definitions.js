import { gql } from 'apollo-angular';
import { CONFIGURABLE_OPERATION_DEF_FRAGMENT, CONFIGURABLE_OPERATION_FRAGMENT, ERROR_RESULT_FRAGMENT, } from './shared-definitions';
export const PROMOTION_FRAGMENT = gql `
    fragment Promotion on Promotion {
        id
        createdAt
        updatedAt
        name
        enabled
        couponCode
        perCustomerUsageLimit
        startsAt
        endsAt
        conditions {
            ...ConfigurableOperation
        }
        actions {
            ...ConfigurableOperation
        }
    }
    ${CONFIGURABLE_OPERATION_FRAGMENT}
`;
export const GET_PROMOTION_LIST = gql `
    query GetPromotionList($options: PromotionListOptions) {
        promotions(options: $options) {
            items {
                ...Promotion
            }
            totalItems
        }
    }
    ${PROMOTION_FRAGMENT}
`;
export const GET_PROMOTION = gql `
    query GetPromotion($id: ID!) {
        promotion(id: $id) {
            ...Promotion
        }
    }
    ${PROMOTION_FRAGMENT}
`;
export const GET_ADJUSTMENT_OPERATIONS = gql `
    query GetAdjustmentOperations {
        promotionConditions {
            ...ConfigurableOperationDef
        }
        promotionActions {
            ...ConfigurableOperationDef
        }
    }
    ${CONFIGURABLE_OPERATION_DEF_FRAGMENT}
`;
export const CREATE_PROMOTION = gql `
    mutation CreatePromotion($input: CreatePromotionInput!) {
        createPromotion(input: $input) {
            ...Promotion
            ...ErrorResult
        }
    }
    ${PROMOTION_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const UPDATE_PROMOTION = gql `
    mutation UpdatePromotion($input: UpdatePromotionInput!) {
        updatePromotion(input: $input) {
            ...Promotion
        }
    }
    ${PROMOTION_FRAGMENT}
`;
export const DELETE_PROMOTION = gql `
    mutation DeletePromotion($id: ID!) {
        deletePromotion(id: $id) {
            result
            message
        }
    }
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbW90aW9uLWRlZmluaXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL2RlZmluaXRpb25zL3Byb21vdGlvbi1kZWZpbml0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUNILG1DQUFtQyxFQUNuQywrQkFBK0IsRUFDL0IscUJBQXFCLEdBQ3hCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFrQi9CLCtCQUErQjtDQUNwQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7TUFTL0Isa0JBQWtCO0NBQ3ZCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNMUIsa0JBQWtCO0NBQ3ZCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7OztNQVN0QyxtQ0FBbUM7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztNQU83QixrQkFBa0I7TUFDbEIscUJBQXFCO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU03QixrQkFBa0I7Q0FDdkIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU9sQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3FsIH0gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xuXG5pbXBvcnQge1xuICAgIENPTkZJR1VSQUJMRV9PUEVSQVRJT05fREVGX0ZSQUdNRU5ULFxuICAgIENPTkZJR1VSQUJMRV9PUEVSQVRJT05fRlJBR01FTlQsXG4gICAgRVJST1JfUkVTVUxUX0ZSQUdNRU5ULFxufSBmcm9tICcuL3NoYXJlZC1kZWZpbml0aW9ucyc7XG5cbmV4cG9ydCBjb25zdCBQUk9NT1RJT05fRlJBR01FTlQgPSBncWxgXG4gICAgZnJhZ21lbnQgUHJvbW90aW9uIG9uIFByb21vdGlvbiB7XG4gICAgICAgIGlkXG4gICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICB1cGRhdGVkQXRcbiAgICAgICAgbmFtZVxuICAgICAgICBlbmFibGVkXG4gICAgICAgIGNvdXBvbkNvZGVcbiAgICAgICAgcGVyQ3VzdG9tZXJVc2FnZUxpbWl0XG4gICAgICAgIHN0YXJ0c0F0XG4gICAgICAgIGVuZHNBdFxuICAgICAgICBjb25kaXRpb25zIHtcbiAgICAgICAgICAgIC4uLkNvbmZpZ3VyYWJsZU9wZXJhdGlvblxuICAgICAgICB9XG4gICAgICAgIGFjdGlvbnMge1xuICAgICAgICAgICAgLi4uQ29uZmlndXJhYmxlT3BlcmF0aW9uXG4gICAgICAgIH1cbiAgICB9XG4gICAgJHtDT05GSUdVUkFCTEVfT1BFUkFUSU9OX0ZSQUdNRU5UfVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9QUk9NT1RJT05fTElTVCA9IGdxbGBcbiAgICBxdWVyeSBHZXRQcm9tb3Rpb25MaXN0KCRvcHRpb25zOiBQcm9tb3Rpb25MaXN0T3B0aW9ucykge1xuICAgICAgICBwcm9tb3Rpb25zKG9wdGlvbnM6ICRvcHRpb25zKSB7XG4gICAgICAgICAgICBpdGVtcyB7XG4gICAgICAgICAgICAgICAgLi4uUHJvbW90aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3RhbEl0ZW1zXG4gICAgICAgIH1cbiAgICB9XG4gICAgJHtQUk9NT1RJT05fRlJBR01FTlR9XG5gO1xuXG5leHBvcnQgY29uc3QgR0VUX1BST01PVElPTiA9IGdxbGBcbiAgICBxdWVyeSBHZXRQcm9tb3Rpb24oJGlkOiBJRCEpIHtcbiAgICAgICAgcHJvbW90aW9uKGlkOiAkaWQpIHtcbiAgICAgICAgICAgIC4uLlByb21vdGlvblxuICAgICAgICB9XG4gICAgfVxuICAgICR7UFJPTU9USU9OX0ZSQUdNRU5UfVxuYDtcblxuZXhwb3J0IGNvbnN0IEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMgPSBncWxgXG4gICAgcXVlcnkgR2V0QWRqdXN0bWVudE9wZXJhdGlvbnMge1xuICAgICAgICBwcm9tb3Rpb25Db25kaXRpb25zIHtcbiAgICAgICAgICAgIC4uLkNvbmZpZ3VyYWJsZU9wZXJhdGlvbkRlZlxuICAgICAgICB9XG4gICAgICAgIHByb21vdGlvbkFjdGlvbnMge1xuICAgICAgICAgICAgLi4uQ29uZmlndXJhYmxlT3BlcmF0aW9uRGVmXG4gICAgICAgIH1cbiAgICB9XG4gICAgJHtDT05GSUdVUkFCTEVfT1BFUkFUSU9OX0RFRl9GUkFHTUVOVH1cbmA7XG5cbmV4cG9ydCBjb25zdCBDUkVBVEVfUFJPTU9USU9OID0gZ3FsYFxuICAgIG11dGF0aW9uIENyZWF0ZVByb21vdGlvbigkaW5wdXQ6IENyZWF0ZVByb21vdGlvbklucHV0ISkge1xuICAgICAgICBjcmVhdGVQcm9tb3Rpb24oaW5wdXQ6ICRpbnB1dCkge1xuICAgICAgICAgICAgLi4uUHJvbW90aW9uXG4gICAgICAgICAgICAuLi5FcnJvclJlc3VsdFxuICAgICAgICB9XG4gICAgfVxuICAgICR7UFJPTU9USU9OX0ZSQUdNRU5UfVxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxuYDtcblxuZXhwb3J0IGNvbnN0IFVQREFURV9QUk9NT1RJT04gPSBncWxgXG4gICAgbXV0YXRpb24gVXBkYXRlUHJvbW90aW9uKCRpbnB1dDogVXBkYXRlUHJvbW90aW9uSW5wdXQhKSB7XG4gICAgICAgIHVwZGF0ZVByb21vdGlvbihpbnB1dDogJGlucHV0KSB7XG4gICAgICAgICAgICAuLi5Qcm9tb3Rpb25cbiAgICAgICAgfVxuICAgIH1cbiAgICAke1BST01PVElPTl9GUkFHTUVOVH1cbmA7XG5cbmV4cG9ydCBjb25zdCBERUxFVEVfUFJPTU9USU9OID0gZ3FsYFxuICAgIG11dGF0aW9uIERlbGV0ZVByb21vdGlvbigkaWQ6IElEISkge1xuICAgICAgICBkZWxldGVQcm9tb3Rpb24oaWQ6ICRpZCkge1xuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgIH1cbiAgICB9XG5gO1xuIl19