import { pick } from '@vendure/common/lib/pick';
import { from } from 'rxjs';
import { bufferCount, concatMap } from 'rxjs/operators';
import { CREATE_COLLECTION, DELETE_COLLECTION, GET_COLLECTION, GET_COLLECTION_CONTENTS, GET_COLLECTION_FILTERS, GET_COLLECTION_LIST, MOVE_COLLECTION, UPDATE_COLLECTION, } from '../definitions/collection-definitions';
export class CollectionDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getCollectionFilters() {
        return this.baseDataService.query(GET_COLLECTION_FILTERS);
    }
    getCollections(take = 10, skip = 0) {
        return this.baseDataService.query(GET_COLLECTION_LIST, {
            options: {
                take,
                skip,
            },
        });
    }
    getCollection(id) {
        return this.baseDataService.query(GET_COLLECTION, {
            id,
        });
    }
    createCollection(input) {
        return this.baseDataService.mutate(CREATE_COLLECTION, {
            input: pick(input, [
                'translations',
                'parentId',
                'assetIds',
                'featuredAssetId',
                'filters',
                'customFields',
            ]),
        });
    }
    updateCollection(input) {
        return this.baseDataService.mutate(UPDATE_COLLECTION, {
            input: pick(input, [
                'id',
                'isPrivate',
                'translations',
                'assetIds',
                'featuredAssetId',
                'filters',
                'customFields',
            ]),
        });
    }
    moveCollection(inputs) {
        return from(inputs).pipe(concatMap(input => this.baseDataService.mutate(MOVE_COLLECTION, { input })), bufferCount(inputs.length));
    }
    deleteCollection(id) {
        return this.baseDataService.mutate(DELETE_COLLECTION, {
            id,
        });
    }
    getCollectionContents(id, take = 10, skip = 0, filterTerm) {
        const filter = filterTerm
            ? { name: { contains: filterTerm } }
            : undefined;
        return this.baseDataService.query(GET_COLLECTION_CONTENTS, {
            id,
            options: {
                skip,
                take,
                filter,
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2NvbGxlY3Rpb24tZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFnQnhELE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDZCx1QkFBdUIsRUFDdkIsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsaUJBQWlCLEdBQ3BCLE1BQU0sdUNBQXVDLENBQUM7QUFJL0MsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRXhELG9CQUFvQjtRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUE2QixzQkFBc0IsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRCxjQUFjLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLG1CQUFtQixFQUNuQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7YUFDUDtTQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhLENBQUMsRUFBVTtRQUNwQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUErQyxjQUFjLEVBQUU7WUFDNUYsRUFBRTtTQUNMLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUE0QjtRQUN6QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixpQkFBaUIsRUFDakI7WUFDSSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZixjQUFjO2dCQUNkLFVBQVU7Z0JBQ1YsVUFBVTtnQkFDVixpQkFBaUI7Z0JBQ2pCLFNBQVM7Z0JBQ1QsY0FBYzthQUNqQixDQUFDO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQTRCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLGlCQUFpQixFQUNqQjtZQUNJLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUk7Z0JBQ0osV0FBVztnQkFDWCxjQUFjO2dCQUNkLFVBQVU7Z0JBQ1YsaUJBQWlCO2dCQUNqQixTQUFTO2dCQUNULGNBQWM7YUFDakIsQ0FBQztTQUNMLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBNkI7UUFDeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNwQixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDZCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDdkIsZUFBZSxFQUNmLEVBQUUsS0FBSyxFQUFFLENBQ1osQ0FDSixFQUNELFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQzdCLENBQUM7SUFDTixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixpQkFBaUIsRUFDakI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELHFCQUFxQixDQUFDLEVBQVUsRUFBRSxPQUFlLEVBQUUsRUFBRSxPQUFlLENBQUMsRUFBRSxVQUFtQjtRQUN0RixNQUFNLE1BQU0sR0FBRyxVQUFVO1lBQ3JCLENBQUMsQ0FBRSxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsRUFBZ0M7WUFDbkUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3Qix1QkFBdUIsRUFDdkI7WUFDSSxFQUFFO1lBQ0YsT0FBTyxFQUFFO2dCQUNMLElBQUk7Z0JBQ0osSUFBSTtnQkFDSixNQUFNO2FBQ1Q7U0FDSixDQUNKLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwaWNrIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9waWNrJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGJ1ZmZlckNvdW50LCBjb25jYXRNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gICAgQ29sbGVjdGlvbkZpbHRlclBhcmFtZXRlcixcbiAgICBDcmVhdGVDb2xsZWN0aW9uLFxuICAgIENyZWF0ZUNvbGxlY3Rpb25JbnB1dCxcbiAgICBEZWxldGVDb2xsZWN0aW9uLFxuICAgIEdldENvbGxlY3Rpb24sXG4gICAgR2V0Q29sbGVjdGlvbkNvbnRlbnRzLFxuICAgIEdldENvbGxlY3Rpb25GaWx0ZXJzLFxuICAgIEdldENvbGxlY3Rpb25MaXN0LFxuICAgIE1vdmVDb2xsZWN0aW9uLFxuICAgIE1vdmVDb2xsZWN0aW9uSW5wdXQsXG4gICAgVXBkYXRlQ29sbGVjdGlvbixcbiAgICBVcGRhdGVDb2xsZWN0aW9uSW5wdXQsXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBDUkVBVEVfQ09MTEVDVElPTixcbiAgICBERUxFVEVfQ09MTEVDVElPTixcbiAgICBHRVRfQ09MTEVDVElPTixcbiAgICBHRVRfQ09MTEVDVElPTl9DT05URU5UUyxcbiAgICBHRVRfQ09MTEVDVElPTl9GSUxURVJTLFxuICAgIEdFVF9DT0xMRUNUSU9OX0xJU1QsXG4gICAgTU9WRV9DT0xMRUNUSU9OLFxuICAgIFVQREFURV9DT0xMRUNUSU9OLFxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9jb2xsZWN0aW9uLWRlZmluaXRpb25zJztcblxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uRGF0YVNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZURhdGFTZXJ2aWNlOiBCYXNlRGF0YVNlcnZpY2UpIHt9XG5cbiAgICBnZXRDb2xsZWN0aW9uRmlsdGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldENvbGxlY3Rpb25GaWx0ZXJzLlF1ZXJ5PihHRVRfQ09MTEVDVElPTl9GSUxURVJTKTtcbiAgICB9XG5cbiAgICBnZXRDb2xsZWN0aW9ucyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0Q29sbGVjdGlvbkxpc3QuUXVlcnksIEdldENvbGxlY3Rpb25MaXN0LlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfQ09MTEVDVElPTl9MSVNULFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFrZSxcbiAgICAgICAgICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRDb2xsZWN0aW9uKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldENvbGxlY3Rpb24uUXVlcnksIEdldENvbGxlY3Rpb24uVmFyaWFibGVzPihHRVRfQ09MTEVDVElPTiwge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbGxlY3Rpb24oaW5wdXQ6IENyZWF0ZUNvbGxlY3Rpb25JbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZUNvbGxlY3Rpb24uTXV0YXRpb24sIENyZWF0ZUNvbGxlY3Rpb24uVmFyaWFibGVzPihcbiAgICAgICAgICAgIENSRUFURV9DT0xMRUNUSU9OLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlucHV0OiBwaWNrKGlucHV0LCBbXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2xhdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICAncGFyZW50SWQnLFxuICAgICAgICAgICAgICAgICAgICAnYXNzZXRJZHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmVhdHVyZWRBc3NldElkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbHRlcnMnLFxuICAgICAgICAgICAgICAgICAgICAnY3VzdG9tRmllbGRzJyxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29sbGVjdGlvbihpbnB1dDogVXBkYXRlQ29sbGVjdGlvbklucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlQ29sbGVjdGlvbi5NdXRhdGlvbiwgVXBkYXRlQ29sbGVjdGlvbi5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgVVBEQVRFX0NPTExFQ1RJT04sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6IHBpY2soaW5wdXQsIFtcbiAgICAgICAgICAgICAgICAgICAgJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzUHJpdmF0ZScsXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2xhdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICAnYXNzZXRJZHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmVhdHVyZWRBc3NldElkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZpbHRlcnMnLFxuICAgICAgICAgICAgICAgICAgICAnY3VzdG9tRmllbGRzJyxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbW92ZUNvbGxlY3Rpb24oaW5wdXRzOiBNb3ZlQ29sbGVjdGlvbklucHV0W10pIHtcbiAgICAgICAgcmV0dXJuIGZyb20oaW5wdXRzKS5waXBlKFxuICAgICAgICAgICAgY29uY2F0TWFwKGlucHV0ID0+XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPE1vdmVDb2xsZWN0aW9uLk11dGF0aW9uLCBNb3ZlQ29sbGVjdGlvbi5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgICAgICAgICBNT1ZFX0NPTExFQ1RJT04sXG4gICAgICAgICAgICAgICAgICAgIHsgaW5wdXQgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGJ1ZmZlckNvdW50KGlucHV0cy5sZW5ndGgpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGRlbGV0ZUNvbGxlY3Rpb24oaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZUNvbGxlY3Rpb24uTXV0YXRpb24sIERlbGV0ZUNvbGxlY3Rpb24uVmFyaWFibGVzPihcbiAgICAgICAgICAgIERFTEVURV9DT0xMRUNUSU9OLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRDb2xsZWN0aW9uQ29udGVudHMoaWQ6IHN0cmluZywgdGFrZTogbnVtYmVyID0gMTAsIHNraXA6IG51bWJlciA9IDAsIGZpbHRlclRlcm0/OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gZmlsdGVyVGVybVxuICAgICAgICAgICAgPyAoeyBuYW1lOiB7IGNvbnRhaW5zOiBmaWx0ZXJUZXJtIH0gfSBhcyBDb2xsZWN0aW9uRmlsdGVyUGFyYW1ldGVyKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRDb2xsZWN0aW9uQ29udGVudHMuUXVlcnksIEdldENvbGxlY3Rpb25Db250ZW50cy5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX0NPTExFQ1RJT05fQ09OVEVOVFMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19