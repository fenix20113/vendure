import { pick } from '@vendure/common/lib/pick';
import { CREATE_SHIPPING_METHOD, DELETE_SHIPPING_METHOD, GET_SHIPPING_METHOD, GET_SHIPPING_METHOD_LIST, GET_SHIPPING_METHOD_OPERATIONS, TEST_ELIGIBLE_SHIPPING_METHODS, TEST_SHIPPING_METHOD, UPDATE_SHIPPING_METHOD, } from '../definitions/shipping-definitions';
export class ShippingMethodDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getShippingMethods(take = 10, skip = 0) {
        return this.baseDataService.query(GET_SHIPPING_METHOD_LIST, {
            options: {
                take,
                skip,
            },
        });
    }
    getShippingMethod(id) {
        return this.baseDataService.query(GET_SHIPPING_METHOD, {
            id,
        });
    }
    getShippingMethodOperations() {
        return this.baseDataService.query(GET_SHIPPING_METHOD_OPERATIONS);
    }
    createShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(CREATE_SHIPPING_METHOD, variables);
    }
    updateShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'id',
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(UPDATE_SHIPPING_METHOD, variables);
    }
    deleteShippingMethod(id) {
        return this.baseDataService.mutate(DELETE_SHIPPING_METHOD, {
            id,
        });
    }
    testShippingMethod(input) {
        return this.baseDataService.query(TEST_SHIPPING_METHOD, {
            input,
        });
    }
    testEligibleShippingMethods(input) {
        return this.baseDataService.query(TEST_ELIGIBLE_SHIPPING_METHODS, {
            input,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvc2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFnQmhELE9BQU8sRUFDSCxzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQix3QkFBd0IsRUFDeEIsOEJBQThCLEVBQzlCLDhCQUE4QixFQUM5QixvQkFBb0IsRUFDcEIsc0JBQXNCLEdBQ3pCLE1BQU0scUNBQXFDLENBQUM7QUFJN0MsTUFBTSxPQUFPLHlCQUF5QjtJQUNsQyxZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRXhELGtCQUFrQixDQUFDLE9BQWUsRUFBRSxFQUFFLE9BQWUsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3Qix3QkFBd0IsRUFDeEI7WUFDSSxPQUFPLEVBQUU7Z0JBQ0wsSUFBSTtnQkFDSixJQUFJO2FBQ1A7U0FDSixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBVTtRQUN4QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3QixtQkFBbUIsRUFDbkI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELDJCQUEyQjtRQUN2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFvQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxLQUFnQztRQUNqRCxNQUFNLFNBQVMsR0FBbUM7WUFDOUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsTUFBTTtnQkFDTixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osb0JBQW9CO2dCQUNwQixjQUFjO2dCQUNkLGNBQWM7YUFDakIsQ0FBQztTQUNMLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEIsU0FBUyxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsb0JBQW9CLENBQUMsS0FBZ0M7UUFDakQsTUFBTSxTQUFTLEdBQW1DO1lBQzlDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osb0JBQW9CO2dCQUNwQixjQUFjO2dCQUNkLGNBQWM7YUFDakIsQ0FBQztTQUNMLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEIsU0FBUyxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsb0JBQW9CLENBQUMsRUFBVTtRQUMzQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixzQkFBc0IsRUFDdEI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQThCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLG9CQUFvQixFQUNwQjtZQUNJLEtBQUs7U0FDUixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsMkJBQTJCLENBQUMsS0FBdUM7UUFDL0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FHL0IsOEJBQThCLEVBQUU7WUFDOUIsS0FBSztTQUNSLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBpY2sgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3BpY2snO1xuXG5pbXBvcnQge1xuICAgIENyZWF0ZVNoaXBwaW5nTWV0aG9kLFxuICAgIENyZWF0ZVNoaXBwaW5nTWV0aG9kSW5wdXQsXG4gICAgRGVsZXRlU2hpcHBpbmdNZXRob2QsXG4gICAgR2V0U2hpcHBpbmdNZXRob2QsXG4gICAgR2V0U2hpcHBpbmdNZXRob2RMaXN0LFxuICAgIEdldFNoaXBwaW5nTWV0aG9kT3BlcmF0aW9ucyxcbiAgICBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMsXG4gICAgVGVzdEVsaWdpYmxlU2hpcHBpbmdNZXRob2RzSW5wdXQsXG4gICAgVGVzdFNoaXBwaW5nTWV0aG9kLFxuICAgIFRlc3RTaGlwcGluZ01ldGhvZElucHV0LFxuICAgIFVwZGF0ZVNoaXBwaW5nTWV0aG9kLFxuICAgIFVwZGF0ZVNoaXBwaW5nTWV0aG9kSW5wdXQsXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBDUkVBVEVfU0hJUFBJTkdfTUVUSE9ELFxuICAgIERFTEVURV9TSElQUElOR19NRVRIT0QsXG4gICAgR0VUX1NISVBQSU5HX01FVEhPRCxcbiAgICBHRVRfU0hJUFBJTkdfTUVUSE9EX0xJU1QsXG4gICAgR0VUX1NISVBQSU5HX01FVEhPRF9PUEVSQVRJT05TLFxuICAgIFRFU1RfRUxJR0lCTEVfU0hJUFBJTkdfTUVUSE9EUyxcbiAgICBURVNUX1NISVBQSU5HX01FVEhPRCxcbiAgICBVUERBVEVfU0hJUFBJTkdfTUVUSE9ELFxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9zaGlwcGluZy1kZWZpbml0aW9ucyc7XG5cbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgU2hpcHBpbmdNZXRob2REYXRhU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlRGF0YVNlcnZpY2U6IEJhc2VEYXRhU2VydmljZSkge31cblxuICAgIGdldFNoaXBwaW5nTWV0aG9kcyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0U2hpcHBpbmdNZXRob2RMaXN0LlF1ZXJ5LCBHZXRTaGlwcGluZ01ldGhvZExpc3QuVmFyaWFibGVzPihcbiAgICAgICAgICAgIEdFVF9TSElQUElOR19NRVRIT0RfTElTVCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHRha2UsXG4gICAgICAgICAgICAgICAgICAgIHNraXAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0U2hpcHBpbmdNZXRob2QoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0U2hpcHBpbmdNZXRob2QuUXVlcnksIEdldFNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfU0hJUFBJTkdfTUVUSE9ELFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRTaGlwcGluZ01ldGhvZE9wZXJhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRTaGlwcGluZ01ldGhvZE9wZXJhdGlvbnMuUXVlcnk+KEdFVF9TSElQUElOR19NRVRIT0RfT1BFUkFUSU9OUyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU2hpcHBpbmdNZXRob2QoaW5wdXQ6IENyZWF0ZVNoaXBwaW5nTWV0aG9kSW5wdXQpIHtcbiAgICAgICAgY29uc3QgdmFyaWFibGVzOiBDcmVhdGVTaGlwcGluZ01ldGhvZC5WYXJpYWJsZXMgPSB7XG4gICAgICAgICAgICBpbnB1dDogcGljayhpbnB1dCwgW1xuICAgICAgICAgICAgICAgICdjb2RlJyxcbiAgICAgICAgICAgICAgICAnY2hlY2tlcicsXG4gICAgICAgICAgICAgICAgJ2NhbGN1bGF0b3InLFxuICAgICAgICAgICAgICAgICdmdWxmaWxsbWVudEhhbmRsZXInLFxuICAgICAgICAgICAgICAgICdjdXN0b21GaWVsZHMnLFxuICAgICAgICAgICAgICAgICd0cmFuc2xhdGlvbnMnLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q3JlYXRlU2hpcHBpbmdNZXRob2QuTXV0YXRpb24sIENyZWF0ZVNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBDUkVBVEVfU0hJUFBJTkdfTUVUSE9ELFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZVNoaXBwaW5nTWV0aG9kKGlucHV0OiBVcGRhdGVTaGlwcGluZ01ldGhvZElucHV0KSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlczogVXBkYXRlU2hpcHBpbmdNZXRob2QuVmFyaWFibGVzID0ge1xuICAgICAgICAgICAgaW5wdXQ6IHBpY2soaW5wdXQsIFtcbiAgICAgICAgICAgICAgICAnaWQnLFxuICAgICAgICAgICAgICAgICdjb2RlJyxcbiAgICAgICAgICAgICAgICAnY2hlY2tlcicsXG4gICAgICAgICAgICAgICAgJ2NhbGN1bGF0b3InLFxuICAgICAgICAgICAgICAgICdmdWxmaWxsbWVudEhhbmRsZXInLFxuICAgICAgICAgICAgICAgICdjdXN0b21GaWVsZHMnLFxuICAgICAgICAgICAgICAgICd0cmFuc2xhdGlvbnMnLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlU2hpcHBpbmdNZXRob2QuTXV0YXRpb24sIFVwZGF0ZVNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBVUERBVEVfU0hJUFBJTkdfTUVUSE9ELFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGRlbGV0ZVNoaXBwaW5nTWV0aG9kKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxEZWxldGVTaGlwcGluZ01ldGhvZC5NdXRhdGlvbiwgRGVsZXRlU2hpcHBpbmdNZXRob2QuVmFyaWFibGVzPihcbiAgICAgICAgICAgIERFTEVURV9TSElQUElOR19NRVRIT0QsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRlc3RTaGlwcGluZ01ldGhvZChpbnB1dDogVGVzdFNoaXBwaW5nTWV0aG9kSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PFRlc3RTaGlwcGluZ01ldGhvZC5RdWVyeSwgVGVzdFNoaXBwaW5nTWV0aG9kLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBURVNUX1NISVBQSU5HX01FVEhPRCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdGVzdEVsaWdpYmxlU2hpcHBpbmdNZXRob2RzKGlucHV0OiBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHNJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8XG4gICAgICAgICAgICBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMuUXVlcnksXG4gICAgICAgICAgICBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMuVmFyaWFibGVzXG4gICAgICAgID4oVEVTVF9FTElHSUJMRV9TSElQUElOR19NRVRIT0RTLCB7XG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19