import { GET_NEWTORK_STATUS, GET_UI_STATE, GET_USER_STATUS, REQUEST_COMPLETED, REQUEST_STARTED, SET_ACTIVE_CHANNEL, SET_AS_LOGGED_IN, SET_AS_LOGGED_OUT, SET_UI_LANGUAGE, SET_UI_THEME, UPDATE_USER_CHANNELS, } from '../definitions/client-definitions';
/**
 * Note: local queries all have a fetch-policy of "cache-first" explicitly specified due to:
 * https://github.com/apollographql/apollo-link-state/issues/236
 */
export class ClientDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    startRequest() {
        return this.baseDataService.mutate(REQUEST_STARTED);
    }
    completeRequest() {
        return this.baseDataService.mutate(REQUEST_COMPLETED);
    }
    getNetworkStatus() {
        return this.baseDataService.query(GET_NEWTORK_STATUS, {}, 'cache-first');
    }
    loginSuccess(username, activeChannelId, channels) {
        return this.baseDataService.mutate(SET_AS_LOGGED_IN, {
            input: {
                username,
                loginTime: Date.now().toString(),
                activeChannelId,
                channels,
            },
        });
    }
    logOut() {
        return this.baseDataService.mutate(SET_AS_LOGGED_OUT);
    }
    userStatus() {
        return this.baseDataService.query(GET_USER_STATUS, {}, 'cache-first');
    }
    uiState() {
        return this.baseDataService.query(GET_UI_STATE, {}, 'cache-first');
    }
    setUiLanguage(languageCode) {
        return this.baseDataService.mutate(SET_UI_LANGUAGE, {
            languageCode,
        });
    }
    setUiTheme(theme) {
        return this.baseDataService.mutate(SET_UI_THEME, {
            theme,
        });
    }
    setActiveChannel(channelId) {
        return this.baseDataService.mutate(SET_ACTIVE_CHANNEL, {
            channelId,
        });
    }
    updateUserChannels(channels) {
        return this.baseDataService.mutate(UPDATE_USER_CHANNELS, {
            channels,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvY2xpZW50LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlQSxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLFlBQVksRUFDWixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsWUFBWSxFQUNaLG9CQUFvQixHQUN2QixNQUFNLG1DQUFtQyxDQUFDO0FBSTNDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDMUIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUV4RCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBMEIsZUFBZSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUE0QixpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUF5QixrQkFBa0IsRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDckcsQ0FBQztJQUVELFlBQVksQ0FBQyxRQUFnQixFQUFFLGVBQXVCLEVBQUUsUUFBOEI7UUFDbEYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsZ0JBQWdCLEVBQ2hCO1lBQ0ksS0FBSyxFQUFFO2dCQUNILFFBQVE7Z0JBQ1IsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2hDLGVBQWU7Z0JBQ2YsUUFBUTthQUNYO1NBQ0osQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFzQixlQUFlLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBbUIsWUFBWSxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsYUFBYSxDQUFDLFlBQTBCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQWtELGVBQWUsRUFBRTtZQUNqRyxZQUFZO1NBQ2YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRDLFlBQVksRUFBRTtZQUN4RixLQUFLO1NBQ1IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGdCQUFnQixDQUFDLFNBQWlCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLGtCQUFrQixFQUNsQjtZQUNJLFNBQVM7U0FDWixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsa0JBQWtCLENBQUMsUUFBbUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsb0JBQW9CLEVBQ3BCO1lBQ0ksUUFBUTtTQUNYLENBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ3VycmVudFVzZXJDaGFubmVsLFxuICAgIEN1cnJlbnRVc2VyQ2hhbm5lbElucHV0LFxuICAgIEdldE5ldHdvcmtTdGF0dXMsXG4gICAgR2V0VWlTdGF0ZSxcbiAgICBHZXRVc2VyU3RhdHVzLFxuICAgIExhbmd1YWdlQ29kZSxcbiAgICBSZXF1ZXN0Q29tcGxldGVkLFxuICAgIFJlcXVlc3RTdGFydGVkLFxuICAgIFNldEFjdGl2ZUNoYW5uZWwsXG4gICAgU2V0QXNMb2dnZWRJbixcbiAgICBTZXRVaUxhbmd1YWdlLFxuICAgIFNldFVpVGhlbWUsXG4gICAgVXBkYXRlVXNlckNoYW5uZWxzLFxufSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcbmltcG9ydCB7XG4gICAgR0VUX05FV1RPUktfU1RBVFVTLFxuICAgIEdFVF9VSV9TVEFURSxcbiAgICBHRVRfVVNFUl9TVEFUVVMsXG4gICAgUkVRVUVTVF9DT01QTEVURUQsXG4gICAgUkVRVUVTVF9TVEFSVEVELFxuICAgIFNFVF9BQ1RJVkVfQ0hBTk5FTCxcbiAgICBTRVRfQVNfTE9HR0VEX0lOLFxuICAgIFNFVF9BU19MT0dHRURfT1VULFxuICAgIFNFVF9VSV9MQU5HVUFHRSxcbiAgICBTRVRfVUlfVEhFTUUsXG4gICAgVVBEQVRFX1VTRVJfQ0hBTk5FTFMsXG59IGZyb20gJy4uL2RlZmluaXRpb25zL2NsaWVudC1kZWZpbml0aW9ucyc7XG5cbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xuXG4vKipcbiAqIE5vdGU6IGxvY2FsIHF1ZXJpZXMgYWxsIGhhdmUgYSBmZXRjaC1wb2xpY3kgb2YgXCJjYWNoZS1maXJzdFwiIGV4cGxpY2l0bHkgc3BlY2lmaWVkIGR1ZSB0bzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2Fwb2xsby1saW5rLXN0YXRlL2lzc3Vlcy8yMzZcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWVudERhdGFTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxuXG4gICAgc3RhcnRSZXF1ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFJlcXVlc3RTdGFydGVkLk11dGF0aW9uPihSRVFVRVNUX1NUQVJURUQpO1xuICAgIH1cblxuICAgIGNvbXBsZXRlUmVxdWVzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxSZXF1ZXN0Q29tcGxldGVkLk11dGF0aW9uPihSRVFVRVNUX0NPTVBMRVRFRCk7XG4gICAgfVxuXG4gICAgZ2V0TmV0d29ya1N0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldE5ldHdvcmtTdGF0dXMuUXVlcnk+KEdFVF9ORVdUT1JLX1NUQVRVUywge30sICdjYWNoZS1maXJzdCcpO1xuICAgIH1cblxuICAgIGxvZ2luU3VjY2Vzcyh1c2VybmFtZTogc3RyaW5nLCBhY3RpdmVDaGFubmVsSWQ6IHN0cmluZywgY2hhbm5lbHM6IEN1cnJlbnRVc2VyQ2hhbm5lbFtdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8U2V0QXNMb2dnZWRJbi5NdXRhdGlvbiwgU2V0QXNMb2dnZWRJbi5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgU0VUX0FTX0xPR0dFRF9JTixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbG9naW5UaW1lOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNoYW5uZWxJZCxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbG9nT3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlKFNFVF9BU19MT0dHRURfT1VUKTtcbiAgICB9XG5cbiAgICB1c2VyU3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0VXNlclN0YXR1cy5RdWVyeT4oR0VUX1VTRVJfU1RBVFVTLCB7fSwgJ2NhY2hlLWZpcnN0Jyk7XG4gICAgfVxuXG4gICAgdWlTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFVpU3RhdGUuUXVlcnk+KEdFVF9VSV9TVEFURSwge30sICdjYWNoZS1maXJzdCcpO1xuICAgIH1cblxuICAgIHNldFVpTGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlOiBMYW5ndWFnZUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxTZXRVaUxhbmd1YWdlLk11dGF0aW9uLCBTZXRVaUxhbmd1YWdlLlZhcmlhYmxlcz4oU0VUX1VJX0xBTkdVQUdFLCB7XG4gICAgICAgICAgICBsYW5ndWFnZUNvZGUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFVpVGhlbWUodGhlbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFNldFVpVGhlbWUuTXV0YXRpb24sIFNldFVpVGhlbWUuVmFyaWFibGVzPihTRVRfVUlfVEhFTUUsIHtcbiAgICAgICAgICAgIHRoZW1lLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRBY3RpdmVDaGFubmVsKGNoYW5uZWxJZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8U2V0QWN0aXZlQ2hhbm5lbC5NdXRhdGlvbiwgU2V0QWN0aXZlQ2hhbm5lbC5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgU0VUX0FDVElWRV9DSEFOTkVMLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlVXNlckNoYW5uZWxzKGNoYW5uZWxzOiBDdXJyZW50VXNlckNoYW5uZWxJbnB1dFtdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlVXNlckNoYW5uZWxzLk11dGF0aW9uLCBVcGRhdGVVc2VyQ2hhbm5lbHMuVmFyaWFibGVzPihcbiAgICAgICAgICAgIFVQREFURV9VU0VSX0NIQU5ORUxTLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoYW5uZWxzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=