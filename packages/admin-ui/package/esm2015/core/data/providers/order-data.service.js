import { ADD_MANUAL_PAYMENT_TO_ORDER, ADD_NOTE_TO_ORDER, CANCEL_ORDER, CREATE_FULFILLMENT, DELETE_ORDER_NOTE, GET_ORDER, GET_ORDERS_LIST, GET_ORDER_HISTORY, GET_ORDER_SUMMARY, MODIFY_ORDER, REFUND_ORDER, SETTLE_PAYMENT, SETTLE_REFUND, TRANSITION_FULFILLMENT_TO_STATE, TRANSITION_ORDER_TO_STATE, TRANSITION_PAYMENT_TO_STATE, UPDATE_ORDER_CUSTOM_FIELDS, UPDATE_ORDER_NOTE, } from '../definitions/order-definitions';
export class OrderDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getOrders(options = { take: 10 }) {
        return this.baseDataService.query(GET_ORDERS_LIST, {
            options,
        });
    }
    getOrder(id) {
        return this.baseDataService.query(GET_ORDER, { id });
    }
    getOrderHistory(id, options) {
        return this.baseDataService.query(GET_ORDER_HISTORY, {
            id,
            options,
        });
    }
    settlePayment(id) {
        return this.baseDataService.mutate(SETTLE_PAYMENT, {
            id,
        });
    }
    transitionPaymentToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_PAYMENT_TO_STATE, {
            id,
            state,
        });
    }
    createFulfillment(input) {
        return this.baseDataService.mutate(CREATE_FULFILLMENT, {
            input,
        });
    }
    transitionFulfillmentToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_FULFILLMENT_TO_STATE, {
            id,
            state,
        });
    }
    cancelOrder(input) {
        return this.baseDataService.mutate(CANCEL_ORDER, {
            input,
        });
    }
    refundOrder(input) {
        return this.baseDataService.mutate(REFUND_ORDER, {
            input,
        });
    }
    settleRefund(input, orderId) {
        return this.baseDataService.mutate(SETTLE_REFUND, {
            input,
        });
    }
    addNoteToOrder(input) {
        return this.baseDataService.mutate(ADD_NOTE_TO_ORDER, {
            input,
        });
    }
    updateOrderNote(input) {
        return this.baseDataService.mutate(UPDATE_ORDER_NOTE, {
            input,
        });
    }
    deleteOrderNote(id) {
        return this.baseDataService.mutate(DELETE_ORDER_NOTE, {
            id,
        });
    }
    transitionToState(id, state) {
        return this.baseDataService.mutate(TRANSITION_ORDER_TO_STATE, {
            id,
            state,
        });
    }
    updateOrderCustomFields(input) {
        return this.baseDataService.mutate(UPDATE_ORDER_CUSTOM_FIELDS, {
            input,
        });
    }
    getOrderSummary(start, end) {
        return this.baseDataService.query(GET_ORDER_SUMMARY, {
            start: start.toISOString(),
            end: end.toISOString(),
        });
    }
    modifyOrder(input) {
        return this.baseDataService.mutate(MODIFY_ORDER, {
            input,
        });
    }
    addManualPaymentToOrder(input) {
        return this.baseDataService.mutate(ADD_MANUAL_PAYMENT_TO_ORDER, { input });
    }
}
//# sourceMappingURL=data:application/json;base64,