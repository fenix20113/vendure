import { Injectable } from '@angular/core';
import { AdministratorDataService } from './administrator-data.service';
import { AuthDataService } from './auth-data.service';
import { BaseDataService } from './base-data.service';
import { ClientDataService } from './client-data.service';
import { CollectionDataService } from './collection-data.service';
import { CustomerDataService } from './customer-data.service';
import { FacetDataService } from './facet-data.service';
import { OrderDataService } from './order-data.service';
import { ProductDataService } from './product-data.service';
import { PromotionDataService } from './promotion-data.service';
import { SettingsDataService } from './settings-data.service';
import { ShippingMethodDataService } from './shipping-method-data.service';
export class DataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
        this.promotion = new PromotionDataService(baseDataService);
        this.administrator = new AdministratorDataService(baseDataService);
        this.auth = new AuthDataService(baseDataService);
        this.collection = new CollectionDataService(baseDataService);
        this.product = new ProductDataService(baseDataService);
        this.client = new ClientDataService(baseDataService);
        this.facet = new FacetDataService(baseDataService);
        this.order = new OrderDataService(baseDataService);
        this.settings = new SettingsDataService(baseDataService);
        this.customer = new CustomerDataService(baseDataService);
        this.shippingMethod = new ShippingMethodDataService(baseDataService);
    }
    /**
     * Perform a GraphQL query.
     */
    query(query, variables, fetchPolicy = 'cache-and-network') {
        return this.baseDataService.query(query, variables, fetchPolicy);
    }
    /**
     * Perform a GraphQL mutation.
     */
    mutate(mutation, variables, update) {
        return this.baseDataService.mutate(mutation, variables, update);
    }
}
DataService.decorators = [
    { type: Injectable }
];
DataService.ctorParameters = () => [
    { type: BaseDataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9kYXRhL3Byb3ZpZGVycy9kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU8zQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzNFLE1BQU0sT0FBTyxXQUFXO0lBYXBCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHdCQUF3QixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQ0QsS0FBbUIsRUFDbkIsU0FBYSxFQUNiLGNBQXFDLG1CQUFtQjtRQUV4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUNGLFFBQXNCLEVBQ3RCLFNBQWEsRUFDYixNQUE2QjtRQUU3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7O1lBaERKLFVBQVU7OztZQVhGLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNdXRhdGlvblVwZGF0ZXJGbiwgV2F0Y2hRdWVyeUZldGNoUG9saWN5IH0gZnJvbSAnQGFwb2xsby9jbGllbnQvY29yZSc7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUXVlcnlSZXN1bHQgfSBmcm9tICcuLi9xdWVyeS1yZXN1bHQnO1xuXG5pbXBvcnQgeyBBZG1pbmlzdHJhdG9yRGF0YVNlcnZpY2UgfSBmcm9tICcuL2FkbWluaXN0cmF0b3ItZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhEYXRhU2VydmljZSB9IGZyb20gJy4vYXV0aC1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBDbGllbnREYXRhU2VydmljZSB9IGZyb20gJy4vY2xpZW50LWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uRGF0YVNlcnZpY2UgfSBmcm9tICcuL2NvbGxlY3Rpb24tZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IEN1c3RvbWVyRGF0YVNlcnZpY2UgfSBmcm9tICcuL2N1c3RvbWVyLWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBGYWNldERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9mYWNldC1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgT3JkZXJEYXRhU2VydmljZSB9IGZyb20gJy4vb3JkZXItZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2R1Y3REYXRhU2VydmljZSB9IGZyb20gJy4vcHJvZHVjdC1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvbW90aW9uRGF0YVNlcnZpY2UgfSBmcm9tICcuL3Byb21vdGlvbi1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NEYXRhU2VydmljZSB9IGZyb20gJy4vc2V0dGluZ3MtZGF0YS5zZXJ2aWNlJztcbmltcG9ydCB7IFNoaXBwaW5nTWV0aG9kRGF0YVNlcnZpY2UgfSBmcm9tICcuL3NoaXBwaW5nLW1ldGhvZC1kYXRhLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGF0YVNlcnZpY2Uge1xuICAgIHByb21vdGlvbjogUHJvbW90aW9uRGF0YVNlcnZpY2U7XG4gICAgYWRtaW5pc3RyYXRvcjogQWRtaW5pc3RyYXRvckRhdGFTZXJ2aWNlO1xuICAgIGF1dGg6IEF1dGhEYXRhU2VydmljZTtcbiAgICBjb2xsZWN0aW9uOiBDb2xsZWN0aW9uRGF0YVNlcnZpY2U7XG4gICAgcHJvZHVjdDogUHJvZHVjdERhdGFTZXJ2aWNlO1xuICAgIGNsaWVudDogQ2xpZW50RGF0YVNlcnZpY2U7XG4gICAgZmFjZXQ6IEZhY2V0RGF0YVNlcnZpY2U7XG4gICAgb3JkZXI6IE9yZGVyRGF0YVNlcnZpY2U7XG4gICAgc2V0dGluZ3M6IFNldHRpbmdzRGF0YVNlcnZpY2U7XG4gICAgY3VzdG9tZXI6IEN1c3RvbWVyRGF0YVNlcnZpY2U7XG4gICAgc2hpcHBpbmdNZXRob2Q6IFNoaXBwaW5nTWV0aG9kRGF0YVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMucHJvbW90aW9uID0gbmV3IFByb21vdGlvbkRhdGFTZXJ2aWNlKGJhc2VEYXRhU2VydmljZSk7XG4gICAgICAgIHRoaXMuYWRtaW5pc3RyYXRvciA9IG5ldyBBZG1pbmlzdHJhdG9yRGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5hdXRoID0gbmV3IEF1dGhEYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbkRhdGFTZXJ2aWNlKGJhc2VEYXRhU2VydmljZSk7XG4gICAgICAgIHRoaXMucHJvZHVjdCA9IG5ldyBQcm9kdWN0RGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50RGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5mYWNldCA9IG5ldyBGYWNldERhdGFTZXJ2aWNlKGJhc2VEYXRhU2VydmljZSk7XG4gICAgICAgIHRoaXMub3JkZXIgPSBuZXcgT3JkZXJEYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gbmV3IFNldHRpbmdzRGF0YVNlcnZpY2UoYmFzZURhdGFTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5jdXN0b21lciA9IG5ldyBDdXN0b21lckRhdGFTZXJ2aWNlKGJhc2VEYXRhU2VydmljZSk7XG4gICAgICAgIHRoaXMuc2hpcHBpbmdNZXRob2QgPSBuZXcgU2hpcHBpbmdNZXRob2REYXRhU2VydmljZShiYXNlRGF0YVNlcnZpY2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBHcmFwaFFMIHF1ZXJ5LlxuICAgICAqL1xuICAgIHF1ZXJ5PFQsIFYgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcbiAgICAgICAgcXVlcnk6IERvY3VtZW50Tm9kZSxcbiAgICAgICAgdmFyaWFibGVzPzogVixcbiAgICAgICAgZmV0Y2hQb2xpY3k6IFdhdGNoUXVlcnlGZXRjaFBvbGljeSA9ICdjYWNoZS1hbmQtbmV0d29yaycsXG4gICAgKTogUXVlcnlSZXN1bHQ8VCwgVj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnkocXVlcnksIHZhcmlhYmxlcywgZmV0Y2hQb2xpY3kpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBHcmFwaFFMIG11dGF0aW9uLlxuICAgICAqL1xuICAgIG11dGF0ZTxULCBWID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXG4gICAgICAgIG11dGF0aW9uOiBEb2N1bWVudE5vZGUsXG4gICAgICAgIHZhcmlhYmxlcz86IFYsXG4gICAgICAgIHVwZGF0ZT86IE11dGF0aW9uVXBkYXRlckZuPFQ+LFxuICAgICk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlKG11dGF0aW9uLCB2YXJpYWJsZXMsIHVwZGF0ZSk7XG4gICAgfVxufVxuIl19