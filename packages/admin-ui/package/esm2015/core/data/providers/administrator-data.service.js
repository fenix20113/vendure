import { CREATE_ADMINISTRATOR, CREATE_ROLE, DELETE_ADMINISTRATOR, DELETE_ROLE, GET_ACTIVE_ADMINISTRATOR, GET_ADMINISTRATOR, GET_ADMINISTRATORS, GET_ROLE, GET_ROLES, UPDATE_ACTIVE_ADMINISTRATOR, UPDATE_ADMINISTRATOR, UPDATE_ROLE, } from '../definitions/administrator-definitions';
export class AdministratorDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getAdministrators(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ADMINISTRATORS, {
            options: {
                take,
                skip,
            },
        });
    }
    getActiveAdministrator(fetchPolicy = 'cache-first') {
        return this.baseDataService.query(GET_ACTIVE_ADMINISTRATOR, {}, fetchPolicy);
    }
    getAdministrator(id) {
        return this.baseDataService.query(GET_ADMINISTRATOR, {
            id,
        });
    }
    createAdministrator(input) {
        return this.baseDataService.mutate(CREATE_ADMINISTRATOR, { input });
    }
    updateAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ADMINISTRATOR, { input });
    }
    updateActiveAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ACTIVE_ADMINISTRATOR, { input });
    }
    deleteAdministrator(id) {
        return this.baseDataService.mutate(DELETE_ADMINISTRATOR, { id });
    }
    getRoles(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ROLES, {
            options: {
                take,
                skip,
            },
        });
    }
    getRole(id) {
        return this.baseDataService.query(GET_ROLE, { id });
    }
    createRole(input) {
        return this.baseDataService.mutate(CREATE_ROLE, { input });
    }
    updateRole(input) {
        return this.baseDataService.mutate(UPDATE_ROLE, { input });
    }
    deleteRole(id) {
        return this.baseDataService.mutate(DELETE_ROLE, { id });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5pc3RyYXRvci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2FkbWluaXN0cmF0b3ItZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCQSxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLFdBQVcsRUFDWCxvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLHdCQUF3QixFQUN4QixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLFFBQVEsRUFDUixTQUFTLEVBQ1QsMkJBQTJCLEVBQzNCLG9CQUFvQixFQUNwQixXQUFXLEdBQ2QsTUFBTSwwQ0FBMEMsQ0FBQztBQUlsRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsaUJBQWlCLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQ2pELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLGtCQUFrQixFQUNsQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxJQUFJO2dCQUNKLElBQUk7YUFDUDtTQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxjQUEyQixhQUFhO1FBQzNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQzdCLHdCQUF3QixFQUN4QixFQUFFLEVBQ0YsV0FBVyxDQUNkLENBQUM7SUFDTixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUM3QixpQkFBaUIsRUFDakI7WUFDSSxFQUFFO1NBQ0wsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELG1CQUFtQixDQUFDLEtBQStCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLG9CQUFvQixFQUNwQixFQUFFLEtBQUssRUFBRSxDQUNaLENBQUM7SUFDTixDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBK0I7UUFDL0MsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsb0JBQW9CLEVBQ3BCLEVBQUUsS0FBSyxFQUFFLENBQ1osQ0FBQztJQUNOLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxLQUFxQztRQUMzRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUdoQywyQkFBMkIsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELG1CQUFtQixDQUFDLEVBQVU7UUFDMUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsb0JBQW9CLEVBQ3BCLEVBQUUsRUFBRSxFQUFFLENBQ1QsQ0FBQztJQUNOLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBZSxFQUFFLEVBQUUsT0FBZSxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQXFDLFNBQVMsRUFBRTtZQUM3RSxPQUFPLEVBQUU7Z0JBQ0wsSUFBSTtnQkFDSixJQUFJO2FBQ1A7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQVU7UUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFtQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBc0I7UUFDN0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBNEMsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxRyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQXNCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQTRDLFdBQVcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkcsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmV0Y2hQb2xpY3kgfSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG5cbmltcG9ydCB7XG4gICAgQ3JlYXRlQWRtaW5pc3RyYXRvcixcbiAgICBDcmVhdGVBZG1pbmlzdHJhdG9ySW5wdXQsXG4gICAgQ3JlYXRlUm9sZSxcbiAgICBDcmVhdGVSb2xlSW5wdXQsXG4gICAgRGVsZXRlQWRtaW5pc3RyYXRvcixcbiAgICBEZWxldGVSb2xlLFxuICAgIEdldEFjdGl2ZUFkbWluaXN0cmF0b3IsXG4gICAgR2V0QWRtaW5pc3RyYXRvcixcbiAgICBHZXRBZG1pbmlzdHJhdG9ycyxcbiAgICBHZXRSb2xlLFxuICAgIEdldFJvbGVzLFxuICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IsXG4gICAgVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvcklucHV0LFxuICAgIFVwZGF0ZUFkbWluaXN0cmF0b3IsXG4gICAgVXBkYXRlQWRtaW5pc3RyYXRvcklucHV0LFxuICAgIFVwZGF0ZVJvbGUsXG4gICAgVXBkYXRlUm9sZUlucHV0LFxufSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcbmltcG9ydCB7XG4gICAgQ1JFQVRFX0FETUlOSVNUUkFUT1IsXG4gICAgQ1JFQVRFX1JPTEUsXG4gICAgREVMRVRFX0FETUlOSVNUUkFUT1IsXG4gICAgREVMRVRFX1JPTEUsXG4gICAgR0VUX0FDVElWRV9BRE1JTklTVFJBVE9SLFxuICAgIEdFVF9BRE1JTklTVFJBVE9SLFxuICAgIEdFVF9BRE1JTklTVFJBVE9SUyxcbiAgICBHRVRfUk9MRSxcbiAgICBHRVRfUk9MRVMsXG4gICAgVVBEQVRFX0FDVElWRV9BRE1JTklTVFJBVE9SLFxuICAgIFVQREFURV9BRE1JTklTVFJBVE9SLFxuICAgIFVQREFURV9ST0xFLFxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9hZG1pbmlzdHJhdG9yLWRlZmluaXRpb25zJztcblxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBBZG1pbmlzdHJhdG9yRGF0YVNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZURhdGFTZXJ2aWNlOiBCYXNlRGF0YVNlcnZpY2UpIHt9XG5cbiAgICBnZXRBZG1pbmlzdHJhdG9ycyh0YWtlOiBudW1iZXIgPSAxMCwgc2tpcDogbnVtYmVyID0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWRtaW5pc3RyYXRvcnMuUXVlcnksIEdldEFkbWluaXN0cmF0b3JzLlZhcmlhYmxlcz4oXG4gICAgICAgICAgICBHRVRfQURNSU5JU1RSQVRPUlMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgICAgICBza2lwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEFjdGl2ZUFkbWluaXN0cmF0b3IoZmV0Y2hQb2xpY3k6IEZldGNoUG9saWN5ID0gJ2NhY2hlLWZpcnN0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWN0aXZlQWRtaW5pc3RyYXRvci5RdWVyeT4oXG4gICAgICAgICAgICBHRVRfQUNUSVZFX0FETUlOSVNUUkFUT1IsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGZldGNoUG9saWN5LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEFkbWluaXN0cmF0b3IoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8R2V0QWRtaW5pc3RyYXRvci5RdWVyeSwgR2V0QWRtaW5pc3RyYXRvci5WYXJpYWJsZXM+KFxuICAgICAgICAgICAgR0VUX0FETUlOSVNUUkFUT1IsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNyZWF0ZUFkbWluaXN0cmF0b3IoaW5wdXQ6IENyZWF0ZUFkbWluaXN0cmF0b3JJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENyZWF0ZUFkbWluaXN0cmF0b3IuTXV0YXRpb24sIENyZWF0ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzPihcbiAgICAgICAgICAgIENSRUFURV9BRE1JTklTVFJBVE9SLFxuICAgICAgICAgICAgeyBpbnB1dCB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZUFkbWluaXN0cmF0b3IoaW5wdXQ6IFVwZGF0ZUFkbWluaXN0cmF0b3JJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFVwZGF0ZUFkbWluaXN0cmF0b3IuTXV0YXRpb24sIFVwZGF0ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzPihcbiAgICAgICAgICAgIFVQREFURV9BRE1JTklTVFJBVE9SLFxuICAgICAgICAgICAgeyBpbnB1dCB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IoaW5wdXQ6IFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFxuICAgICAgICAgICAgVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvci5NdXRhdGlvbixcbiAgICAgICAgICAgIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzXG4gICAgICAgID4oVVBEQVRFX0FDVElWRV9BRE1JTklTVFJBVE9SLCB7IGlucHV0IH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZUFkbWluaXN0cmF0b3IoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZUFkbWluaXN0cmF0b3IuTXV0YXRpb24sIERlbGV0ZUFkbWluaXN0cmF0b3IuVmFyaWFibGVzPihcbiAgICAgICAgICAgIERFTEVURV9BRE1JTklTVFJBVE9SLFxuICAgICAgICAgICAgeyBpZCB9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFJvbGVzKHRha2U6IG51bWJlciA9IDEwLCBza2lwOiBudW1iZXIgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxHZXRSb2xlcy5RdWVyeSwgR2V0Um9sZXMuVmFyaWFibGVzPihHRVRfUk9MRVMsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0YWtlLFxuICAgICAgICAgICAgICAgIHNraXAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRSb2xlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PEdldFJvbGUuUXVlcnksIEdldFJvbGUuVmFyaWFibGVzPihHRVRfUk9MRSwgeyBpZCB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVSb2xlKGlucHV0OiBDcmVhdGVSb2xlSW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxDcmVhdGVSb2xlLk11dGF0aW9uLCBDcmVhdGVSb2xlLlZhcmlhYmxlcz4oQ1JFQVRFX1JPTEUsIHsgaW5wdXQgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlUm9sZShpbnB1dDogVXBkYXRlUm9sZUlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8VXBkYXRlUm9sZS5NdXRhdGlvbiwgVXBkYXRlUm9sZS5WYXJpYWJsZXM+KFVQREFURV9ST0xFLCB7IGlucHV0IH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZVJvbGUoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPERlbGV0ZVJvbGUuTXV0YXRpb24sIERlbGV0ZVJvbGUuVmFyaWFibGVzPihERUxFVEVfUk9MRSwgeyBpZCB9KTtcbiAgICB9XG59XG4iXX0=