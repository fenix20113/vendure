import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { CanDeactivateDetailGuard, createResolveData, detailBreadcrumb, } from '@vendure/admin-ui/core';
import { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';
import { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';
import { CustomerListComponent } from './components/customer-list/customer-list.component';
import { CustomerResolver } from './providers/routing/customer-resolver';
const ɵ0 = {
    breadcrumb: _('breadcrumb.customers'),
}, ɵ1 = {
    breadcrumb: customerBreadcrumb,
}, ɵ2 = {
    breadcrumb: _('breadcrumb.customer-groups'),
};
export const customerRoutes = [
    {
        path: 'customers',
        component: CustomerListComponent,
        pathMatch: '',
        data: ɵ0,
    },
    {
        path: 'customers/:id',
        component: CustomerDetailComponent,
        resolve: createResolveData(CustomerResolver),
        canDeactivate: [CanDeactivateDetailGuard],
        data: ɵ1,
    },
    {
        path: 'groups',
        component: CustomerGroupListComponent,
        data: ɵ2,
    },
];
export function customerBreadcrumb(data, params) {
    return detailBreadcrumb({
        entity: data.entity,
        id: params.id,
        breadcrumbKey: 'breadcrumb.customers',
        getName: (customer) => `${customer.firstName} ${customer.lastName}`,
        route: 'customers',
    });
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXIucm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jdXN0b21lci9zcmMvY3VzdG9tZXIucm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDdEUsT0FBTyxFQUNILHdCQUF3QixFQUN4QixpQkFBaUIsRUFFakIsZ0JBQWdCLEdBQ25CLE1BQU0sd0JBQXdCLENBQUM7QUFFaEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDakcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFDNUcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDM0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7V0FPM0Q7SUFDRixVQUFVLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO0NBQ3hDLE9BT0s7SUFDRixVQUFVLEVBQUUsa0JBQWtCO0NBQ2pDLE9BS0s7SUFDRixVQUFVLEVBQUUsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO0NBQzlDO0FBdkJULE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBWTtJQUNuQztRQUNJLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxxQkFBcUI7UUFDaEMsU0FBUyxFQUFFLEVBQUU7UUFDYixJQUFJLElBRUg7S0FDSjtJQUNEO1FBQ0ksSUFBSSxFQUFFLGVBQWU7UUFDckIsU0FBUyxFQUFFLHVCQUF1QjtRQUNsQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFDNUMsYUFBYSxFQUFFLENBQUMsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxJQUVIO0tBQ0o7SUFDRDtRQUNJLElBQUksRUFBRSxRQUFRO1FBQ2QsU0FBUyxFQUFFLDBCQUEwQjtRQUNyQyxJQUFJLElBRUg7S0FDSjtDQUNKLENBQUM7QUFFRixNQUFNLFVBQVUsa0JBQWtCLENBQUMsSUFBUyxFQUFFLE1BQVc7SUFDckQsT0FBTyxnQkFBZ0IsQ0FBb0I7UUFDdkMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1FBQ25CLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNiLGFBQWEsRUFBRSxzQkFBc0I7UUFDckMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNuRSxLQUFLLEVBQUUsV0FBVztLQUNyQixDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgbWFya2VyIGFzIF8gfSBmcm9tICdAYmllc2JqZXJnL25neC10cmFuc2xhdGUtZXh0cmFjdC1tYXJrZXInO1xuaW1wb3J0IHtcbiAgICBDYW5EZWFjdGl2YXRlRGV0YWlsR3VhcmQsXG4gICAgY3JlYXRlUmVzb2x2ZURhdGEsXG4gICAgQ3VzdG9tZXIsXG4gICAgZGV0YWlsQnJlYWRjcnVtYixcbn0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XG5cbmltcG9ydCB7IEN1c3RvbWVyRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2N1c3RvbWVyLWRldGFpbC9jdXN0b21lci1kZXRhaWwuY29tcG9uZW50JztcbmltcG9ydCB7IEN1c3RvbWVyR3JvdXBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2N1c3RvbWVyLWdyb3VwLWxpc3QvY3VzdG9tZXItZ3JvdXAtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ3VzdG9tZXJMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2N1c3RvbWVyLWxpc3QvY3VzdG9tZXItbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ3VzdG9tZXJSZXNvbHZlciB9IGZyb20gJy4vcHJvdmlkZXJzL3JvdXRpbmcvY3VzdG9tZXItcmVzb2x2ZXInO1xuXG5leHBvcnQgY29uc3QgY3VzdG9tZXJSb3V0ZXM6IFJvdXRlW10gPSBbXG4gICAge1xuICAgICAgICBwYXRoOiAnY3VzdG9tZXJzJyxcbiAgICAgICAgY29tcG9uZW50OiBDdXN0b21lckxpc3RDb21wb25lbnQsXG4gICAgICAgIHBhdGhNYXRjaDogJycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGJyZWFkY3J1bWI6IF8oJ2JyZWFkY3J1bWIuY3VzdG9tZXJzJyksXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHBhdGg6ICdjdXN0b21lcnMvOmlkJyxcbiAgICAgICAgY29tcG9uZW50OiBDdXN0b21lckRldGFpbENvbXBvbmVudCxcbiAgICAgICAgcmVzb2x2ZTogY3JlYXRlUmVzb2x2ZURhdGEoQ3VzdG9tZXJSZXNvbHZlciksXG4gICAgICAgIGNhbkRlYWN0aXZhdGU6IFtDYW5EZWFjdGl2YXRlRGV0YWlsR3VhcmRdLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBicmVhZGNydW1iOiBjdXN0b21lckJyZWFkY3J1bWIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHBhdGg6ICdncm91cHMnLFxuICAgICAgICBjb21wb25lbnQ6IEN1c3RvbWVyR3JvdXBMaXN0Q29tcG9uZW50LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBicmVhZGNydW1iOiBfKCdicmVhZGNydW1iLmN1c3RvbWVyLWdyb3VwcycpLFxuICAgICAgICB9LFxuICAgIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tZXJCcmVhZGNydW1iKGRhdGE6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gZGV0YWlsQnJlYWRjcnVtYjxDdXN0b21lci5GcmFnbWVudD4oe1xuICAgICAgICBlbnRpdHk6IGRhdGEuZW50aXR5LFxuICAgICAgICBpZDogcGFyYW1zLmlkLFxuICAgICAgICBicmVhZGNydW1iS2V5OiAnYnJlYWRjcnVtYi5jdXN0b21lcnMnLFxuICAgICAgICBnZXROYW1lOiAoY3VzdG9tZXIpID0+IGAke2N1c3RvbWVyLmZpcnN0TmFtZX0gJHtjdXN0b21lci5sYXN0TmFtZX1gLFxuICAgICAgICByb3V0ZTogJ2N1c3RvbWVycycsXG4gICAgfSk7XG59XG4iXX0=