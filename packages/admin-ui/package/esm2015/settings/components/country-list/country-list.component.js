import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { DataService, DeletionResult, ModalService, NotificationService, } from '@vendure/admin-ui/core';
import { combineLatest, EMPTY, Subject } from 'rxjs';
import { map, startWith, switchMap, tap } from 'rxjs/operators';
export class CountryListComponent {
    constructor(dataService, notificationService, modalService) {
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.searchTerm = new FormControl('');
        this.countries = [];
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        const countries$ = this.searchTerm.valueChanges.pipe(startWith(null), switchMap(term => this.dataService.settings.getCountries(999, 0, term).stream$), tap(data => (this.countries = data.countries.items)), map(data => data.countries.items));
        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);
        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(map(([countries, zones]) => {
            return countries.map(country => (Object.assign(Object.assign({}, country), { zones: zones.filter(z => !!z.members.find(c => c.id === country.id)) })));
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    deleteCountry(countryId) {
        this.modalService
            .dialog({
            title: _('catalog.confirm-delete-country'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(response => response ? this.dataService.settings.deleteCountry(countryId) : EMPTY))
            .subscribe(response => {
            if (response.deleteCountry.result === DeletionResult.DELETED) {
                this.notificationService.success(_('common.notify-delete-success'), {
                    entity: 'Country',
                });
                this.dataService.settings.getCountries(999, 0).single$.subscribe();
            }
            else {
                this.notificationService.error(response.deleteCountry.message || '');
            }
        }, err => {
            this.notificationService.error(_('common.notify-delete-error'), {
                entity: 'Country',
            });
        });
    }
    isZone(input) {
        return input.hasOwnProperty('id');
    }
}
CountryListComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-country-list',
                template: "<vdr-action-bar>\n    <vdr-ab-left>\n        <input\n            type=\"text\"\n            name=\"searchTerm\"\n            [formControl]=\"searchTerm\"\n            [placeholder]=\"'settings.search-country-by-name' | translate\"\n            class=\"search-input\"\n        />\n    </vdr-ab-left>\n\n    <vdr-ab-right>\n        <vdr-action-bar-items locationId=\"country-list\"></vdr-action-bar-items>\n        <a class=\"btn btn-primary\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"['CreateSettings', 'CreateCountry']\">\n            <clr-icon shape=\"plus\"></clr-icon>\n            {{ 'settings.create-new-country' | translate }}\n        </a>\n    </vdr-ab-right>\n</vdr-action-bar>\n\n<vdr-data-table\n    [items]=\"countriesWithZones$ | async\"\n>\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\n    <vdr-dt-column [expand]=\"true\">{{ 'common.name' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'settings.zone' | translate }}</vdr-dt-column>\n    <vdr-dt-column>{{ 'common.enabled' | translate }}</vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <vdr-dt-column></vdr-dt-column>\n    <ng-template let-country=\"item\">\n        <td class=\"left align-middle\">{{ country.code }}</td>\n        <td class=\"left align-middle\">{{ country.name }}</td>\n        <td class=\"left align-middle\">\n            <a [routerLink]=\"['/settings', 'zones', { contents: zone.id }]\" *ngFor=\"let zone of country.zones\">\n            <vdr-chip [colorFrom]=\"zone.name\">{{ zone.name }}</vdr-chip>\n            </a>\n        </td>\n        <td class=\"left align-middle\">\n            <clr-icon\n                [class.is-success]=\"country.enabled\"\n                [attr.shape]=\"country.enabled ? 'check' : 'times'\"\n            ></clr-icon>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-table-row-action\n                iconShape=\"edit\"\n                [label]=\"'common.edit' | translate\"\n                [linkTo]=\"['./', country.id]\"\n            ></vdr-table-row-action>\n        </td>\n        <td class=\"right align-middle\">\n            <vdr-dropdown>\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n                    {{ 'common.actions' | translate }}\n                    <clr-icon shape=\"caret down\"></clr-icon>\n                </button>\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n                    <button\n                        type=\"button\"\n                        class=\"delete-button\"\n                        (click)=\"deleteCountry(country.id)\"\n                        vdrDropdownItem\n                        [disabled]=\"!(['DeleteSettings', 'DeleteCountry'] | hasPermission)\"\n                    >\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n                        {{ 'common.delete' | translate }}\n                    </button>\n                </vdr-dropdown-menu>\n            </vdr-dropdown>\n        </td>\n    </ng-template>\n</vdr-data-table>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".search-input{margin-top:6px;min-width:300px}"]
            },] }
];
CountryListComponent.ctorParameters = () => [
    { type: DataService },
    { type: NotificationService },
    { type: ModalService }
];
//# sourceMappingURL=data:application/json;base64,