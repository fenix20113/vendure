import { Injectable } from '@angular/core';
import { DataService, DeletionResult, findTranslation, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { forkJoin, of, throwError } from 'rxjs';
import { map, mergeMap, shareReplay, switchMap } from 'rxjs/operators';
import { replaceLast } from './replace-last';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
/**
 * Handles the logic for making the API calls to perform CRUD operations on a Product and its related
 * entities. This logic was extracted out of the component because it became too large and hard to follow.
 */
export class ProductDetailService {
    constructor(dataService) {
        this.dataService = dataService;
    }
    getFacets() {
        return this.dataService.facet.getAllFacets().mapSingle(data => data.facets.items);
    }
    getTaxCategories() {
        return this.dataService.settings
            .getTaxCategories()
            .mapSingle(data => data.taxCategories)
            .pipe(shareReplay(1));
    }
    createProductWithVariants(input, createVariantsConfig, languageCode) {
        const createProduct$ = this.dataService.product.createProduct(input);
        const nonEmptyOptionGroups = createVariantsConfig.groups.filter(g => 0 < g.values.length);
        const createOptionGroups$ = this.createProductOptionGroups(nonEmptyOptionGroups, languageCode);
        return forkJoin(createProduct$, createOptionGroups$).pipe(mergeMap(([{ createProduct }, optionGroups]) => {
            const addOptionsToProduct$ = optionGroups.length
                ? forkJoin(optionGroups.map(optionGroup => {
                    return this.dataService.product.addOptionGroupToProduct({
                        productId: createProduct.id,
                        optionGroupId: optionGroup.id,
                    });
                }))
                : of([]);
            return addOptionsToProduct$.pipe(map(() => {
                return { createProduct, optionGroups };
            }));
        }), mergeMap(({ createProduct, optionGroups }) => {
            const variants = createVariantsConfig.variants.map(v => {
                const optionIds = optionGroups.length
                    ? v.optionValues.map((optionName, index) => {
                        const option = optionGroups[index].options.find(o => o.name === optionName);
                        if (!option) {
                            throw new Error(`Could not find a matching ProductOption "${optionName}" when creating variant`);
                        }
                        return option.id;
                    })
                    : [];
                return Object.assign(Object.assign({}, v), { optionIds });
            });
            const options = optionGroups.map(og => og.options).reduce((flat, o) => [...flat, ...o], []);
            return this.createProductVariants(createProduct, variants, options, languageCode);
        }));
    }
    createProductOptionGroups(groups, languageCode) {
        return groups.length
            ? forkJoin(groups.map(c => {
                return this.dataService.product
                    .createProductOptionGroups({
                    code: normalizeString(c.name, '-'),
                    translations: [{ languageCode, name: c.name }],
                    options: c.values.map(v => ({
                        code: normalizeString(v, '-'),
                        translations: [{ languageCode, name: v }],
                    })),
                })
                    .pipe(map(data => data.createProductOptionGroup));
            }))
            : of([]);
    }
    createProductVariants(product, variantData, options, languageCode) {
        const variants = variantData.map(v => {
            const name = options.length
                ? `${product.name} ${v.optionIds
                    .map(id => options.find(o => o.id === id))
                    .filter(notNullOrUndefined)
                    .map(o => o.name)
                    .join(' ')}`
                : product.name;
            return {
                productId: product.id,
                price: v.price,
                sku: v.sku,
                stockOnHand: v.stock,
                translations: [
                    {
                        languageCode,
                        name,
                    },
                ],
                optionIds: v.optionIds,
            };
        });
        return this.dataService.product.createProductVariants(variants).pipe(map(({ createProductVariants }) => ({
            createProductVariants,
            productId: product.id,
        })));
    }
    updateProduct(updateOptions) {
        var _a, _b, _c;
        const { product, languageCode, autoUpdate, productInput, variantsInput } = updateOptions;
        const updateOperations = [];
        const updateVariantsInput = variantsInput || [];
        if (productInput) {
            updateOperations.push(this.dataService.product.updateProduct(productInput));
            const productOldName = (_a = findTranslation(product, languageCode)) === null || _a === void 0 ? void 0 : _a.name;
            const productNewName = (_b = findTranslation(productInput, languageCode)) === null || _b === void 0 ? void 0 : _b.name;
            if (productOldName && productNewName && autoUpdate) {
                for (const variant of product.variants) {
                    const currentVariantName = ((_c = findTranslation(variant, languageCode)) === null || _c === void 0 ? void 0 : _c.name) || '';
                    let variantInput;
                    const existingVariantInput = updateVariantsInput.find(i => i.id === variant.id);
                    if (existingVariantInput) {
                        variantInput = existingVariantInput;
                    }
                    else {
                        variantInput = {
                            id: variant.id,
                            translations: [{ languageCode, name: currentVariantName }],
                        };
                        updateVariantsInput.push(variantInput);
                    }
                    const variantTranslation = findTranslation(variantInput, languageCode);
                    if (variantTranslation) {
                        variantTranslation.name = replaceLast(variantTranslation.name, productOldName, productNewName);
                    }
                }
            }
        }
        if (updateVariantsInput.length) {
            updateOperations.push(this.dataService.product.updateProductVariants(updateVariantsInput));
        }
        return forkJoin(updateOperations);
    }
    updateProductOption(input, product, languageCode) {
        var _a, _b, _c;
        let updateProductVariantNames$ = of([]);
        if (input.autoUpdate) {
            // Update any ProductVariants' names which include the option name
            let oldOptionName;
            const newOptionName = (_a = findTranslation(input, languageCode)) === null || _a === void 0 ? void 0 : _a.name;
            if (!newOptionName) {
                updateProductVariantNames$ = of([]);
            }
            const variantsToUpdate = [];
            for (const variant of product.variants) {
                if (variant.options.map(o => o.id).includes(input.id)) {
                    if (!oldOptionName) {
                        oldOptionName = (_b = findTranslation(variant.options.find(o => o.id === input.id), languageCode)) === null || _b === void 0 ? void 0 : _b.name;
                    }
                    const variantName = ((_c = findTranslation(variant, languageCode)) === null || _c === void 0 ? void 0 : _c.name) || '';
                    if (oldOptionName && newOptionName && variantName.includes(oldOptionName)) {
                        variantsToUpdate.push({
                            id: variant.id,
                            translations: [
                                {
                                    languageCode,
                                    name: replaceLast(variantName, oldOptionName, newOptionName),
                                },
                            ],
                        });
                    }
                }
            }
            if (variantsToUpdate.length) {
                updateProductVariantNames$ = this.dataService.product.updateProductVariants(variantsToUpdate);
            }
        }
        return this.dataService.product
            .updateProductOption(input)
            .pipe(mergeMap(() => updateProductVariantNames$));
    }
    deleteProductVariant(id, productId) {
        return this.dataService.product.deleteProductVariant(id).pipe(switchMap(result => {
            if (result.deleteProductVariant.result === DeletionResult.DELETED) {
                return this.dataService.product.getProduct(productId).single$;
            }
            else {
                return throwError(result.deleteProductVariant.message);
            }
        }));
    }
}
ProductDetailService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductDetailService_Factory() { return new ProductDetailService(i0.ɵɵinject(i1.DataService)); }, token: ProductDetailService, providedIn: "root" });
ProductDetailService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProductDetailService.ctorParameters = () => [
    { type: DataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1kZXRhaWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY2F0YWxvZy9zcmMvcHJvdmlkZXJzL3Byb2R1Y3QtZGV0YWlsL3Byb2R1Y3QtZGV0YWlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBR0gsV0FBVyxFQUNYLGNBQWMsRUFFZCxlQUFlLEdBUWxCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFFN0M7OztHQUdHO0FBSUgsTUFBTSxPQUFPLG9CQUFvQjtJQUM3QixZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFHLENBQUM7SUFFaEQsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7YUFDM0IsZ0JBQWdCLEVBQUU7YUFDbEIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFD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Q0FBQyxDQUFDLE9BQU8sQ0FBQzthQUNqRTtpQkFBTTtnQkFDSCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUQ7UUFDTCxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQzs7OztZQWhPSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQTNCRyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBDcmVhdGVQcm9kdWN0SW5wdXQsXG4gICAgQ3JlYXRlUHJvZHVjdFZhcmlhbnRJbnB1dCxcbiAgICBEYXRhU2VydmljZSxcbiAgICBEZWxldGlvblJlc3VsdCxcbiAgICBGYWNldFdpdGhWYWx1ZXMsXG4gICAgZmluZFRyYW5zbGF0aW9uLFxuICAgIExhbmd1YWdlQ29kZSxcbiAgICBQcm9kdWN0V2l0aFZhcmlhbnRzLFxuICAgIFVwZGF0ZVByb2R1Y3RJbnB1dCxcbiAgICBVcGRhdGVQcm9kdWN0TXV0YXRpb24sXG4gICAgVXBkYXRlUHJvZHVjdE9wdGlvbklucHV0LFxuICAgIFVwZGF0ZVByb2R1Y3RWYXJpYW50SW5wdXQsXG4gICAgVXBkYXRlUHJvZHVjdFZhcmlhbnRzTXV0YXRpb24sXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xuaW1wb3J0IHsgbm9ybWFsaXplU3RyaW5nIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9ub3JtYWxpemUtc3RyaW5nJztcbmltcG9ydCB7IG5vdE51bGxPclVuZGVmaW5lZCB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXV0aWxzJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgc2hhcmVSZXBsYXksIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQ3JlYXRlUHJvZHVjdFZhcmlhbnRzQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9nZW5lcmF0ZS1wcm9kdWN0LXZhcmlhbnRzL2dlbmVyYXRlLXByb2R1Y3QtdmFyaWFudHMuY29tcG9uZW50JztcblxuaW1wb3J0IHsgcmVwbGFjZUxhc3QgfSBmcm9tICcuL3JlcGxhY2UtbGFzdCc7XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgbG9naWMgZm9yIG1ha2luZyB0aGUgQVBJIGNhbGxzIHRvIHBlcmZvcm0gQ1JVRCBvcGVyYXRpb25zIG9uIGEgUHJvZHVjdCBhbmQgaXRzIHJlbGF0ZWRcbiAqIGVudGl0aWVzLiBUaGlzIGxvZ2ljIHdhcyBleHRyYWN0ZWQgb3V0IG9mIHRoZSBjb21wb25lbnQgYmVjYXVzZSBpdCBiZWNhbWUgdG9vIGxhcmdlIGFuZCBoYXJkIHRvIGZvbGxvdy5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdERldGFpbFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlKSB7fVxuXG4gICAgZ2V0RmFjZXRzKCk6IE9ic2VydmFibGU8RmFjZXRXaXRoVmFsdWVzLkZyYWdtZW50W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZmFjZXQuZ2V0QWxsRmFjZXRzKCkubWFwU2luZ2xlKGRhdGEgPT4gZGF0YS5mYWNldHMuaXRlbXMpO1xuICAgIH1cblxuICAgIGdldFRheENhdGVnb3JpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLnNldHRpbmdzXG4gICAgICAgICAgICAuZ2V0VGF4Q2F0ZWdvcmllcygpXG4gICAgICAgICAgICAubWFwU2luZ2xlKGRhdGEgPT4gZGF0YS50YXhDYXRlZ29yaWVzKVxuICAgICAgICAgICAgLnBpcGUoc2hhcmVSZXBsYXkoMSkpO1xuICAgIH1cblxuICAgIGNyZWF0ZVByb2R1Y3RXaXRoVmFyaWFudHMoXG4gICAgICAgIGlucHV0OiBDcmVhdGVQcm9kdWN0SW5wdXQsXG4gICAgICAgIGNyZWF0ZVZhcmlhbnRzQ29uZmlnOiBDcmVhdGVQcm9kdWN0VmFyaWFudHNDb25maWcsXG4gICAgICAgIGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlLFxuICAgICkge1xuICAgICAgICBjb25zdCBjcmVhdGVQcm9kdWN0JCA9IHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC5jcmVhdGVQcm9kdWN0KGlucHV0KTtcbiAgICAgICAgY29uc3Qgbm9uRW1wdHlPcHRpb25Hcm91cHMgPSBjcmVhdGVWYXJpYW50c0NvbmZpZy5ncm91cHMuZmlsdGVyKGcgPT4gMCA8IGcudmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGNyZWF0ZU9wdGlvbkdyb3VwcyQgPSB0aGlzLmNyZWF0ZVByb2R1Y3RPcHRpb25Hcm91cHMobm9uRW1wdHlPcHRpb25Hcm91cHMsIGxhbmd1YWdlQ29kZSk7XG5cbiAgICAgICAgcmV0dXJuIGZvcmtKb2luKGNyZWF0ZVByb2R1Y3QkLCBjcmVhdGVPcHRpb25Hcm91cHMkKS5waXBlKFxuICAgICAgICAgICAgbWVyZ2VNYXAoKFt7IGNyZWF0ZVByb2R1Y3QgfSwgb3B0aW9uR3JvdXBzXSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkZE9wdGlvbnNUb1Byb2R1Y3QkID0gb3B0aW9uR3JvdXBzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IGZvcmtKb2luKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25Hcm91cHMubWFwKG9wdGlvbkdyb3VwID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLnByb2R1Y3QuYWRkT3B0aW9uR3JvdXBUb1Byb2R1Y3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogY3JlYXRlUHJvZHVjdC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25Hcm91cElkOiBvcHRpb25Hcm91cC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDogb2YoW10pO1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGRPcHRpb25zVG9Qcm9kdWN0JC5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgY3JlYXRlUHJvZHVjdCwgb3B0aW9uR3JvdXBzIH07XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG1lcmdlTWFwKCh7IGNyZWF0ZVByb2R1Y3QsIG9wdGlvbkdyb3VwcyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFyaWFudHMgPSBjcmVhdGVWYXJpYW50c0NvbmZpZy52YXJpYW50cy5tYXAodiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbklkcyA9IG9wdGlvbkdyb3Vwcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdi5vcHRpb25WYWx1ZXMubWFwKChvcHRpb25OYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uR3JvdXBzW2luZGV4XS5vcHRpb25zLmZpbmQobyA9PiBvLm5hbWUgPT09IG9wdGlvbk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIFByb2R1Y3RPcHRpb24gXCIke29wdGlvbk5hbWV9XCIgd2hlbiBjcmVhdGluZyB2YXJpYW50YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi52LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uSWRzLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25Hcm91cHMubWFwKG9nID0+IG9nLm9wdGlvbnMpLnJlZHVjZSgoZmxhdCwgbykgPT4gWy4uLmZsYXQsIC4uLm9dLCBbXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJvZHVjdFZhcmlhbnRzKGNyZWF0ZVByb2R1Y3QsIHZhcmlhbnRzLCBvcHRpb25zLCBsYW5ndWFnZUNvZGUpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY3JlYXRlUHJvZHVjdE9wdGlvbkdyb3Vwcyhncm91cHM6IEFycmF5PHsgbmFtZTogc3RyaW5nOyB2YWx1ZXM6IHN0cmluZ1tdIH0+LCBsYW5ndWFnZUNvZGU6IExhbmd1YWdlQ29kZSkge1xuICAgICAgICByZXR1cm4gZ3JvdXBzLmxlbmd0aFxuICAgICAgICAgICAgPyBmb3JrSm9pbihcbiAgICAgICAgICAgICAgICAgIGdyb3Vwcy5tYXAoYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY3JlYXRlUHJvZHVjdE9wdGlvbkdyb3Vwcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBub3JtYWxpemVTdHJpbmcoYy5uYW1lLCAnLScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBbeyBsYW5ndWFnZUNvZGUsIG5hbWU6IGMubmFtZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGMudmFsdWVzLm1hcCh2ID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogbm9ybWFsaXplU3RyaW5nKHYsICctJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBbeyBsYW5ndWFnZUNvZGUsIG5hbWU6IHYgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKG1hcChkYXRhID0+IGRhdGEuY3JlYXRlUHJvZHVjdE9wdGlvbkdyb3VwKSk7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBvZihbXSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUHJvZHVjdFZhcmlhbnRzKFxuICAgICAgICBwcm9kdWN0OiB7IG5hbWU6IHN0cmluZzsgaWQ6IHN0cmluZyB9LFxuICAgICAgICB2YXJpYW50RGF0YTogQXJyYXk8eyBwcmljZTogbnVtYmVyOyBza3U6IHN0cmluZzsgc3RvY2s6IG51bWJlcjsgb3B0aW9uSWRzOiBzdHJpbmdbXSB9PixcbiAgICAgICAgb3B0aW9uczogQXJyYXk8eyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfT4sXG4gICAgICAgIGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlLFxuICAgICkge1xuICAgICAgICBjb25zdCB2YXJpYW50czogQ3JlYXRlUHJvZHVjdFZhcmlhbnRJbnB1dFtdID0gdmFyaWFudERhdGEubWFwKHYgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9wdGlvbnMubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyBgJHtwcm9kdWN0Lm5hbWV9ICR7di5vcHRpb25JZHNcbiAgICAgICAgICAgICAgICAgICAgICAubWFwKGlkID0+IG9wdGlvbnMuZmluZChvID0+IG8uaWQgPT09IGlkKSlcbiAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG5vdE51bGxPclVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAubWFwKG8gPT4gby5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyl9YFxuICAgICAgICAgICAgICAgIDogcHJvZHVjdC5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm9kdWN0SWQ6IHByb2R1Y3QuaWQsXG4gICAgICAgICAgICAgICAgcHJpY2U6IHYucHJpY2UsXG4gICAgICAgICAgICAgICAgc2t1OiB2LnNrdSxcbiAgICAgICAgICAgICAgICBzdG9ja09uSGFuZDogdi5zdG9jayxcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIG9wdGlvbklkczogdi5vcHRpb25JZHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC5jcmVhdGVQcm9kdWN0VmFyaWFudHModmFyaWFudHMpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHsgY3JlYXRlUHJvZHVjdFZhcmlhbnRzIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgY3JlYXRlUHJvZHVjdFZhcmlhbnRzLFxuICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogcHJvZHVjdC5pZCxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQcm9kdWN0KHVwZGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgcHJvZHVjdDogUHJvZHVjdFdpdGhWYXJpYW50cy5GcmFnbWVudDtcbiAgICAgICAgbGFuZ3VhZ2VDb2RlOiBMYW5ndWFnZUNvZGU7XG4gICAgICAgIGF1dG9VcGRhdGU6IGJvb2xlYW47XG4gICAgICAgIHByb2R1Y3RJbnB1dD86IFVwZGF0ZVByb2R1Y3RJbnB1dDtcbiAgICAgICAgdmFyaWFudHNJbnB1dD86IFVwZGF0ZVByb2R1Y3RWYXJpYW50SW5wdXRbXTtcbiAgICB9KSB7XG4gICAgICAgIGNvbnN0IHsgcHJvZHVjdCwgbGFuZ3VhZ2VDb2RlLCBhdXRvVXBkYXRlLCBwcm9kdWN0SW5wdXQsIHZhcmlhbnRzSW5wdXQgfSA9IHVwZGF0ZU9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHVwZGF0ZU9wZXJhdGlvbnM6IEFycmF5PE9ic2VydmFibGU8VXBkYXRlUHJvZHVjdE11dGF0aW9uIHwgVXBkYXRlUHJvZHVjdFZhcmlhbnRzTXV0YXRpb24+PiA9IFtdO1xuICAgICAgICBjb25zdCB1cGRhdGVWYXJpYW50c0lucHV0ID0gdmFyaWFudHNJbnB1dCB8fCBbXTtcbiAgICAgICAgaWYgKHByb2R1Y3RJbnB1dCkge1xuICAgICAgICAgICAgdXBkYXRlT3BlcmF0aW9ucy5wdXNoKHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC51cGRhdGVQcm9kdWN0KHByb2R1Y3RJbnB1dCkpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0T2xkTmFtZSA9IGZpbmRUcmFuc2xhdGlvbihwcm9kdWN0LCBsYW5ndWFnZUNvZGUpPy5uYW1lO1xuICAgICAgICAgICAgY29uc3QgcHJvZHVjdE5ld05hbWUgPSBmaW5kVHJhbnNsYXRpb24ocHJvZHVjdElucHV0LCBsYW5ndWFnZUNvZGUpPy5uYW1lO1xuICAgICAgICAgICAgaWYgKHByb2R1Y3RPbGROYW1lICYmIHByb2R1Y3ROZXdOYW1lICYmIGF1dG9VcGRhdGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhbnQgb2YgcHJvZHVjdC52YXJpYW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmFyaWFudE5hbWUgPSBmaW5kVHJhbnNsYXRpb24odmFyaWFudCwgbGFuZ3VhZ2VDb2RlKT8ubmFtZSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhcmlhbnRJbnB1dDogVXBkYXRlUHJvZHVjdFZhcmlhbnRJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdWYXJpYW50SW5wdXQgPSB1cGRhdGVWYXJpYW50c0lucHV0LmZpbmQoaSA9PiBpLmlkID09PSB2YXJpYW50LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVmFyaWFudElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50SW5wdXQgPSBleGlzdGluZ1ZhcmlhbnRJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnRJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdmFyaWFudC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IFt7IGxhbmd1YWdlQ29kZSwgbmFtZTogY3VycmVudFZhcmlhbnROYW1lIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhcmlhbnRzSW5wdXQucHVzaCh2YXJpYW50SW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRUcmFuc2xhdGlvbiA9IGZpbmRUcmFuc2xhdGlvbih2YXJpYW50SW5wdXQsIGxhbmd1YWdlQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYW50VHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnRUcmFuc2xhdGlvbi5uYW1lID0gcmVwbGFjZUxhc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudFRyYW5zbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdE9sZE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdE5ld05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVWYXJpYW50c0lucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdXBkYXRlT3BlcmF0aW9ucy5wdXNoKHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC51cGRhdGVQcm9kdWN0VmFyaWFudHModXBkYXRlVmFyaWFudHNJbnB1dCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JrSm9pbih1cGRhdGVPcGVyYXRpb25zKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQcm9kdWN0T3B0aW9uKFxuICAgICAgICBpbnB1dDogVXBkYXRlUHJvZHVjdE9wdGlvbklucHV0ICYgeyBhdXRvVXBkYXRlOiBib29sZWFuIH0sXG4gICAgICAgIHByb2R1Y3Q6IFByb2R1Y3RXaXRoVmFyaWFudHMuRnJhZ21lbnQsXG4gICAgICAgIGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlLFxuICAgICkge1xuICAgICAgICBsZXQgdXBkYXRlUHJvZHVjdFZhcmlhbnROYW1lcyQ6IE9ic2VydmFibGU8YW55PiA9IG9mKFtdKTtcbiAgICAgICAgaWYgKGlucHV0LmF1dG9VcGRhdGUpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBhbnkgUHJvZHVjdFZhcmlhbnRzJyBuYW1lcyB3aGljaCBpbmNsdWRlIHRoZSBvcHRpb24gbmFtZVxuICAgICAgICAgICAgbGV0IG9sZE9wdGlvbk5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IG5ld09wdGlvbk5hbWUgPSBmaW5kVHJhbnNsYXRpb24oaW5wdXQsIGxhbmd1YWdlQ29kZSk/Lm5hbWU7XG4gICAgICAgICAgICBpZiAoIW5ld09wdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVQcm9kdWN0VmFyaWFudE5hbWVzJCA9IG9mKFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRzVG9VcGRhdGU6IFVwZGF0ZVByb2R1Y3RWYXJpYW50SW5wdXRbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YXJpYW50IG9mIHByb2R1Y3QudmFyaWFudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFyaWFudC5vcHRpb25zLm1hcChvID0+IG8uaWQpLmluY2x1ZGVzKGlucHV0LmlkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZE9wdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZE9wdGlvbk5hbWUgPSBmaW5kVHJhbnNsYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudC5vcHRpb25zLmZpbmQobyA9PiBvLmlkID09PSBpbnB1dC5pZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgKT8ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYW50TmFtZSA9IGZpbmRUcmFuc2xhdGlvbih2YXJpYW50LCBsYW5ndWFnZUNvZGUpPy5uYW1lIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkT3B0aW9uTmFtZSAmJiBuZXdPcHRpb25OYW1lICYmIHZhcmlhbnROYW1lLmluY2x1ZGVzKG9sZE9wdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50c1RvVXBkYXRlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB2YXJpYW50LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZXBsYWNlTGFzdCh2YXJpYW50TmFtZSwgb2xkT3B0aW9uTmFtZSwgbmV3T3B0aW9uTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhcmlhbnRzVG9VcGRhdGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlUHJvZHVjdFZhcmlhbnROYW1lcyQgPSB0aGlzLmRhdGFTZXJ2aWNlLnByb2R1Y3QudXBkYXRlUHJvZHVjdFZhcmlhbnRzKHZhcmlhbnRzVG9VcGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLnByb2R1Y3RcbiAgICAgICAgICAgIC51cGRhdGVQcm9kdWN0T3B0aW9uKGlucHV0KVxuICAgICAgICAgICAgLnBpcGUobWVyZ2VNYXAoKCkgPT4gdXBkYXRlUHJvZHVjdFZhcmlhbnROYW1lcyQpKTtcbiAgICB9XG5cbiAgICBkZWxldGVQcm9kdWN0VmFyaWFudChpZDogc3RyaW5nLCBwcm9kdWN0SWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5wcm9kdWN0LmRlbGV0ZVByb2R1Y3RWYXJpYW50KGlkKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kZWxldGVQcm9kdWN0VmFyaWFudC5yZXN1bHQgPT09IERlbGV0aW9uUmVzdWx0LkRFTEVURUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UucHJvZHVjdC5nZXRQcm9kdWN0KHByb2R1Y3RJZCkuc2luZ2xlJDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihyZXN1bHQuZGVsZXRlUHJvZHVjdFZhcmlhbnQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19