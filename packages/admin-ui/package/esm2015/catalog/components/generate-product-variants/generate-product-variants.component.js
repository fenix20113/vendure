import { Component, EventEmitter, Output } from '@angular/core';
import { generateAllCombinations } from '@vendure/common/lib/shared-utils';
import { DataService } from '@vendure/admin-ui/core';
const DEFAULT_VARIANT_CODE = '__DEFAULT_VARIANT__';
export class GenerateProductVariantsComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.variantsChange = new EventEmitter();
        this.optionGroups = [];
        this.variantFormValues = {};
    }
    ngOnInit() {
        this.dataService.settings.getActiveChannel().single$.subscribe(data => {
            this.currencyCode = data.activeChannel.currencyCode;
        });
        this.generateVariants();
    }
    addOption() {
        this.optionGroups.push({ name: '', values: [] });
    }
    removeOption(name) {
        this.optionGroups = this.optionGroups.filter(g => g.name !== name);
        this.generateVariants();
    }
    generateVariants() {
        const totalValuesCount = this.optionGroups.reduce((sum, group) => sum + group.values.length, 0);
        const groups = totalValuesCount
            ? this.optionGroups.map(g => g.values.map(v => v.name))
            : [[DEFAULT_VARIANT_CODE]];
        this.variants = generateAllCombinations(groups).map(values => ({ id: values.join('|'), values }));
        this.variants.forEach(variant => {
            if (!this.variantFormValues[variant.id]) {
                this.variantFormValues[variant.id] = {
                    optionValues: variant.values,
                    enabled: true,
                    price: this.copyFromDefault(variant.id, 'price', 0),
                    sku: this.copyFromDefault(variant.id, 'sku', ''),
                    stock: this.copyFromDefault(variant.id, 'stock', 0),
                };
            }
        });
        this.onFormChange();
    }
    trackByFn(index, variant) {
        return variant.values.join('|');
    }
    handleEnter(event, optionValueInputComponent) {
        event.preventDefault();
        event.stopPropagation();
        optionValueInputComponent.focus();
    }
    onFormChange() {
        const variantsToCreate = this.variants.map(v => this.variantFormValues[v.id]).filter(v => v.enabled);
        this.variantsChange.emit({
            groups: this.optionGroups.map(og => ({ name: og.name, values: og.values.map(v => v.name) })),
            variants: variantsToCreate,
        });
    }
    copyFromDefault(variantId, prop, value) {
        return variantId !== DEFAULT_VARIANT_CODE
            ? this.variantFormValues[DEFAULT_VARIANT_CODE][prop]
            : value;
    }
}
GenerateProductVariantsComponent.decorators = [
    { type: Component, args: [{
                selector: 'vdr-generate-product-variants',
                template: "<div *ngFor=\"let group of optionGroups\" class=\"option-groups\">\n    <div class=\"name\">\n        <label>{{ 'catalog.option' | translate }}</label>\n        <input\n            placeholder=\"e.g. Size\"\n            clrInput\n            [(ngModel)]=\"group.name\"\n            name=\"name\"\n            required\n            (keydown.enter)=\"handleEnter($event, optionValueInputComponent)\"\n        />\n    </div>\n    <div class=\"values\">\n        <label>{{ 'catalog.option-values' | translate }}</label>\n        <vdr-option-value-input\n            #optionValueInputComponent\n            [(ngModel)]=\"group.values\"\n            (ngModelChange)=\"generateVariants()\"\n            [groupName]=\"group.name\"\n            [disabled]=\"group.name === ''\"\n        ></vdr-option-value-input>\n    </div>\n    <div class=\"remove-group\">\n        <button\n            class=\"btn btn-icon btn-warning-outline\"\n            [title]=\"'catalog.remove-option' | translate\"\n            (click)=\"removeOption(group.name)\"\n        >\n            <clr-icon shape=\"trash\"></clr-icon>\n        </button>\n    </div>\n</div>\n<button class=\"btn btn-primary-outline btn-sm\" (click)=\"addOption()\">\n    <clr-icon shape=\"plus\"></clr-icon>\n    {{ 'catalog.add-option' | translate }}\n</button>\n\n<div class=\"variants-preview\">\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th *ngIf=\"1 < variants.length\">{{ 'common.create' | translate }}</th>\n                <th *ngIf=\"1 < variants.length\">{{ 'catalog.variant' | translate }}</th>\n                <th>{{ 'catalog.sku' | translate }}</th>\n                <th>{{ 'catalog.price' | translate }}</th>\n                <th>{{ 'catalog.stock-on-hand' | translate }}</th>\n            </tr>\n        </thead>\n        <tr\n            *ngFor=\"let variant of variants; trackBy: trackByFn\"\n            [class.disabled]=\"!variantFormValues[variant.id].enabled\"\n        >\n            <td *ngIf=\"1 < variants.length\">\n                <input\n                    type=\"checkbox\"\n                    (change)=\"onFormChange()\"\n                    [(ngModel)]=\"variantFormValues[variant.id].enabled\"\n                    clrCheckbox\n                />\n            </td>\n            <td *ngIf=\"1 < variants.length\">\n                {{ variant.values.join(' ') }}\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"text\"\n                        (change)=\"onFormChange()\"\n                        [(ngModel)]=\"variantFormValues[variant.id].sku\"\n                        [placeholder]=\"'catalog.sku' | translate\"\n                    />\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <vdr-currency-input\n                        clrInput\n                        [(ngModel)]=\"variantFormValues[variant.id].price\"\n                        (ngModelChange)=\"onFormChange()\"\n                        [currencyCode]=\"currencyCode\"\n                    ></vdr-currency-input>\n                </clr-input-container>\n            </td>\n            <td>\n                <clr-input-container>\n                    <input\n                        clrInput\n                        type=\"number\"\n                        [(ngModel)]=\"variantFormValues[variant.id].stock\"\n                        (change)=\"onFormChange()\"\n                        min=\"0\"\n                        step=\"1\"\n                    />\n                </clr-input-container>\n            </td>\n        </tr>\n    </table>\n</div>\n",
                styles: [":host{display:block;margin-bottom:120px}.option-groups{display:flex}.values{flex:1;margin:0 6px}.remove-group{padding-top:18px}.variants-preview tr.disabled td{background-color:var(--color-component-bg-100);color:var(--color-grey-400)}"]
            },] }
];
GenerateProductVariantsComponent.ctorParameters = () => [
    { type: DataService }
];
GenerateProductVariantsComponent.propDecorators = {
    variantsChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,