{"version":3,"file":"vendure-admin-ui-settings.js","sources":["../../src/lib/settings/src/components/add-country-to-zone-dialog/add-country-to-zone-dialog.component.ts","../../src/lib/settings/src/components/admin-detail/admin-detail.component.ts","../../src/lib/settings/src/components/administrator-list/administrator-list.component.ts","../../src/lib/settings/src/components/channel-detail/channel-detail.component.ts","../../src/lib/settings/src/components/channel-list/channel-list.component.ts","../../src/lib/settings/src/components/country-detail/country-detail.component.ts","../../src/lib/settings/src/components/country-list/country-list.component.ts","../../src/lib/settings/src/components/global-settings/global-settings.component.ts","../../src/lib/settings/src/components/payment-method-detail/payment-method-detail.component.ts","../../src/lib/settings/src/components/payment-method-list/payment-method-list.component.ts","../../src/lib/settings/src/components/permission-grid/permission-grid.component.ts","../../src/lib/settings/src/components/profile/profile.component.ts","../../src/lib/settings/src/components/role-detail/role-detail.component.ts","../../src/lib/settings/src/components/role-list/role-list.component.ts","../../src/lib/settings/src/components/shipping-eligibility-test-result/shipping-eligibility-test-result.component.ts","../../src/lib/settings/src/components/shipping-method-detail/shipping-method-detail.component.ts","../../src/lib/settings/src/components/shipping-method-list/shipping-method-list.component.ts","../../src/lib/settings/src/components/shipping-method-test-result/shipping-method-test-result.component.ts","../../src/lib/settings/src/components/tax-category-detail/tax-category-detail.component.ts","../../src/lib/settings/src/components/tax-category-list/tax-category-list.component.ts","../../src/lib/settings/src/components/tax-rate-detail/tax-rate-detail.component.ts","../../src/lib/settings/src/components/tax-rate-list/tax-rate-list.component.ts","../../src/lib/settings/src/components/test-address-form/test-address-form.component.ts","../../src/lib/settings/src/components/test-order-builder/test-order-builder.component.ts","../../src/lib/settings/src/components/zone-detail-dialog/zone-detail-dialog.component.ts","../../src/lib/settings/src/components/zone-list/zone-list.component.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-controls.directive.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-list-header.directive.ts","../../src/lib/settings/src/components/zone-member-list/zone-member-list.component.ts","../../src/lib/settings/src/providers/routing/administrator-resolver.ts","../../src/lib/settings/src/providers/routing/channel-resolver.ts","../../src/lib/settings/src/providers/routing/country-resolver.ts","../../src/lib/settings/src/providers/routing/global-settings-resolver.ts","../../src/lib/settings/src/providers/routing/payment-method-resolver.ts","../../src/lib/settings/src/providers/routing/profile-resolver.ts","../../src/lib/settings/src/providers/routing/role-resolver.ts","../../src/lib/settings/src/providers/routing/shipping-method-resolver.ts","../../src/lib/settings/src/providers/routing/tax-category-resolver.ts","../../src/lib/settings/src/providers/routing/tax-rate-resolver.ts","../../src/lib/settings/src/settings.routes.ts","../../src/lib/settings/src/settings.module.ts","../../src/lib/settings/src/public_api.ts","../../src/lib/settings/src/vendure-admin-ui-settings.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { DataService, Dialog, GetCountryList, GetZones } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-add-country-to-zone-dialog',\n    templateUrl: './add-country-to-zone-dialog.component.html',\n    styleUrls: ['./add-country-to-zone-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCountryToZoneDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    zoneName: string;\n    currentMembers: GetZones.Members[] = [];\n    availableCountries$: Observable<GetCountryList.Items[]>;\n    selectedMemberIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit(): void {\n        const currentMemberIds = this.currentMembers.map(m => m.id);\n        this.availableCountries$ = this.dataService.settings\n            .getCountries(999)\n            .mapStream(data => data.countries.items)\n            .pipe(map(countries => countries.filter(c => !currentMemberIds.includes(c.id))));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedMemberIds);\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, PermissionDefinition } from '@vendure/admin-ui/core';\nimport {\n    Administrator,\n    CreateAdministratorInput,\n    GetAdministrator,\n    LanguageCode,\n    Permission,\n    Role,\n    RoleFragment,\n    UpdateAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\nexport interface PermissionsByChannel {\n    channelId: string;\n    channelCode: string;\n    permissions: { [K in Permission]: boolean };\n}\n\n@Component({\n    selector: 'vdr-admin-detail',\n    templateUrl: './admin-detail.component.html',\n    styleUrls: ['./admin-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdminDetailComponent\n    extends BaseDetailComponent<GetAdministrator.Administrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    administrator$: Observable<GetAdministrator.Administrator>;\n    permissionDefinitions: PermissionDefinition[];\n    allRoles$: Observable<Role.Fragment[]>;\n    selectedRoles: Role.Fragment[] = [];\n    detailForm: FormGroup;\n    selectedRolePermissions: { [channelId: string]: PermissionsByChannel } = {} as any;\n    selectedChannelId: string | null = null;\n\n    getAvailableChannels(): PermissionsByChannel[] {\n        return Object.values(this.selectedRolePermissions);\n    }\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            roles: [[]],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.administrator$ = this.entity$;\n        this.allRoles$ = this.dataService.administrator\n            .getRoles(999)\n            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateAdministrator)) {\n                const rolesSelect = this.detailForm.get('roles');\n                if (rolesSelect) {\n                    rolesSelect.disable();\n                }\n            }\n        });\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    rolesChanged(roles: Role[]) {\n        this.buildPermissionsMap();\n    }\n\n    getPermissionsForSelectedChannel(): string[] {\n        function getActivePermissions(input: PermissionsByChannel['permissions']): string[] {\n            return Object.entries(input)\n                .filter(([permission, active]) => active)\n                .map(([permission, active]) => permission);\n        }\n        if (this.selectedChannelId) {\n            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];\n            if (selectedChannel) {\n                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;\n                return getActivePermissions(permissionMap);\n            }\n        }\n        const channels = Object.values(this.selectedRolePermissions);\n        if (0 < channels.length) {\n            this.selectedChannelId = channels[0].channelId;\n            return getActivePermissions(channels[0].permissions);\n        }\n        return [];\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const administrator: CreateAdministratorInput = {\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            password: formValue.password,\n            customFields: formValue.customFields,\n            roleIds: formValue.roles.map(role => role.id),\n        };\n        this.dataService.administrator.createAdministrator(administrator).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'Administrator',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Administrator',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.administrator$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateAdministratorInput = {\n                        id,\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                        roleIds: formValue.roles.map(role => role.id),\n                    };\n                    return this.dataService.administrator.updateAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n            roles: administrator.user.roles,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        const passwordControl = this.detailForm.get('password');\n        if (passwordControl) {\n            if (!administrator.id) {\n                passwordControl.setValidators([Validators.required]);\n            } else {\n                passwordControl.setValidators([]);\n            }\n        }\n        this.buildPermissionsMap();\n    }\n\n    private buildPermissionsMap() {\n        const permissionsControl = this.detailForm.get('roles');\n        if (permissionsControl) {\n            const roles: RoleFragment[] = permissionsControl.value;\n            const channelIdPermissionsMap = new Map<string, Set<Permission>>();\n            const channelIdCodeMap = new Map<string, string>();\n\n            for (const role of roles) {\n                for (const channel of role.channels) {\n                    const channelPermissions = channelIdPermissionsMap.get(channel.id);\n                    const permissionSet = channelPermissions || new Set<Permission>();\n\n                    role.permissions.forEach(p => permissionSet.add(p));\n                    channelIdPermissionsMap.set(channel.id, permissionSet);\n                    channelIdCodeMap.set(channel.id, channel.code);\n                }\n            }\n\n            this.selectedRolePermissions = {} as any;\n            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {\n                // tslint:disable-next-line:no-non-null-assertion\n                const permissionSet = channelIdPermissionsMap.get(channelId)!;\n                const permissionsHash: { [K in Permission]: boolean } = {} as any;\n                for (const def of this.serverConfigService.getPermissionDefinitions()) {\n                    permissionsHash[def.name] = permissionSet.has(def.name as Permission);\n                }\n                this.selectedRolePermissions[channelId] = {\n                    // tslint:disable:no-non-null-assertion\n                    channelId,\n                    channelCode: channelIdCodeMap.get(channelId)!,\n                    permissions: permissionsHash,\n                    // tslint:enable:no-non-null-assertion\n                };\n            }\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetAdministrators,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-administrator-list',\n    templateUrl: './administrator-list.component.html',\n    styleUrls: ['./administrator-list.component.scss'],\n})\nexport class AdministratorListComponent extends BaseListComponent<\n    GetAdministrators.Query,\n    GetAdministrators.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getAdministrators(...args),\n            (data) => data.administrators,\n        );\n    }\n\n    deleteAdministrator(administrator: GetAdministrators.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-administrator'),\n                body: `${administrator.firstName} ${administrator.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((res) =>\n                    res ? this.dataService.administrator.deleteAdministrator(administrator.id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.refresh();\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, CustomFieldConfig, Permission } from '@vendure/admin-ui/core';\nimport {\n    Channel,\n    CreateChannelInput,\n    CurrencyCode,\n    GetZones,\n    LanguageCode,\n    UpdateChannelInput,\n} from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\n@Component({\n    selector: 'vdr-channel-detail',\n    templateUrl: './channel-detail.component.html',\n    styleUrls: ['./channel-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelDetailComponent\n    extends BaseDetailComponent<Channel.Fragment>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    zones$: Observable<GetZones.Zones[]>;\n    detailForm: FormGroup;\n    currencyCodes = Object.values(CurrencyCode);\n    availableLanguageCodes$: Observable<LanguageCode[]>;\n    readonly updatePermission = [Permission.SuperAdmin, Permission.UpdateChannel, Permission.CreateChannel];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        protected serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Channel');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            token: ['', Validators.required],\n            pricesIncludeTax: [false],\n            currencyCode: [''],\n            defaultShippingZoneId: ['', Validators.required],\n            defaultLanguageCode: [],\n            defaultTaxZoneId: ['', Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n        this.availableLanguageCodes$ = this.serverConfigService.getAvailableLanguages();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input: CreateChannelInput = {\n            code: formValue.code,\n            token: formValue.token,\n            defaultLanguageCode: formValue.defaultLanguageCode,\n            pricesIncludeTax: formValue.pricesIncludeTax,\n            currencyCode: formValue.currencyCode,\n            defaultShippingZoneId: formValue.defaultShippingZoneId,\n            defaultTaxZoneId: formValue.defaultTaxZoneId,\n            customFields: formValue.customFields,\n        };\n        this.dataService.settings\n            .createChannel(input)\n            .pipe(\n                mergeMap(({ createChannel }) =>\n                    this.dataService.auth.currentUser().single$.pipe(\n                        map(({ me }) => ({\n                            me,\n                            createChannel,\n                        })),\n                    ),\n                ),\n                mergeMap(({ me, createChannel }) =>\n                    // tslint:disable-next-line:no-non-null-assertion\n                    this.dataService.client.updateUserChannels(me!.channels).pipe(map(() => createChannel)),\n                ),\n            )\n            .subscribe(data => {\n                switch (data.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', data.id], { relativeTo: this.route });\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(data.message);\n                        break;\n                }\n            });\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(channel => {\n                    const input = {\n                        id: channel.id,\n                        code: formValue.code,\n                        pricesIncludeTax: formValue.pricesIncludeTax,\n                        currencyCode: formValue.currencyCode,\n                        defaultShippingZoneId: formValue.defaultShippingZoneId,\n                        defaultLanguageCode: formValue.defaultLanguageCode,\n                        defaultTaxZoneId: formValue.defaultTaxZoneId,\n                        customFields: formValue.customFields,\n                    } as UpdateChannelInput;\n                    return this.dataService.settings.updateChannel(input);\n                }),\n            )\n            .subscribe(({ updateChannel }) => {\n                switch (updateChannel.__typename) {\n                    case 'Channel':\n                        this.notificationService.success(_('common.notify-update-success'), {\n                            entity: 'Channel',\n                        });\n                        this.detailForm.markAsPristine();\n                        this.changeDetector.markForCheck();\n                        break;\n                    case 'LanguageNotAvailableError':\n                        this.notificationService.error(updateChannel.message);\n                }\n            });\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: Channel.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            code: entity.code,\n            token: entity.token || this.generateToken(),\n            pricesIncludeTax: entity.pricesIncludeTax,\n            currencyCode: entity.currencyCode,\n            defaultShippingZoneId: entity.defaultShippingZone ? entity.defaultShippingZone.id : '',\n            defaultLanguageCode: entity.defaultLanguageCode,\n            defaultTaxZoneId: entity.defaultTaxZone ? entity.defaultTaxZone.id : '',\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        if (entity.code === DEFAULT_CHANNEL_CODE) {\n            const codeControl = this.detailForm.get('code');\n            if (codeControl) {\n                codeControl.disable();\n            }\n        }\n    }\n\n    private generateToken(): string {\n        const randomString = () => Math.random().toString(36).substr(3, 10);\n        return `${randomString()}${randomString()}`;\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { mergeMap, startWith, switchMap } from 'rxjs/operators';\n\nimport { Channel } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-channel-list',\n    templateUrl: './channel-list.component.html',\n    styleUrls: ['./channel-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChannelListComponent {\n    channels$: Observable<Channel.Fragment[]>;\n    private refresh$ = new Subject();\n\n    constructor(\n        private dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        this.channels$ = this.refresh$.pipe(\n            startWith(1),\n            switchMap(() => this.dataService.settings.getChannels().mapStream(data => data.channels)),\n        );\n    }\n\n    isDefaultChannel(channelCode: string): boolean {\n        return channelCode === DEFAULT_CHANNEL_CODE;\n    }\n\n    deleteChannel(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-channel'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteChannel(id) : EMPTY)),\n                mergeMap(() => this.dataService.auth.currentUser().single$),\n                // tslint:disable-next-line:no-non-null-assertion\n                mergeMap(data => this.dataService.client.updateUserChannels(data.me!.channels)),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Channel',\n                    });\n                    this.refresh$.next(1);\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Channel',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    Country,\n    CreateCountryInput,\n    createUpdatedTranslatable,\n    DataService,\n    findTranslation,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    UpdateCountryInput,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-detail',\n    templateUrl: './country-detail.component.html',\n    styleUrls: ['./country-detail.component.scss'],\n})\nexport class CountryDetailComponent\n    extends BaseDetailComponent<Country.Fragment>\n    implements OnInit, OnDestroy {\n    country$: Observable<Country.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateCountry];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            enabled: [true],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.country$ = this.entity$;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.createCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createCountry.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    save() {\n        combineLatest(this.country$, this.languageCode$)\n            .pipe(\n                take(1),\n                mergeMap(([country, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdateCountryInput = createUpdatedTranslatable({\n                        translatable: country,\n                        updatedFields: formValue,\n                        languageCode,\n                        defaultTranslation: {\n                            name: formValue.name,\n                            languageCode,\n                        },\n                    });\n                    return this.dataService.settings.updateCountry(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Country',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(country: Country, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(country, languageCode);\n\n        this.detailForm.patchValue({\n            code: country.code,\n            name: currentTranslation ? currentTranslation.name : '',\n            enabled: country.enabled,\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCountryList,\n    GetZones,\n    ModalService,\n    NotificationService,\n    Zone,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, Subject } from 'rxjs';\nimport { map, startWith, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-country-list',\n    templateUrl: './country-list.component.html',\n    styleUrls: ['./country-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountryListComponent implements OnInit, OnDestroy {\n    searchTerm = new FormControl('');\n    countriesWithZones$: Observable<Array<GetCountryList.Items & { zones: GetZones.Zones[] }>>;\n    zones$: Observable<GetZones.Zones[]>;\n\n    private countries: GetCountryList.Items[] = [];\n    private destroy$ = new Subject();\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {}\n\n    ngOnInit() {\n        const countries$ = this.searchTerm.valueChanges.pipe(\n            startWith(null),\n            switchMap(term => this.dataService.settings.getCountries(999, 0, term).stream$),\n            tap(data => (this.countries = data.countries.items)),\n            map(data => data.countries.items),\n        );\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\n        this.countriesWithZones$ = combineLatest(countries$, this.zones$).pipe(\n            map(([countries, zones]) => {\n                return countries.map(country => ({\n                    ...country,\n                    zones: zones.filter(z => !!z.members.find(c => c.id === country.id)),\n                }));\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    deleteCountry(countryId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-country'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.settings.deleteCountry(countryId) : EMPTY,\n                ),\n            )\n            .subscribe(\n                response => {\n                    if (response.deleteCountry.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Country',\n                        });\n                        this.dataService.settings.getCountries(999, 0).single$.subscribe();\n                    } else {\n                        this.notificationService.error(response.deleteCountry.message || '');\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Country',\n                    });\n                },\n            );\n    }\n\n    private isZone(input: Zone.Fragment | { name: string } | string): input is Zone.Fragment {\n        return input.hasOwnProperty('id');\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent } from '@vendure/admin-ui/core';\nimport { CustomFieldConfig, GlobalSettings, LanguageCode, Permission } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-global-settings',\n    templateUrl: './global-settings.component.html',\n    styleUrls: ['./global-settings.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalSettingsComponent extends BaseDetailComponent<GlobalSettings> implements OnInit {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    languageCodes = Object.values(LanguageCode);\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateGlobalSettings];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('GlobalSettings');\n        this.detailForm = this.formBuilder.group({\n            availableLanguages: [''],\n            trackInventory: false,\n            outOfStockThreshold: [0, Validators.required],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit(): void {\n        this.init();\n        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {\n            if (!userStatus.permissions.includes(Permission.UpdateSettings)) {\n                const languagesSelect = this.detailForm.get('availableLanguages');\n                if (languagesSelect) {\n                    languagesSelect.disable();\n                }\n            }\n        });\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n\n        this.dataService.settings\n            .updateGlobalSettings(this.detailForm.value)\n            .pipe(\n                tap(({ updateGlobalSettings }) => {\n                    switch (updateGlobalSettings.__typename) {\n                        case 'GlobalSettings':\n                            this.detailForm.markAsPristine();\n                            this.changeDetector.markForCheck();\n                            this.notificationService.success(_('common.notify-update-success'), {\n                                entity: 'Settings',\n                            });\n                            break;\n                        case 'ChannelDefaultLanguageError':\n                            this.notificationService.error(updateGlobalSettings.message);\n                    }\n                }),\n                switchMap(() => this.serverConfigService.refreshGlobalSettings()),\n            )\n            .subscribe();\n    }\n\n    protected setFormValues(entity: GlobalSettings, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            availableLanguages: entity.availableLanguages,\n            trackInventory: entity.trackInventory,\n            outOfStockThreshold: entity.outOfStockThreshold,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    ConfigArgDefinition,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreatePaymentMethodInput,\n    DataService,\n    encodeConfigArgValue,\n    getConfigArgValue,\n    NotificationService,\n    PaymentMethod,\n    Permission,\n    ServerConfigService,\n    toConfigurableOperationInput,\n    UpdatePaymentMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-detail',\n    templateUrl: './payment-method-detail.component.html',\n    styleUrls: ['./payment-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodDetailComponent\n    extends BaseDetailComponent<PaymentMethod.Fragment>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    checkers: ConfigurableOperationDefinition[] = [];\n    handlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedHandler?: ConfigurableOperation | null;\n    selectedHandlerDefinition?: ConfigurableOperationDefinition;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdatePaymentMethod];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            enabled: [true, Validators.required],\n            checker: {},\n            handler: {},\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.settings.getPaymentMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.paymentMethodEligibilityCheckers;\n            this.handlers = data.paymentMethodHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.paymentMethodEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedHandlerDefinition = data.paymentMethodHandlers.find(\n                c => c.code === (entity.handler && entity.handler.code),\n            );\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    configArgsIsPopulated(): boolean {\n        const configArgsGroup = this.detailForm.get('configArgs') as FormGroup | undefined;\n        if (!configArgsGroup) {\n            return false;\n        }\n        return 0 < Object.keys(configArgsGroup.controls).length;\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectHandler(handler: ConfigurableOperationDefinition) {\n        this.selectedHandlerDefinition = handler;\n        this.selectedHandler = configurableDefinitionToInstance(handler);\n        const formControl = this.detailForm.get('handler');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedHandler);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    removeChecker() {\n        this.selectedChecker = null;\n        this.detailForm.markAsDirty();\n    }\n\n    removeHandler() {\n        this.selectedHandler = null;\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: CreatePaymentMethodInput = {\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                    };\n                    return this.dataService.settings.createPaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createPaymentMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedHandler = this.selectedHandler;\n        if (!selectedHandler) {\n            return;\n        }\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const input: UpdatePaymentMethodInput = {\n                        id,\n                        name: formValue.name,\n                        code: formValue.code,\n                        description: formValue.description,\n                        enabled: formValue.enabled,\n                        checker: selectedChecker\n                            ? toConfigurableOperationInput(selectedChecker, formValue.checker)\n                            : null,\n                        handler: toConfigurableOperationInput(selectedHandler, formValue.handler),\n                    };\n                    return this.dataService.settings.updatePaymentMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(paymentMethod: PaymentMethod.Fragment): void {\n        this.detailForm.patchValue({\n            name: paymentMethod.name,\n            code: paymentMethod.code,\n            description: paymentMethod.description,\n            enabled: paymentMethod.enabled,\n            checker: paymentMethod.checker || {},\n            handler: paymentMethod.handler || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = paymentMethod.checker && {\n                code: paymentMethod.checker.code,\n                args: paymentMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedHandler) {\n            this.selectedHandler = paymentMethod.handler && {\n                code: paymentMethod.handler.code,\n                args: paymentMethod.handler.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    DeletionResult,\n    GetPaymentMethodList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-payment-method-list',\n    templateUrl: './payment-method-list.component.html',\n    styleUrls: ['./payment-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodListComponent extends BaseListComponent<\n    GetPaymentMethodList.Query,\n    GetPaymentMethodList.Items\n> {\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getPaymentMethods(...args).refetchOnChannelChange(),\n            data => data.paymentMethods,\n        );\n    }\n\n    deletePaymentMethod(paymentMethodId: string) {\n        this.showModalAndDelete(paymentMethodId)\n            .pipe(\n                switchMap(response => {\n                    if (response.result === DeletionResult.DELETED) {\n                        return [true];\n                    } else {\n                        return this.showModalAndDelete(paymentMethodId, response.message || '').pipe(\n                            map(r => r.result === DeletionResult.DELETED),\n                        );\n                    }\n                }),\n                // Refresh the cached facets to reflect the changes\n                switchMap(() => this.dataService.settings.getPaymentMethods(100).single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'PaymentMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'PaymentMethod',\n                    });\n                },\n            );\n    }\n\n    private showModalAndDelete(paymentMethodId: string, message?: string) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-payment-method'),\n                body: message,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res =>\n                    res ? this.dataService.settings.deletePaymentMethod(paymentMethodId, !!message) : EMPTY,\n                ),\n                map(res => res.deletePaymentMethod),\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { PermissionDefinition } from '@vendure/admin-ui/core';\n\nexport interface PermissionGridRow {\n    label: string;\n    description: string;\n    permissions: PermissionDefinition[];\n}\n\n/**\n * A table showing and allowing the setting of all possible CRUD permissions.\n */\n@Component({\n    selector: 'vdr-permission-grid',\n    templateUrl: './permission-grid.component.html',\n    styleUrls: ['./permission-grid.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PermissionGridComponent implements OnInit {\n    @Input() permissionDefinitions: PermissionDefinition[];\n    @Input() activePermissions: string[];\n    @Input() readonly = false;\n    @Output() permissionChange = new EventEmitter<{ permission: string; value: boolean }>();\n    gridData: PermissionGridRow[];\n\n    ngOnInit() {\n        this.buildGrid();\n    }\n\n    setPermission(permission: string, value: boolean) {\n        if (!this.readonly) {\n            this.permissionChange.emit({ permission, value });\n        }\n    }\n\n    toggleAll(defs: PermissionDefinition[]) {\n        const value = defs.some(d => !this.activePermissions.includes(d.name));\n        for (const def of defs) {\n            this.permissionChange.emit({ permission: def.name, value });\n        }\n    }\n\n    private buildGrid() {\n        const crudGroups = new Map<string, PermissionDefinition[]>();\n        const nonCrud: PermissionDefinition[] = [];\n        const crudRe = /^(Create|Read|Update|Delete)([a-zA-Z]+)$/;\n        for (const def of this.permissionDefinitions) {\n            const isCrud = crudRe.test(def.name);\n            if (isCrud) {\n                const groupName = def.name.match(crudRe)?.[2];\n                if (groupName) {\n                    const existing = crudGroups.get(groupName);\n                    if (existing) {\n                        existing.push(def);\n                    } else {\n                        crudGroups.set(groupName, [def]);\n                    }\n                }\n            } else if (def.assignable) {\n                nonCrud.push(def);\n            }\n        }\n        this.gridData = [\n            ...nonCrud.map(d => ({\n                label: d.name,\n                description: d.description,\n                permissions: [d],\n            })),\n            ...Array.from(crudGroups.entries()).map(([label, defs]) => {\n                return {\n                    label,\n                    description: this.extractCrudDescription(defs[0]),\n                    permissions: defs,\n                };\n            }),\n        ];\n    }\n\n    private extractCrudDescription(def: PermissionDefinition): string {\n        return def.description.replace(/Grants permission to [\\w]+/, 'Grants permissions on');\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    BaseDetailComponent,\n    CustomFieldConfig,\n    DataService,\n    GetActiveAdministrator,\n    LanguageCode,\n    NotificationService,\n    ServerConfigService,\n    UpdateActiveAdministratorInput,\n} from '@vendure/admin-ui/core';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfileComponent\n    extends BaseDetailComponent<GetActiveAdministrator.ActiveAdministrator>\n    implements OnInit, OnDestroy {\n    customFields: CustomFieldConfig[];\n    detailForm: FormGroup;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('Administrator');\n        this.detailForm = this.formBuilder.group({\n            emailAddress: ['', Validators.required],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            password: [''],\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const administrator: UpdateActiveAdministratorInput = {\n                        emailAddress: formValue.emailAddress,\n                        firstName: formValue.firstName,\n                        lastName: formValue.lastName,\n                        password: formValue.password,\n                        customFields: formValue.customFields,\n                    };\n                    return this.dataService.administrator.updateActiveAdministrator(administrator);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Administrator',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Administrator',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(administrator: Administrator, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            emailAddress: administrator.emailAddress,\n            firstName: administrator.firstName,\n            lastName: administrator.lastName,\n        });\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (administrator as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateRoleInput,\n    DataService,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    PermissionDefinition,\n    Role,\n    ServerConfigService,\n    UpdateRoleInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { unique } from '@vendure/common/lib/unique';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-detail',\n    templateUrl: './role-detail.component.html',\n    styleUrls: ['./role-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleDetailComponent extends BaseDetailComponent<Role> implements OnInit, OnDestroy {\n    role$: Observable<Role>;\n    detailForm: FormGroup;\n    permissionDefinitions: PermissionDefinition[];\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            description: ['', Validators.required],\n            channelIds: [],\n            permissions: [],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.role$ = this.entity$;\n        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    updateCode(nameValue: string) {\n        const codeControl = this.detailForm.get(['code']);\n        if (codeControl && codeControl.pristine) {\n            codeControl.setValue(normalizeString(nameValue, '-'));\n        }\n    }\n\n    setPermission(change: { permission: string; value: boolean }) {\n        const permissionsControl = this.detailForm.get('permissions');\n        if (permissionsControl) {\n            const currentPermissions = permissionsControl.value as string[];\n            const newValue =\n                change.value === true\n                    ? unique([...currentPermissions, change.permission])\n                    : currentPermissions.filter(p => p !== change.permission);\n            permissionsControl.setValue(newValue);\n            permissionsControl.markAsDirty();\n        }\n    }\n\n    create() {\n        const formValue = this.detailForm.value;\n        const role: CreateRoleInput = formValue;\n        this.dataService.administrator.createRole(role).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), { entity: 'Role' });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createRole.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'Role',\n                });\n            },\n        );\n    }\n\n    save() {\n        this.role$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const formValue = this.detailForm.value;\n                    const role: UpdateRoleInput = { id, ...formValue };\n                    return this.dataService.administrator.updateRole(role);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), { entity: 'Role' });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n\n    protected setFormValues(role: Role, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            description: role.description,\n            code: role.code,\n            channelIds: role.channels.map(c => c.id),\n            permissions: role.permissions,\n        });\n        // This was required to get the channel selector component to\n        // correctly display its contents. A while spent debugging the root\n        // cause did not yield a solution, therefore this next line.\n        this.changeDetector.detectChanges();\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { GetRoles, Role } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { CUSTOMER_ROLE_CODE, SUPER_ADMIN_ROLE_CODE } from '@vendure/common/lib/shared-constants';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-role-list',\n    templateUrl: './role-list.component.html',\n    styleUrls: ['./role-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RoleListComponent extends BaseListComponent<GetRoles.Query, GetRoles.Items> implements OnInit {\n    readonly initialLimit = 3;\n    displayLimit: { [id: string]: number } = {};\n    visibleRoles$: Observable<GetRoles.Items[]>;\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.administrator.getRoles(...args),\n            data => data.roles,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.visibleRoles$ = this.items$.pipe(\n            map(roles => roles.filter(role => role.code !== CUSTOMER_ROLE_CODE)),\n        );\n    }\n\n    toggleDisplayLimit(role: GetRoles.Items) {\n        if (this.displayLimit[role.id] === role.permissions.length) {\n            this.displayLimit[role.id] = this.initialLimit;\n        } else {\n            this.displayLimit[role.id] = role.permissions.length;\n        }\n    }\n\n    isDefaultRole(role: Role): boolean {\n        return role.code === SUPER_ADMIN_ROLE_CODE || role.code === CUSTOMER_ROLE_CODE;\n    }\n\n    deleteRole(id: string) {\n        this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-role'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(response => (response ? this.dataService.administrator.deleteRole(id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Role',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Role',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, ShippingMethodQuote } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-eligibility-test-result',\n    templateUrl: './shipping-eligibility-test-result.component.html',\n    styleUrls: ['./shipping-eligibility-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingEligibilityTestResultComponent {\n    @Input() testResult: ShippingMethodQuote[];\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    configurableDefinitionToInstance,\n    ConfigurableOperation,\n    ConfigurableOperationDefinition,\n    CreateShippingMethodInput,\n    createUpdatedTranslatable,\n    CustomFieldConfig,\n    DataService,\n    findTranslation,\n    GetActiveChannel,\n    getConfigArgValue,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    ShippingMethod,\n    TestShippingMethodInput,\n    TestShippingMethodResult,\n    toConfigurableOperationInput,\n    UpdateShippingMethodInput,\n} from '@vendure/admin-ui/core';\nimport { normalizeString } from '@vendure/common/lib/normalize-string';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-detail',\n    templateUrl: './shipping-method-detail.component.html',\n    styleUrls: ['./shipping-method-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodDetailComponent\n    extends BaseDetailComponent<ShippingMethod.Fragment>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    checkers: ConfigurableOperationDefinition[] = [];\n    calculators: ConfigurableOperationDefinition[] = [];\n    fulfillmentHandlers: ConfigurableOperationDefinition[] = [];\n    selectedChecker?: ConfigurableOperation | null;\n    selectedCheckerDefinition?: ConfigurableOperationDefinition;\n    selectedCalculator?: ConfigurableOperation | null;\n    selectedCalculatorDefinition?: ConfigurableOperationDefinition;\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<TestShippingMethodResult | undefined>;\n    customFields: CustomFieldConfig[];\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.customFields = this.getCustomFieldConfig('ShippingMethod');\n        this.detailForm = this.formBuilder.group({\n            code: ['', Validators.required],\n            name: ['', Validators.required],\n            description: '',\n            fulfillmentHandler: ['', Validators.required],\n            checker: {},\n            calculator: {},\n            customFields: this.formBuilder.group(\n                this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n            ),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        combineLatest([\n            this.dataService.shippingMethod.getShippingMethodOperations().single$,\n            this.entity$.pipe(take(1)),\n        ]).subscribe(([data, entity]) => {\n            this.checkers = data.shippingEligibilityCheckers;\n            this.calculators = data.shippingCalculators;\n            this.fulfillmentHandlers = data.fulfillmentHandlers;\n            this.changeDetector.markForCheck();\n            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(\n                c => c.code === (entity.checker && entity.checker.code),\n            );\n            this.selectedCalculatorDefinition = data.shippingCalculators.find(\n                c => c.code === (entity.calculator && entity.calculator.code),\n            );\n        });\n\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                if (!this.selectedChecker || !this.selectedCalculator) {\n                    return of(undefined);\n                }\n                const formValue = this.detailForm.value;\n                const input: TestShippingMethodInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                    checker: toConfigurableOperationInput(this.selectedChecker, formValue.checker),\n                    calculator: toConfigurableOperationInput(this.selectedCalculator, formValue.calculator),\n                };\n                return this.dataService.shippingMethod\n                    .testShippingMethod(input)\n                    .mapSingle(result => result.testShippingMethod);\n            }),\n        );\n\n        // tslint:disable:no-non-null-assertion\n        merge(\n            this.detailForm.get(['checker'])!.valueChanges,\n            this.detailForm.get(['calculator'])!.valueChanges,\n        )\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => (this.testDataUpdated = true));\n        // tslint:enable:no-non-null-assertion\n    }\n\n    ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customFields', name]);\n    }\n\n    updateCode(currentCode: string, nameValue: string) {\n        if (!currentCode) {\n            const codeControl = this.detailForm.get(['code']);\n            if (codeControl && codeControl.pristine) {\n                codeControl.setValue(normalizeString(nameValue, '-'));\n            }\n        }\n    }\n\n    selectChecker(checker: ConfigurableOperationDefinition) {\n        this.selectedCheckerDefinition = checker;\n        this.selectedChecker = configurableDefinitionToInstance(checker);\n        const formControl = this.detailForm.get('checker');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedChecker);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    selectCalculator(calculator: ConfigurableOperationDefinition) {\n        this.selectedCalculatorDefinition = calculator;\n        this.selectedCalculator = configurableDefinitionToInstance(calculator);\n        const formControl = this.detailForm.get('calculator');\n        if (formControl) {\n            formControl.clearValidators();\n            formControl.updateValueAndValidity({ onlySelf: true });\n            formControl.patchValue(this.selectedCalculator);\n        }\n        this.detailForm.markAsDirty();\n    }\n\n    create() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as CreateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.createShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                    this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    save() {\n        const selectedChecker = this.selectedChecker;\n        const selectedCalculator = this.selectedCalculator;\n        if (!selectedChecker || !selectedCalculator) {\n            return;\n        }\n        combineLatest([this.entity$, this.languageCode$])\n            .pipe(\n                take(1),\n                mergeMap(([shippingMethod, languageCode]) => {\n                    const formValue = this.detailForm.value;\n                    const input = {\n                        ...(this.getUpdatedShippingMethod(\n                            shippingMethod,\n                            this.detailForm,\n                            languageCode,\n                        ) as UpdateShippingMethodInput),\n                        checker: toConfigurableOperationInput(selectedChecker, formValue.checker),\n                        calculator: toConfigurableOperationInput(selectedCalculator, formValue.calculator),\n                    };\n                    return this.dataService.shippingMethod.updateShippingMethod(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(\n            this.testAddress &&\n            this.testOrderLines &&\n            this.testOrderLines.length &&\n            this.selectedChecker &&\n            this.selectedCalculator\n        );\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n\n    /**\n     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which\n     * can then be persisted to the API.\n     */\n    private getUpdatedShippingMethod(\n        shippingMethod: ShippingMethod.Fragment,\n        formGroup: FormGroup,\n        languageCode: LanguageCode,\n    ): Omit<CreateShippingMethodInput | UpdateShippingMethodInput, 'checker' | 'calculator'> {\n        const formValue = formGroup.value;\n        const input = createUpdatedTranslatable({\n            translatable: shippingMethod,\n            updatedFields: formValue,\n            customFieldConfig: this.customFields,\n            languageCode,\n            defaultTranslation: {\n                languageCode,\n                name: shippingMethod.name || '',\n                description: shippingMethod.description || '',\n            },\n        });\n        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };\n    }\n\n    protected setFormValues(shippingMethod: ShippingMethod.Fragment, languageCode: LanguageCode): void {\n        const currentTranslation = findTranslation(shippingMethod, languageCode);\n        this.detailForm.patchValue({\n            name: currentTranslation?.name ?? '',\n            description: currentTranslation?.description ?? '',\n            code: shippingMethod.code,\n            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,\n            checker: shippingMethod.checker || {},\n            calculator: shippingMethod.calculator || {},\n        });\n        if (!this.selectedChecker) {\n            this.selectedChecker = shippingMethod.checker && {\n                code: shippingMethod.checker.code,\n                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (!this.selectedCalculator) {\n            this.selectedCalculator = shippingMethod.calculator && {\n                code: shippingMethod.calculator?.code,\n                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),\n            };\n        }\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get('customFields') as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value =\n                    fieldDef.type === 'localeString'\n                        ? (currentTranslation as any).customFields[key]\n                        : (shippingMethod as any).customFields[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport {\n    GetActiveChannel,\n    GetShippingMethodList,\n    ShippingMethodQuote,\n    TestEligibleShippingMethodsInput,\n    TestShippingMethodInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\nimport { EMPTY, Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { TestAddress } from '../test-address-form/test-address-form.component';\nimport { TestOrderLine } from '../test-order-builder/test-order-builder.component';\n\n@Component({\n    selector: 'vdr-shipping-method-list',\n    templateUrl: './shipping-method-list.component.html',\n    styleUrls: ['./shipping-method-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodListComponent\n    extends BaseListComponent<GetShippingMethodList.Query, GetShippingMethodList.Items>\n    implements OnInit {\n    activeChannel$: Observable<GetActiveChannel.ActiveChannel>;\n    testAddress: TestAddress;\n    testOrderLines: TestOrderLine[];\n    testDataUpdated = false;\n    testResult$: Observable<ShippingMethodQuote[] | undefined>;\n    private fetchTestResult$ = new Subject<[TestAddress, TestOrderLine[]]>();\n\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) =>\n                this.dataService.shippingMethod.getShippingMethods(...args).refetchOnChannelChange(),\n            data => data.shippingMethods,\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.testResult$ = this.fetchTestResult$.pipe(\n            switchMap(([address, lines]) => {\n                const input: TestEligibleShippingMethodsInput = {\n                    shippingAddress: { ...address, streetLine1: 'test' },\n                    lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),\n                };\n                return this.dataService.shippingMethod\n                    .testEligibleShippingMethods(input)\n                    .mapSingle(result => result.testEligibleShippingMethods);\n            }),\n        );\n        this.activeChannel$ = this.dataService.settings\n            .getActiveChannel()\n            .mapStream(data => data.activeChannel);\n    }\n\n    deleteShippingMethod(id: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-shipping-method'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response ? this.dataService.shippingMethod.deleteShippingMethod(id) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'ShippingMethod',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'ShippingMethod',\n                    });\n                },\n            );\n    }\n\n    setTestOrderLines(event: TestOrderLine[]) {\n        this.testOrderLines = event;\n        this.testDataUpdated = true;\n    }\n\n    setTestAddress(event: TestAddress) {\n        this.testAddress = event;\n        this.testDataUpdated = true;\n    }\n\n    allTestDataPresent(): boolean {\n        return !!(this.testAddress && this.testOrderLines && this.testOrderLines.length);\n    }\n\n    runTest() {\n        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);\n        this.testDataUpdated = false;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { CurrencyCode, TestShippingMethodResult } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-shipping-method-test-result',\n    templateUrl: './shipping-method-test-result.component.html',\n    styleUrls: ['./shipping-method-test-result.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingMethodTestResultComponent {\n    @Input() testResult: TestShippingMethodResult;\n    @Input() okToRun = false;\n    @Input() testDataUpdated = false;\n    @Input() currencyCode: CurrencyCode;\n    @Output() runTest = new EventEmitter<void>();\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { BaseDetailComponent, Permission } from '@vendure/admin-ui/core';\nimport {\n    ConfigurableOperation,\n    CreateTaxCategoryInput,\n    LanguageCode,\n    TaxCategory,\n    UpdateTaxCategoryInput,\n} from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ServerConfigService } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-detail',\n    templateUrl: './tax-category-detail.component.html',\n    styleUrls: ['./tax-category-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryDetailComponent\n    extends BaseDetailComponent<TaxCategory.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategory$: Observable<TaxCategory.Fragment>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxCategory];\n\n    private taxCondition: ConfigurableOperation;\n    private taxAction: ConfigurableOperation;\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            isDefault: false,\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategory$ = this.entity$;\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = { name: formValue.name, isDefault: formValue.isDefault } as CreateTaxCategoryInput;\n        this.dataService.settings.createTaxCategory(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxCategory',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxCategory.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxCategory',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.taxCategory$\n            .pipe(\n                take(1),\n                mergeMap(taxCategory => {\n                    const input = {\n                        id: taxCategory.id,\n                        name: formValue.name,\n                        isDefault: formValue.isDefault,\n                    } as UpdateTaxCategoryInput;\n                    return this.dataService.settings.updateTaxCategory(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxCategory',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxCategory',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxCategory.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            isDefault: entity.isDefault,\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { DeletionResult, GetTaxCategories, TaxCategory } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { QueryResult } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-list',\n    templateUrl: './tax-category-list.component.html',\n    styleUrls: ['./tax-category-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxCategoryListComponent {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    private queryResult: QueryResult<GetTaxCategories.Query>;\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n    ) {\n        this.queryResult = this.dataService.settings.getTaxCategories();\n        this.taxCategories$ = this.queryResult.mapStream(data => data.taxCategories);\n    }\n\n    deleteTaxCategory(taxCategory: TaxCategory.Fragment) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-category'),\n                body: taxCategory.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxCategory(taxCategory.id) : EMPTY)),\n                map(res => res.deleteTaxCategory),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.queryResult.ref.refetch();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateTaxRateInput,\n    CustomerGroup,\n    DataService,\n    GetZones,\n    LanguageCode,\n    NotificationService,\n    Permission,\n    ServerConfigService,\n    TaxCategory,\n    TaxRate,\n    UpdateTaxRateInput,\n} from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-tax-rate-detail',\n    templateUrl: './tax-rate-detail.component.html',\n    styleUrls: ['./tax-rate-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateDetailComponent\n    extends BaseDetailComponent<TaxRate.Fragment>\n    implements OnInit, OnDestroy {\n    taxCategories$: Observable<TaxCategory.Fragment[]>;\n    zones$: Observable<GetZones.Zones[]>;\n    groups$: Observable<CustomerGroup[]>;\n    detailForm: FormGroup;\n    readonly updatePermission = [Permission.UpdateSettings, Permission.UpdateTaxRate];\n\n    constructor(\n        router: Router,\n        route: ActivatedRoute,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        protected dataService: DataService,\n        private formBuilder: FormBuilder,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n        this.detailForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            enabled: [true],\n            value: [0, Validators.required],\n            taxCategoryId: [''],\n            zoneId: [''],\n            customerGroupId: [''],\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.taxCategories$ = this.dataService.settings\n            .getTaxCategories()\n            .mapSingle(data => data.taxCategories);\n        this.zones$ = this.dataService.settings.getZones().mapSingle(data => data.zones);\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    saveButtonEnabled(): boolean {\n        return this.detailForm.dirty && this.detailForm.valid;\n    }\n\n    create() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        const input = {\n            name: formValue.name,\n            enabled: formValue.enabled,\n            value: formValue.value,\n            categoryId: formValue.taxCategoryId,\n            zoneId: formValue.zoneId,\n            customerGroupId: formValue.customerGroupId,\n        } as CreateTaxRateInput;\n        this.dataService.settings.createTaxRate(input).subscribe(\n            data => {\n                this.notificationService.success(_('common.notify-create-success'), {\n                    entity: 'TaxRate',\n                });\n                this.detailForm.markAsPristine();\n                this.changeDetector.markForCheck();\n                this.router.navigate(['../', data.createTaxRate.id], { relativeTo: this.route });\n            },\n            err => {\n                this.notificationService.error(_('common.notify-create-error'), {\n                    entity: 'TaxRate',\n                });\n            },\n        );\n    }\n\n    save() {\n        if (!this.detailForm.dirty) {\n            return;\n        }\n        const formValue = this.detailForm.value;\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(taxRate => {\n                    const input = {\n                        id: taxRate.id,\n                        name: formValue.name,\n                        enabled: formValue.enabled,\n                        value: formValue.value,\n                        categoryId: formValue.taxCategoryId,\n                        zoneId: formValue.zoneId,\n                        customerGroupId: formValue.customerGroupId,\n                    } as UpdateTaxRateInput;\n                    return this.dataService.settings.updateTaxRate(input);\n                }),\n            )\n            .subscribe(\n                data => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'TaxRate',\n                    });\n                    this.detailForm.markAsPristine();\n                    this.changeDetector.markForCheck();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n\n    /**\n     * Update the form values when the entity changes.\n     */\n    protected setFormValues(entity: TaxRate.Fragment, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            name: entity.name,\n            enabled: entity.enabled,\n            value: entity.value,\n            taxCategoryId: entity.category ? entity.category.id : '',\n            zoneId: entity.zone ? entity.zone.id : '',\n            customerGroupId: entity.customerGroup ? entity.customerGroup.id : '',\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport { EMPTY } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { BaseListComponent } from '@vendure/admin-ui/core';\nimport { DeletionResult, GetTaxRateList } from '@vendure/admin-ui/core';\nimport { NotificationService } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\nimport { ModalService } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-tax-rate-list',\n    templateUrl: './tax-rate-list.component.html',\n    styleUrls: ['./tax-rate-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TaxRateListComponent extends BaseListComponent<GetTaxRateList.Query, GetTaxRateList.Items> {\n    constructor(\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.settings.getTaxRates(...args),\n            data => data.taxRates,\n        );\n    }\n\n    deleteTaxRate(taxRate: GetTaxRateList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('settings.confirm-delete-tax-rate'),\n                body: taxRate.name,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(res => (res ? this.dataService.settings.deleteTaxRate(taxRate.id) : EMPTY)),\n                map(res => res.deleteTaxRate),\n            )\n            .subscribe(\n                res => {\n                    if (res.result === DeletionResult.DELETED) {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'TaxRate',\n                        });\n                        this.refresh();\n                    } else {\n                        this.notificationService.error(res.message || _('common.notify-delete-error'), {\n                            entity: 'TaxRate',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'TaxRate',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { DataService, GetAvailableCountries, LocalStorageService } from '@vendure/admin-ui/core';\nimport { Observable, Subscription } from 'rxjs';\n\nexport interface TestAddress {\n    city: string;\n    province: string;\n    postalCode: string;\n    countryCode: string;\n}\n\n@Component({\n    selector: 'vdr-test-address-form',\n    templateUrl: './test-address-form.component.html',\n    styleUrls: ['./test-address-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestAddressFormComponent implements OnInit, OnDestroy {\n    @Output() addressChange = new EventEmitter<TestAddress>();\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    form: FormGroup;\n    private subscription: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dataService: DataService,\n        private localStorageService: LocalStorageService,\n    ) {}\n\n    ngOnInit() {\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items);\n        const storedValue = this.localStorageService.getForCurrentLocation('shippingTestAddress');\n        const initialValue: TestAddress = storedValue\n            ? storedValue\n            : {\n                  city: '',\n                  countryCode: '',\n                  postalCode: '',\n                  province: '',\n              };\n        this.addressChange.emit(initialValue);\n\n        this.form = this.formBuilder.group(initialValue);\n        this.subscription = this.form.valueChanges.subscribe(value => {\n            this.localStorageService.setForCurrentLocation('shippingTestAddress', value);\n            this.addressChange.emit(value);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n    CurrencyCode,\n    DataService,\n    LocalStorageService,\n    ProductSelectorSearch,\n} from '@vendure/admin-ui/core';\n\nexport interface TestOrderLine {\n    id: string;\n    name: string;\n    preview: string;\n    sku: string;\n    unitPriceWithTax: number;\n    quantity: number;\n}\n\n@Component({\n    selector: 'vdr-test-order-builder',\n    templateUrl: './test-order-builder.component.html',\n    styleUrls: ['./test-order-builder.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TestOrderBuilderComponent implements OnInit {\n    @Output() orderLinesChange = new EventEmitter<TestOrderLine[]>();\n    lines: TestOrderLine[] = [];\n    currencyCode: CurrencyCode;\n    get subTotal(): number {\n        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);\n    }\n\n    constructor(private dataService: DataService, private localStorageService: LocalStorageService) {}\n\n    ngOnInit() {\n        this.lines = this.loadFromLocalStorage();\n        if (this.lines) {\n            this.orderLinesChange.emit(this.lines);\n        }\n        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {\n            this.currencyCode = result.activeChannel.currencyCode;\n        });\n    }\n\n    selectResult(result: ProductSelectorSearch.Items) {\n        if (result) {\n            this.addToLines(result);\n        }\n    }\n\n    private addToLines(result: ProductSelectorSearch.Items) {\n        if (!this.lines.find(l => l.id === result.productVariantId)) {\n            this.lines.push({\n                id: result.productVariantId,\n                name: result.productVariantName,\n                preview: result.productAsset?.preview ?? '',\n                quantity: 1,\n                sku: result.sku,\n                unitPriceWithTax:\n                    (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,\n            });\n            this.persistToLocalStorage();\n            this.orderLinesChange.emit(this.lines);\n        }\n    }\n\n    updateQuantity() {\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    removeLine(line: TestOrderLine) {\n        this.lines = this.lines.filter(l => l.id !== line.id);\n        this.persistToLocalStorage();\n        this.orderLinesChange.emit(this.lines);\n    }\n\n    private persistToLocalStorage() {\n        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);\n    }\n\n    private loadFromLocalStorage(): TestOrderLine[] {\n        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-zone-detail-dialog',\n    templateUrl: './zone-detail-dialog.component.html',\n    styleUrls: ['./zone-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneDetailDialogComponent implements Dialog<string> {\n    zone: { id?: string; name: string };\n    resolveWith: (result?: string) => void;\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.zone.name);\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Country,\n    DataService,\n    DeletionResult,\n    GetZones,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, startWith, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCountryToZoneDialogComponent } from '../add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { ZoneDetailDialogComponent } from '../zone-detail-dialog/zone-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-zone-list',\n    templateUrl: './zone-list.component.html',\n    styleUrls: ['./zone-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneListComponent implements OnInit {\n    activeZone$: Observable<GetZones.Zones | undefined>;\n    zones$: Observable<GetZones.Zones[]>;\n    members$: Observable<GetZones.Members[]>;\n    selectedMemberIds: string[] = [];\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        private route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit(): void {\n        this.zones$ = this.dataService.settings.getZones().mapStream(data => data.zones);\n        const activeZoneId$ = this.route.paramMap.pipe(\n            map(pm => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedMemberIds = [])),\n        );\n        this.activeZone$ = combineLatest(this.zones$, activeZoneId$).pipe(\n            map(([zones, activeZoneId]) => {\n                if (activeZoneId) {\n                    return zones.find(z => z.id === activeZoneId);\n                }\n            }),\n        );\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone: { name: '' } } })\n            .pipe(\n                switchMap(name =>\n                    name ? this.dataService.settings.createZone({ name, memberIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.settings.getZones().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    delete(zoneId: string) {\n        this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-zone'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response => (response ? this.dataService.settings.deleteZone(zoneId) : EMPTY)),\n\n                switchMap(result => {\n                    if (result.deleteZone.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.settings\n                            .getZones()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteZone.message });\n                    }\n                }),\n            )\n            .subscribe(\n                result => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'Zone',\n                        });\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    update(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(ZoneDetailDialogComponent, { locals: { zone } })\n            .pipe(\n                switchMap(name =>\n                    name ? this.dataService.settings.updateZone({ id: zone.id, name }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'Zone',\n                    });\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Zone',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToZone(zone: GetZones.Zones) {\n        this.modalService\n            .fromComponent(AddCountryToZoneDialogComponent, {\n                locals: {\n                    zoneName: zone.name,\n                    currentMembers: zone.members,\n                },\n                size: 'md',\n            })\n            .pipe(\n                switchMap(memberIds =>\n                    memberIds\n                        ? this.dataService.settings\n                              .addMembersToZone(zone.id, memberIds)\n                              .pipe(mapTo(memberIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: result => {\n                    this.notificationService.success(_(`settings.add-countries-to-zone-success`), {\n                        countryCount: result.length,\n                        zoneName: zone.name,\n                    });\n                },\n                error: err => {\n                    this.notificationService.error(err);\n                },\n            });\n    }\n\n    removeFromZone(zone: GetZones.Zones, memberIds: string[]) {\n        this.dataService.settings.removeMembersFromZone(zone.id, memberIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`settings.remove-countries-from-zone-success`), {\n                    countryCount: memberIds.length,\n                    zoneName: zone.name,\n                });\n            },\n        });\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberControls]',\n})\nexport class ZoneMemberControlsDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[vdrZoneMemberListHeader]',\n})\nexport class ZoneMemberListHeaderDirective {\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';\nimport { GetZones } from '@vendure/admin-ui/core';\n\nimport { ZoneMemberControlsDirective } from './zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './zone-member-list-header.directive';\n\nexport type ZoneMember = { id: string; name: string; code: string };\n\n@Component({\n    selector: 'vdr-zone-member-list',\n    templateUrl: './zone-member-list.component.html',\n    styleUrls: ['./zone-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ZoneMemberListComponent {\n    @Input() members: ZoneMember[] = [];\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @ContentChild(ZoneMemberListHeaderDirective) headerTemplate: ZoneMemberListHeaderDirective;\n    @ContentChild(ZoneMemberControlsDirective) controlsTemplate: ZoneMemberControlsDirective;\n    filterTerm = '';\n\n    filteredMembers(): ZoneMember[] {\n        if (this.filterTerm !== '') {\n            const term = this.filterTerm.toLocaleLowerCase();\n            return this.members.filter(\n                m => m.name.toLocaleLowerCase().includes(term) || m.code.toLocaleLowerCase().includes(term),\n            );\n        } else {\n            return this.members;\n        }\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map(v => v.id));\n        }\n    }\n\n    toggleSelectMember(member: ZoneMember) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter(id => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AdministratorResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id => dataService.administrator.getAdministrator(id).mapStream(data => data.administrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Channel, CurrencyCode } from '@vendure/admin-ui/core';\nimport { getDefaultUiLanguage } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ChannelResolver extends BaseEntityResolver<Channel.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Channel',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                token: '',\n                pricesIncludeTax: false,\n                currencyCode: CurrencyCode.USD,\n                defaultLanguageCode: getDefaultUiLanguage(),\n                defaultShippingZone: {} as any,\n                defaultTaxZone: {} as any,\n            },\n            (id) => dataService.settings.getChannel(id).mapStream((data) => data.channel),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Country } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class CountryResolver extends BaseEntityResolver<Country.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Country',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                name: '',\n                enabled: false,\n                translations: [],\n            },\n            id => dataService.settings.getCountry(id).mapStream(data => data.country),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { GetGlobalSettings } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the global settings.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class GlobalSettingsResolver extends BaseEntityResolver<GetGlobalSettings.GlobalSettings> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            // we will never be creating a new GlobalSettings entity, so this part is not used.\n            {} as any,\n            () => dataService.settings.getGlobalSettings().mapStream(data => data.globalSettings),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { PaymentMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class PaymentMethodResolver extends BaseEntityResolver<PaymentMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'PaymentMethod',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                code: '',\n                description: '',\n                enabled: true,\n                checker: undefined as any,\n                handler: undefined as any,\n            },\n            id => dataService.settings.getPaymentMethod(id).mapStream(data => data.paymentMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Administrator, Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ProfileResolver extends BaseEntityResolver<Administrator.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Administrator' as 'Administrator',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                emailAddress: '',\n                firstName: '',\n                lastName: '',\n                user: { roles: [] } as any,\n            },\n            id =>\n                dataService.administrator\n                    .getActiveAdministrator()\n                    .mapStream(data => data.activeAdministrator),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Role } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoleResolver extends BaseEntityResolver<Role.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Role' as 'Role',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                code: '',\n                description: '',\n                permissions: [],\n                channels: [],\n            },\n            id => dataService.administrator.getRole(id).mapStream(data => data.role),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { ShippingMethod } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class ShippingMethodResolver extends BaseEntityResolver<ShippingMethod.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'ShippingMethod',\n                createdAt: '',\n                updatedAt: '',\n                id: '',\n                code: '',\n                name: '',\n                description: '',\n                fulfillmentHandlerCode: undefined as any,\n                checker: undefined as any,\n                calculator: undefined as any,\n                translations: [],\n            },\n            id => dataService.shippingMethod.getShippingMethod(id).mapStream(data => data.shippingMethod),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxCategory } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxCategoryResolver extends BaseEntityResolver<TaxCategory.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxCategory',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                isDefault: false,\n            },\n            id => dataService.settings.getTaxCategory(id).mapStream(data => data.taxCategory),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver, DataService, TaxRate } from '@vendure/admin-ui/core';\n\n/**\n * Resolves the id from the path into a Customer entity.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class TaxRateResolver extends BaseEntityResolver<TaxRate.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'TaxRate',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                name: '',\n                value: 0,\n                enabled: true,\n                category: {} as any,\n                zone: {} as any,\n                customerGroup: null,\n            },\n            id => dataService.settings.getTaxRate(id).mapStream(data => data.taxRate),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    Administrator,\n    CanDeactivateDetailGuard,\n    Channel,\n    Country,\n    createResolveData,\n    detailBreadcrumb,\n    Role,\n    ShippingMethod,\n    TaxCategory,\n    TaxRate,\n} from '@vendure/admin-ui/core';\n\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { AdministratorResolver } from './providers/routing/administrator-resolver';\nimport { ChannelResolver } from './providers/routing/channel-resolver';\nimport { CountryResolver } from './providers/routing/country-resolver';\nimport { GlobalSettingsResolver } from './providers/routing/global-settings-resolver';\nimport { PaymentMethodResolver } from './providers/routing/payment-method-resolver';\nimport { ProfileResolver } from './providers/routing/profile-resolver';\nimport { RoleResolver } from './providers/routing/role-resolver';\nimport { ShippingMethodResolver } from './providers/routing/shipping-method-resolver';\nimport { TaxCategoryResolver } from './providers/routing/tax-category-resolver';\nimport { TaxRateResolver } from './providers/routing/tax-rate-resolver';\n\nexport const settingsRoutes: Route[] = [\n    {\n        path: 'profile',\n        component: ProfileComponent,\n        resolve: createResolveData(ProfileResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.profile'),\n        },\n    },\n    {\n        path: 'administrators',\n        component: AdministratorListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.administrators'),\n        },\n    },\n    {\n        path: 'administrators/:id',\n        component: AdminDetailComponent,\n        resolve: createResolveData(AdministratorResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: administratorBreadcrumb },\n    },\n    {\n        path: 'channels',\n        component: ChannelListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.channels'),\n        },\n    },\n    {\n        path: 'channels/:id',\n        component: ChannelDetailComponent,\n        resolve: createResolveData(ChannelResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: channelBreadcrumb },\n    },\n    {\n        path: 'roles',\n        component: RoleListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.roles'),\n        },\n    },\n    {\n        path: 'roles/:id',\n        component: RoleDetailComponent,\n        resolve: createResolveData(RoleResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: { breadcrumb: roleBreadcrumb },\n    },\n    {\n        path: 'tax-categories',\n        component: TaxCategoryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-categories'),\n        },\n    },\n    {\n        path: 'tax-categories/:id',\n        component: TaxCategoryDetailComponent,\n        resolve: createResolveData(TaxCategoryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxCategoryBreadcrumb,\n        },\n    },\n    {\n        path: 'tax-rates',\n        component: TaxRateListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.tax-rates'),\n        },\n    },\n    {\n        path: 'tax-rates/:id',\n        component: TaxRateDetailComponent,\n        resolve: createResolveData(TaxRateResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: taxRateBreadcrumb,\n        },\n    },\n    {\n        path: 'countries',\n        component: CountryListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.countries'),\n        },\n    },\n    {\n        path: 'countries/:id',\n        component: CountryDetailComponent,\n        resolve: createResolveData(CountryResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: countryBreadcrumb,\n        },\n    },\n    {\n        path: 'zones',\n        component: ZoneListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.zones'),\n        },\n    },\n    {\n        path: 'shipping-methods',\n        component: ShippingMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.shipping-methods'),\n        },\n    },\n    {\n        path: 'shipping-methods/:id',\n        component: ShippingMethodDetailComponent,\n        resolve: createResolveData(ShippingMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: shippingMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'payment-methods',\n        component: PaymentMethodListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.payment-methods'),\n        },\n    },\n    {\n        path: 'payment-methods/:id',\n        component: PaymentMethodDetailComponent,\n        resolve: createResolveData(PaymentMethodResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: paymentMethodBreadcrumb,\n        },\n    },\n    {\n        path: 'global-settings',\n        component: GlobalSettingsComponent,\n        resolve: createResolveData(GlobalSettingsResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: _('breadcrumb.global-settings'),\n        },\n    },\n];\n\nexport function administratorBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Administrator>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.administrators',\n        getName: admin => `${admin.firstName} ${admin.lastName}`,\n        route: 'administrators',\n    });\n}\n\nexport function channelBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Channel>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.channels',\n        getName: channel => channel.code,\n        route: 'channels',\n    });\n}\n\nexport function roleBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Role>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.roles',\n        getName: role => role.description,\n        route: 'roles',\n    });\n}\n\nexport function taxCategoryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxCategory.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-categories',\n        getName: category => category.name,\n        route: 'tax-categories',\n    });\n}\n\nexport function taxRateBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<TaxRate.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.tax-rates',\n        getName: category => category.name,\n        route: 'tax-rates',\n    });\n}\n\nexport function countryBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Country.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.countries',\n        getName: promotion => promotion.name,\n        route: 'countries',\n    });\n}\n\nexport function shippingMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.shipping-methods',\n        getName: method => method.name,\n        route: 'shipping-methods',\n    });\n}\n\nexport function paymentMethodBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<ShippingMethod.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.payment-methods',\n        getName: method => method.code,\n        route: 'payment-methods',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCountryToZoneDialogComponent } from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nimport { AdminDetailComponent } from './components/admin-detail/admin-detail.component';\nimport { AdministratorListComponent } from './components/administrator-list/administrator-list.component';\nimport { ChannelDetailComponent } from './components/channel-detail/channel-detail.component';\nimport { ChannelListComponent } from './components/channel-list/channel-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryListComponent } from './components/country-list/country-list.component';\nimport { GlobalSettingsComponent } from './components/global-settings/global-settings.component';\nimport { PaymentMethodDetailComponent } from './components/payment-method-detail/payment-method-detail.component';\nimport { PaymentMethodListComponent } from './components/payment-method-list/payment-method-list.component';\nimport { PermissionGridComponent } from './components/permission-grid/permission-grid.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RoleDetailComponent } from './components/role-detail/role-detail.component';\nimport { RoleListComponent } from './components/role-list/role-list.component';\nimport { ShippingEligibilityTestResultComponent } from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\nimport { ShippingMethodDetailComponent } from './components/shipping-method-detail/shipping-method-detail.component';\nimport { ShippingMethodListComponent } from './components/shipping-method-list/shipping-method-list.component';\nimport { ShippingMethodTestResultComponent } from './components/shipping-method-test-result/shipping-method-test-result.component';\nimport { TaxCategoryDetailComponent } from './components/tax-category-detail/tax-category-detail.component';\nimport { TaxCategoryListComponent } from './components/tax-category-list/tax-category-list.component';\nimport { TaxRateDetailComponent } from './components/tax-rate-detail/tax-rate-detail.component';\nimport { TaxRateListComponent } from './components/tax-rate-list/tax-rate-list.component';\nimport { TestAddressFormComponent } from './components/test-address-form/test-address-form.component';\nimport { TestOrderBuilderComponent } from './components/test-order-builder/test-order-builder.component';\nimport { ZoneDetailDialogComponent } from './components/zone-detail-dialog/zone-detail-dialog.component';\nimport { ZoneListComponent } from './components/zone-list/zone-list.component';\nimport { ZoneMemberControlsDirective } from './components/zone-member-list/zone-member-controls.directive';\nimport { ZoneMemberListHeaderDirective } from './components/zone-member-list/zone-member-list-header.directive';\nimport { ZoneMemberListComponent } from './components/zone-member-list/zone-member-list.component';\nimport { settingsRoutes } from './settings.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(settingsRoutes)],\n    declarations: [\n        TaxCategoryListComponent,\n        TaxCategoryDetailComponent,\n        AdministratorListComponent,\n        RoleListComponent,\n        RoleDetailComponent,\n        AdminDetailComponent,\n        PermissionGridComponent,\n        CountryListComponent,\n        CountryDetailComponent,\n        TaxRateListComponent,\n        TaxRateDetailComponent,\n        ChannelListComponent,\n        ChannelDetailComponent,\n        ShippingMethodListComponent,\n        ShippingMethodDetailComponent,\n        PaymentMethodListComponent,\n        PaymentMethodDetailComponent,\n        GlobalSettingsComponent,\n        TestOrderBuilderComponent,\n        TestAddressFormComponent,\n        ShippingMethodTestResultComponent,\n        ShippingEligibilityTestResultComponent,\n        ZoneListComponent,\n        AddCountryToZoneDialogComponent,\n        ZoneMemberListComponent,\n        ZoneMemberListHeaderDirective,\n        ZoneMemberControlsDirective,\n        ZoneDetailDialogComponent,\n        ProfileComponent,\n    ],\n})\nexport class SettingsModule {}\n","// This file was generated by the build-public-api.ts script\nexport * from './components/add-country-to-zone-dialog/add-country-to-zone-dialog.component';\nexport * from './components/admin-detail/admin-detail.component';\nexport * from './components/administrator-list/administrator-list.component';\nexport * from './components/channel-detail/channel-detail.component';\nexport * from './components/channel-list/channel-list.component';\nexport * from './components/country-detail/country-detail.component';\nexport * from './components/country-list/country-list.component';\nexport * from './components/global-settings/global-settings.component';\nexport * from './components/payment-method-detail/payment-method-detail.component';\nexport * from './components/payment-method-list/payment-method-list.component';\nexport * from './components/permission-grid/permission-grid.component';\nexport * from './components/profile/profile.component';\nexport * from './components/role-detail/role-detail.component';\nexport * from './components/role-list/role-list.component';\nexport * from './components/shipping-eligibility-test-result/shipping-eligibility-test-result.component';\nexport * from './components/shipping-method-detail/shipping-method-detail.component';\nexport * from './components/shipping-method-list/shipping-method-list.component';\nexport * from './components/shipping-method-test-result/shipping-method-test-result.component';\nexport * from './components/tax-category-detail/tax-category-detail.component';\nexport * from './components/tax-category-list/tax-category-list.component';\nexport * from './components/tax-rate-detail/tax-rate-detail.component';\nexport * from './components/tax-rate-list/tax-rate-list.component';\nexport * from './components/test-address-form/test-address-form.component';\nexport * from './components/test-order-builder/test-order-builder.component';\nexport * from './components/zone-detail-dialog/zone-detail-dialog.component';\nexport * from './components/zone-list/zone-list.component';\nexport * from './components/zone-member-list/zone-member-controls.directive';\nexport * from './components/zone-member-list/zone-member-list-header.directive';\nexport * from './components/zone-member-list/zone-member-list.component';\nexport * from './providers/routing/administrator-resolver';\nexport * from './providers/routing/channel-resolver';\nexport * from './providers/routing/country-resolver';\nexport * from './providers/routing/global-settings-resolver';\nexport * from './providers/routing/payment-method-resolver';\nexport * from './providers/routing/profile-resolver';\nexport * from './providers/routing/role-resolver';\nexport * from './providers/routing/shipping-method-resolver';\nexport * from './providers/routing/tax-category-resolver';\nexport * from './providers/routing/tax-rate-resolver';\nexport * from './settings.module';\nexport * from './settings.routes';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["_"],"mappings":"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"}