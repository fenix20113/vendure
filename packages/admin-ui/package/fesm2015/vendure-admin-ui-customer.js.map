{"version":3,"file":"vendure-admin-ui-customer.js","sources":["../../src/lib/customer/src/components/add-customer-to-group-dialog/add-customer-to-group-dialog.component.ts","../../src/lib/customer/src/components/address-detail-dialog/address-detail-dialog.component.ts","../../src/lib/customer/src/components/address-card/address-card.component.ts","../../src/lib/customer/src/components/select-customer-group-dialog/select-customer-group-dialog.component.ts","../../src/lib/customer/src/components/customer-detail/customer-detail.component.ts","../../src/lib/customer/src/components/customer-group-detail-dialog/customer-group-detail-dialog.component.ts","../../src/lib/customer/src/components/customer-group-list/customer-group-list.component.ts","../../src/lib/customer/src/components/customer-group-member-list/customer-group-member-list.component.ts","../../src/lib/customer/src/components/customer-history/customer-history.component.ts","../../src/lib/customer/src/components/customer-list/customer-list.component.ts","../../src/lib/customer/src/components/customer-status-label/customer-status-label.component.ts","../../src/lib/customer/src/providers/routing/customer-resolver.ts","../../src/lib/customer/src/customer.routes.ts","../../src/lib/customer/src/customer.module.ts","../../src/lib/customer/src/public_api.ts","../../src/lib/customer/src/vendure-admin-ui-customer.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-add-customer-to-group-dialog',\n    templateUrl: './add-customer-to-group-dialog.component.html',\n    styleUrls: ['./add-customer-to-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCustomerToGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    group: GetCustomerGroups.Items;\n    route: ActivatedRoute;\n    selectedCustomerIds: string[] = [];\n    customers$: Observable<GetCustomerList.Items[]>;\n    customersTotal$: Observable<number>;\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 10,\n        filterTerm: '',\n    });\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        const customerResult$ = this.fetchGroupMembers$.pipe(\n            switchMap(({ skip, take, filterTerm }) => {\n                return this.dataService.customer\n                    .getCustomerList(take, skip, filterTerm)\n                    .mapStream((res) => res.customers);\n            }),\n        );\n\n        this.customers$ = customerResult$.pipe(map((res) => res.items));\n        this.customersTotal$ = customerResult$.pipe(map((res) => res.totalItems));\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedCustomerIds);\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, Dialog, GetAvailableCountries } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-address-detail-dialog',\n    templateUrl: './address-detail-dialog.component.html',\n    styleUrls: ['./address-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressDetailDialogComponent implements Dialog<FormGroup>, OnInit {\n    addressForm: FormGroup;\n    customFields: CustomFieldConfig;\n    availableCountries: GetAvailableCountries.Items[] = [];\n    resolveWith: (result?: FormGroup) => void;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.addressForm.valueChanges.subscribe(() => this.changeDetector.markForCheck());\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.addressForm);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CustomFieldConfig, GetAvailableCountries, ModalService } from '@vendure/admin-ui/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { AddressDetailDialogComponent } from '../address-detail-dialog/address-detail-dialog.component';\n\n@Component({\n    selector: 'vdr-address-card',\n    templateUrl: './address-card.component.html',\n    styleUrls: ['./address-card.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressCardComponent implements OnInit, OnChanges {\n    @Input() addressForm: FormGroup;\n    @Input() customFields: CustomFieldConfig;\n    @Input() availableCountries: GetAvailableCountries.Items[] = [];\n    @Input() isDefaultBilling: string;\n    @Input() isDefaultShipping: string;\n    @Input() editable = true;\n    @Output() setAsDefaultShipping = new EventEmitter<string>();\n    @Output() setAsDefaultBilling = new EventEmitter<string>();\n    private dataDependenciesPopulated = new BehaviorSubject<boolean>(false);\n\n    constructor(private modalService: ModalService, private changeDetector: ChangeDetectorRef) {}\n\n    ngOnInit(): void {\n        const streetLine1 = this.addressForm.get('streetLine1') as FormControl;\n        // Make the address dialog display automatically if there is no address line\n        // as is the case when adding a new address.\n        if (!streetLine1.value) {\n            this.dataDependenciesPopulated\n                .pipe(\n                    filter(value => value),\n                    take(1),\n                )\n                .subscribe(() => {\n                    this.editAddress();\n                });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.customFields != null && this.availableCountries != null) {\n            this.dataDependenciesPopulated.next(true);\n        }\n    }\n\n    getCountryName(countryCode: string) {\n        if (!this.availableCountries) {\n            return '';\n        }\n        const match = this.availableCountries.find(c => c.code === countryCode);\n        return match ? match.name : '';\n    }\n\n    setAsDefaultBillingAddress() {\n        this.setAsDefaultBilling.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    setAsDefaultShippingAddress() {\n        this.setAsDefaultShipping.emit(this.addressForm.value.id);\n        this.addressForm.markAsDirty();\n    }\n\n    editAddress() {\n        this.modalService\n            .fromComponent(AddressDetailDialogComponent, {\n                locals: {\n                    addressForm: this.addressForm,\n                    customFields: this.customFields,\n                    availableCountries: this.availableCountries,\n                },\n                size: 'md',\n                closable: true,\n            })\n            .subscribe(() => {\n                this.changeDetector.markForCheck();\n            });\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService, Dialog, GetCustomerGroups, GetCustomerList } from '@vendure/admin-ui/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-select-customer-group-dialog',\n    templateUrl: './select-customer-group-dialog.component.html',\n    styleUrls: ['./select-customer-group-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectCustomerGroupDialogComponent implements Dialog<string[]>, OnInit {\n    resolveWith: (result?: string[]) => void;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    selectedGroupIds: string[] = [];\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((res) => res.customerGroups.items);\n    }\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    add() {\n        this.resolveWith(this.selectedGroupIds);\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseDetailComponent,\n    CreateAddressInput,\n    CreateCustomerAddress,\n    CreateCustomerAddressMutation,\n    CreateCustomerInput,\n    Customer,\n    CustomFieldConfig,\n    DataService,\n    EditNoteDialogComponent,\n    GetAvailableCountries,\n    GetCustomer,\n    GetCustomerHistory,\n    GetCustomerQuery,\n    HistoryEntry,\n    ModalService,\n    NotificationService,\n    ServerConfigService,\n    SortOrder,\n    UpdateCustomer,\n    UpdateCustomerAddress,\n    UpdateCustomerAddressMutation,\n    UpdateCustomerInput,\n    UpdateCustomerMutation,\n} from '@vendure/admin-ui/core';\nimport { notNullOrUndefined } from '@vendure/common/lib/shared-utils';\nimport { EMPTY, forkJoin, from, Observable, Subject } from 'rxjs';\nimport {\n    concatMap,\n    filter,\n    map,\n    merge,\n    mergeMap,\n    shareReplay,\n    startWith,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nimport { SelectCustomerGroupDialogComponent } from '../select-customer-group-dialog/select-customer-group-dialog.component';\n\ntype CustomerWithOrders = NonNullable<GetCustomerQuery['customer']>;\n\n@Component({\n    selector: 'vdr-customer-detail',\n    templateUrl: './customer-detail.component.html',\n    styleUrls: ['./customer-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerDetailComponent extends BaseDetailComponent<CustomerWithOrders>\n    implements OnInit, OnDestroy {\n    detailForm: FormGroup;\n    customFields: CustomFieldConfig[];\n    addressCustomFields: CustomFieldConfig[];\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\n    orders$: Observable<GetCustomer.Items[]>;\n    ordersCount$: Observable<number>;\n    history$: Observable<GetCustomerHistory.Items[] | undefined>;\n    fetchHistory = new Subject<void>();\n    defaultShippingAddressId: string;\n    defaultBillingAddressId: string;\n    addressDefaultsUpdated = false;\n    ordersPerPage = 10;\n    currentOrdersPage = 1;\n    private orderListUpdates$ = new Subject<CustomerWithOrders>();\n\n    constructor(\n        route: ActivatedRoute,\n        router: Router,\n        serverConfigService: ServerConfigService,\n        private changeDetector: ChangeDetectorRef,\n        private formBuilder: FormBuilder,\n        protected dataService: DataService,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(route, router, serverConfigService, dataService);\n\n        this.customFields = this.getCustomFieldConfig('Customer');\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\n        this.detailForm = this.formBuilder.group({\n            customer: this.formBuilder.group({\n                title: '',\n                firstName: ['', Validators.required],\n                lastName: ['', Validators.required],\n                phoneNumber: '',\n                emailAddress: ['', [Validators.required, Validators.email]],\n                password: '',\n                customFields: this.formBuilder.group(\n                    this.customFields.reduce((hash, field) => ({ ...hash, [field.name]: '' }), {}),\n                ),\n            }),\n            addresses: new FormArray([]),\n        });\n    }\n\n    ngOnInit() {\n        this.init();\n        this.availableCountries$ = this.dataService.settings\n            .getAvailableCountries()\n            .mapSingle(result => result.countries.items)\n            .pipe(shareReplay(1));\n\n        const customerWithUpdates$ = this.entity$.pipe(merge(this.orderListUpdates$));\n        this.orders$ = customerWithUpdates$.pipe(map(customer => customer.orders.items));\n        this.ordersCount$ = this.entity$.pipe(map(customer => customer.orders.totalItems));\n        this.history$ = this.fetchHistory.pipe(\n            startWith(null),\n            switchMap(() => {\n                return this.dataService.customer\n                    .getCustomerHistory(this.id, {\n                        sort: {\n                            createdAt: SortOrder.DESC,\n                        },\n                    })\n                    .mapStream(data => data.customer?.history.items);\n            }),\n        );\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n        this.orderListUpdates$.complete();\n    }\n\n    customFieldIsSet(name: string): boolean {\n        return !!this.detailForm.get(['customer', 'customFields', name]);\n    }\n\n    getAddressFormControls(): FormControl[] {\n        const formArray = this.detailForm.get(['addresses']) as FormArray;\n        return formArray.controls as FormControl[];\n    }\n\n    setDefaultBillingAddressId(id: string) {\n        this.defaultBillingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    setDefaultShippingAddressId(id: string) {\n        this.defaultShippingAddressId = id;\n        this.addressDefaultsUpdated = true;\n    }\n\n    addAddress() {\n        const addressFormArray = this.detailForm.get('addresses') as FormArray;\n        const newAddress = this.formBuilder.group({\n            fullName: '',\n            company: '',\n            streetLine1: ['', Validators.required],\n            streetLine2: '',\n            city: '',\n            province: '',\n            postalCode: '',\n            countryCode: ['', Validators.required],\n            phoneNumber: '',\n            defaultShippingAddress: false,\n            defaultBillingAddress: false,\n        });\n        if (this.addressCustomFields.length) {\n            const customFieldsGroup = this.formBuilder.group({});\n            for (const fieldDef of this.addressCustomFields) {\n                customFieldsGroup.addControl(fieldDef.name, new FormControl(''));\n            }\n            newAddress.addControl('customFields', customFieldsGroup);\n        }\n        addressFormArray.push(newAddress);\n    }\n\n    setOrderItemsPerPage(itemsPerPage: number) {\n        this.ordersPerPage = +itemsPerPage;\n        this.fetchOrdersList();\n    }\n\n    setOrderCurrentPage(page: number) {\n        this.currentOrdersPage = +page;\n        this.fetchOrdersList();\n    }\n\n    create() {\n        const customerForm = this.detailForm.get('customer');\n        if (!customerForm) {\n            return;\n        }\n        const formValue = customerForm.value;\n        const customFields = customerForm.get('customFields')?.value;\n        const customer: CreateCustomerInput = {\n            title: formValue.title,\n            emailAddress: formValue.emailAddress,\n            firstName: formValue.firstName,\n            lastName: formValue.lastName,\n            phoneNumber: formValue.phoneNumber,\n            customFields,\n        };\n        this.dataService.customer\n            .createCustomer(customer, formValue.password)\n            .subscribe(({ createCustomer }) => {\n                switch (createCustomer.__typename) {\n                    case 'Customer':\n                        this.notificationService.success(_('common.notify-create-success'), {\n                            entity: 'Customer',\n                        });\n                        if (createCustomer.emailAddress && !formValue.password) {\n                            this.notificationService.notify({\n                                message: _('customer.email-verification-sent'),\n                                translationVars: { emailAddress: formValue.emailAddress },\n                                type: 'info',\n                                duration: 10000,\n                            });\n                        }\n                        this.detailForm.markAsPristine();\n                        this.addressDefaultsUpdated = false;\n                        this.changeDetector.markForCheck();\n                        this.router.navigate(['../', createCustomer.id], { relativeTo: this.route });\n                        break;\n                    case 'EmailAddressConflictError':\n                        this.notificationService.error(createCustomer.message);\n                }\n            });\n    }\n\n    save() {\n        this.entity$\n            .pipe(\n                take(1),\n                mergeMap(({ id }) => {\n                    const saveOperations: Array<Observable<\n                        | UpdateCustomer.UpdateCustomer\n                        | CreateCustomerAddress.CreateCustomerAddress\n                        | UpdateCustomerAddress.UpdateCustomerAddress\n                    >> = [];\n                    const customerForm = this.detailForm.get('customer');\n                    if (customerForm && customerForm.dirty) {\n                        const formValue = customerForm.value;\n                        const customFields = customerForm.get('customFields')?.value;\n                        const customer: UpdateCustomerInput = {\n                            id,\n                            title: formValue.title,\n                            emailAddress: formValue.emailAddress,\n                            firstName: formValue.firstName,\n                            lastName: formValue.lastName,\n                            phoneNumber: formValue.phoneNumber,\n                            customFields,\n                        };\n                        saveOperations.push(\n                            this.dataService.customer\n                                .updateCustomer(customer)\n                                .pipe(map(res => res.updateCustomer)),\n                        );\n                    }\n                    const addressFormArray = this.detailForm.get('addresses') as FormArray;\n                    if ((addressFormArray && addressFormArray.dirty) || this.addressDefaultsUpdated) {\n                        for (const addressControl of addressFormArray.controls) {\n                            if (addressControl.dirty || this.addressDefaultsUpdated) {\n                                const address = addressControl.value;\n                                const input: CreateAddressInput = {\n                                    fullName: address.fullName,\n                                    company: address.company,\n                                    streetLine1: address.streetLine1,\n                                    streetLine2: address.streetLine2,\n                                    city: address.city,\n                                    province: address.province,\n                                    postalCode: address.postalCode,\n                                    countryCode: address.countryCode,\n                                    phoneNumber: address.phoneNumber,\n                                    defaultShippingAddress: this.defaultShippingAddressId === address.id,\n                                    defaultBillingAddress: this.defaultBillingAddressId === address.id,\n                                    customFields: address.customFields,\n                                };\n                                if (!address.id) {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .createCustomerAddress(id, input)\n                                            .pipe(map(res => res.createCustomerAddress)),\n                                    );\n                                } else {\n                                    saveOperations.push(\n                                        this.dataService.customer\n                                            .updateCustomerAddress({\n                                                ...input,\n                                                id: address.id,\n                                            })\n                                            .pipe(map(res => res.updateCustomerAddress)),\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    return forkJoin(saveOperations);\n                }),\n            )\n            .subscribe(\n                data => {\n                    for (const result of data) {\n                        switch (result.__typename) {\n                            case 'Customer':\n                            case 'Address':\n                                this.notificationService.success(_('common.notify-update-success'), {\n                                    entity: 'Customer',\n                                });\n                                this.detailForm.markAsPristine();\n                                this.addressDefaultsUpdated = false;\n                                this.changeDetector.markForCheck();\n                                this.fetchHistory.next();\n                                break;\n                            case 'EmailAddressConflictError':\n                                this.notificationService.error(result.message);\n                                break;\n                        }\n                    }\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n\n    addToGroup() {\n        this.modalService\n            .fromComponent(SelectCustomerGroupDialogComponent, {\n                size: 'md',\n            })\n            .pipe(\n                switchMap(groupIds => (groupIds ? from(groupIds) : EMPTY)),\n                concatMap(groupId => this.dataService.customer.addCustomersToGroup(groupId, [this.id])),\n            )\n            .subscribe({\n                next: res => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: 1,\n                        groupName: res.addCustomersToGroup.name,\n                    });\n                },\n                complete: () => {\n                    this.dataService.customer.getCustomer(this.id, { take: 0 }).single$.subscribe();\n                    this.fetchHistory.next();\n                },\n            });\n    }\n\n    removeFromGroup(group: GetCustomer.Groups) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-remove-customer-from-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap(response =>\n                    response\n                        ? this.dataService.customer.removeCustomersFromGroup(group.id, [this.id])\n                        : EMPTY,\n                ),\n                switchMap(() => this.dataService.customer.getCustomer(this.id, { take: 0 }).single$),\n            )\n            .subscribe(result => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: 1,\n                    groupName: group.name,\n                });\n                this.fetchHistory.next();\n            });\n    }\n\n    addNoteToCustomer({ note }: { note: string }) {\n        this.dataService.customer.addNoteToCustomer(this.id, note).subscribe(() => {\n            this.fetchHistory.next();\n            this.notificationService.success(_('common.notify-create-success'), {\n                entity: 'Note',\n            });\n        });\n    }\n\n    updateNote(entry: HistoryEntry) {\n        this.modalService\n            .fromComponent(EditNoteDialogComponent, {\n                closable: true,\n                locals: {\n                    displayPrivacyControls: false,\n                    note: entry.data.note,\n                },\n            })\n            .pipe(\n                switchMap(result => {\n                    if (result) {\n                        return this.dataService.customer.updateCustomerNote({\n                            noteId: entry.id,\n                            note: result.note,\n                        });\n                    } else {\n                        return EMPTY;\n                    }\n                }),\n            )\n            .subscribe(result => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-update-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    deleteNote(entry: HistoryEntry) {\n        return this.modalService\n            .dialog({\n                title: _('common.confirm-delete-note'),\n                body: entry.data.note,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomerNote(entry.id) : EMPTY)))\n            .subscribe(() => {\n                this.fetchHistory.next();\n                this.notificationService.success(_('common.notify-delete-success'), {\n                    entity: 'Note',\n                });\n            });\n    }\n\n    protected setFormValues(entity: Customer.Fragment): void {\n        const customerGroup = this.detailForm.get('customer');\n        if (customerGroup) {\n            customerGroup.patchValue({\n                title: entity.title,\n                firstName: entity.firstName,\n                lastName: entity.lastName,\n                phoneNumber: entity.phoneNumber,\n                emailAddress: entity.emailAddress,\n            });\n        }\n\n        if (entity.addresses) {\n            const addressesArray = new FormArray([]);\n            for (const address of entity.addresses) {\n                const { customFields, ...rest } = address as any;\n                const addressGroup = this.formBuilder.group({\n                    ...rest,\n                    countryCode: address.country.code,\n                });\n                addressesArray.push(addressGroup);\n                if (address.defaultShippingAddress) {\n                    this.defaultShippingAddressId = address.id;\n                }\n                if (address.defaultBillingAddress) {\n                    this.defaultBillingAddressId = address.id;\n                }\n\n                if (this.addressCustomFields.length) {\n                    const customFieldsGroup = this.formBuilder.group({});\n                    for (const fieldDef of this.addressCustomFields) {\n                        const key = fieldDef.name;\n                        const value = (address as any).customFields?.[key];\n                        const control = new FormControl(value);\n                        customFieldsGroup.addControl(key, control);\n                    }\n                    addressGroup.addControl('customFields', customFieldsGroup);\n                }\n            }\n            this.detailForm.setControl('addresses', addressesArray);\n        }\n\n        if (this.customFields.length) {\n            const customFieldsGroup = this.detailForm.get(['customer', 'customFields']) as FormGroup;\n\n            for (const fieldDef of this.customFields) {\n                const key = fieldDef.name;\n                const value = (entity as any).customFields?.[key];\n                const control = customFieldsGroup.get(key);\n                if (control) {\n                    control.patchValue(value);\n                }\n            }\n        }\n        this.changeDetector.markForCheck();\n    }\n\n    /**\n     * Refetch the customer with the current order list settings.\n     */\n    private fetchOrdersList() {\n        this.dataService.customer\n            .getCustomer(this.id, {\n                take: this.ordersPerPage,\n                skip: (this.currentOrdersPage - 1) * this.ordersPerPage,\n            })\n            .single$.pipe(\n                map(data => data.customer),\n                filter(notNullOrUndefined),\n            )\n            .subscribe(result => this.orderListUpdates$.next(result));\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Dialog } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-group-detail-dialog',\n    templateUrl: './customer-group-detail-dialog.component.html',\n    styleUrls: ['./customer-group-detail-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupDetailDialogComponent implements Dialog<string> {\n    group: { id?: string; name: string };\n    resolveWith: (result?: string) => void;\n\n    cancel() {\n        this.resolveWith();\n    }\n\n    save() {\n        this.resolveWith(this.group.name);\n    }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    DataService,\n    DeletionResult,\n    GetCustomerGroups,\n    GetCustomerGroupWithCustomers,\n    GetZones,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, mapTo, switchMap, tap } from 'rxjs/operators';\n\nimport { AddCustomerToGroupDialogComponent } from '../add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { CustomerGroupDetailDialogComponent } from '../customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupMemberFetchParams } from '../customer-group-member-list/customer-group-member-list.component';\n\n@Component({\n    selector: 'vdr-customer-group-list',\n    templateUrl: './customer-group-list.component.html',\n    styleUrls: ['./customer-group-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupListComponent implements OnInit {\n    activeGroup$: Observable<GetCustomerGroups.Items | undefined>;\n    groups$: Observable<GetCustomerGroups.Items[]>;\n    listIsEmpty$: Observable<boolean>;\n    members$: Observable<GetCustomerGroupWithCustomers.Items[]>;\n    membersTotal$: Observable<number>;\n    selectedCustomerIds: string[] = [];\n    fetchGroupMembers$ = new BehaviorSubject<CustomerGroupMemberFetchParams>({\n        skip: 0,\n        take: 0,\n        filterTerm: '',\n    });\n    private refreshActiveGroupMembers$ = new BehaviorSubject<void>(undefined);\n\n    constructor(\n        private dataService: DataService,\n        private notificationService: NotificationService,\n        private modalService: ModalService,\n        public route: ActivatedRoute,\n        private router: Router,\n    ) {}\n\n    ngOnInit(): void {\n        this.groups$ = this.dataService.customer\n            .getCustomerGroupList()\n            .mapStream((data) => data.customerGroups.items);\n        const activeGroupId$ = this.route.paramMap.pipe(\n            map((pm) => pm.get('contents')),\n            distinctUntilChanged(),\n            tap(() => (this.selectedCustomerIds = [])),\n        );\n        this.listIsEmpty$ = this.groups$.pipe(map((groups) => groups.length === 0));\n        this.activeGroup$ = combineLatest(this.groups$, activeGroupId$).pipe(\n            map(([groups, activeGroupId]) => {\n                if (activeGroupId) {\n                    return groups.find((g) => g.id === activeGroupId);\n                }\n            }),\n        );\n        const membersResult$ = combineLatest(\n            this.activeGroup$,\n            this.fetchGroupMembers$,\n            this.refreshActiveGroupMembers$,\n        ).pipe(\n            switchMap(([activeGroup, { skip, take, filterTerm }]) => {\n                if (activeGroup) {\n                    return this.dataService.customer\n                        .getCustomerGroupWithCustomers(activeGroup.id, {\n                            skip,\n                            take,\n                            filter: {\n                                emailAddress: {\n                                    contains: filterTerm,\n                                },\n                            },\n                        })\n                        .mapStream((res) => res.customerGroup?.customers);\n                } else {\n                    return of(undefined);\n                }\n            }),\n        );\n\n        this.members$ = membersResult$.pipe(map((res) => res?.items ?? []));\n        this.membersTotal$ = membersResult$.pipe(map((res) => res?.totalItems ?? 0));\n    }\n\n    create() {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group: { name: '' } } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.createCustomerGroup({ name, customerIds: [] }) : EMPTY,\n                ),\n                // refresh list\n                switchMap(() => this.dataService.customer.getCustomerGroupList().single$),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-create-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-create-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    delete(groupId: string) {\n        this.modalService\n            .dialog({\n                title: _('customer.confirm-delete-customer-group'),\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(\n                switchMap((response) =>\n                    response ? this.dataService.customer.deleteCustomerGroup(groupId) : EMPTY,\n                ),\n\n                switchMap((result) => {\n                    if (result.deleteCustomerGroup.result === DeletionResult.DELETED) {\n                        // refresh list\n                        return this.dataService.customer\n                            .getCustomerGroupList()\n                            .mapSingle(() => ({ errorMessage: false }));\n                    } else {\n                        return of({ errorMessage: result.deleteCustomerGroup.message });\n                    }\n                }),\n            )\n            .subscribe(\n                (result) => {\n                    if (typeof result.errorMessage === 'string') {\n                        this.notificationService.error(result.errorMessage);\n                    } else {\n                        this.notificationService.success(_('common.notify-delete-success'), {\n                            entity: 'CustomerGroup',\n                        });\n                    }\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    update(group: GetCustomerGroups.Items) {\n        this.modalService\n            .fromComponent(CustomerGroupDetailDialogComponent, { locals: { group } })\n            .pipe(\n                switchMap((name) =>\n                    name ? this.dataService.customer.updateCustomerGroup({ id: group.id, name }) : EMPTY,\n                ),\n            )\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-update-success'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n                (err) => {\n                    this.notificationService.error(_('common.notify-update-error'), {\n                        entity: 'CustomerGroup',\n                    });\n                },\n            );\n    }\n\n    closeMembers() {\n        const params = { ...this.route.snapshot.params };\n        delete params.contents;\n        this.router.navigate(['./', params], { relativeTo: this.route, queryParamsHandling: 'preserve' });\n    }\n\n    addToGroup(group: GetCustomerGroupWithCustomers.CustomerGroup) {\n        this.modalService\n            .fromComponent(AddCustomerToGroupDialogComponent, {\n                locals: {\n                    group,\n                    route: this.route,\n                },\n                size: 'md',\n                verticalAlign: 'top',\n            })\n            .pipe(\n                switchMap((customerIds) =>\n                    customerIds\n                        ? this.dataService.customer\n                              .addCustomersToGroup(group.id, customerIds)\n                              .pipe(mapTo(customerIds))\n                        : EMPTY,\n                ),\n            )\n            .subscribe({\n                next: (result) => {\n                    this.notificationService.success(_(`customer.add-customers-to-group-success`), {\n                        customerCount: result.length,\n                        groupName: group.name,\n                    });\n                    this.refreshActiveGroupMembers$.next();\n                    this.selectedCustomerIds = [];\n                },\n            });\n    }\n\n    removeFromGroup(group: GetZones.Zones, customerIds: string[]) {\n        this.dataService.customer.removeCustomersFromGroup(group.id, customerIds).subscribe({\n            complete: () => {\n                this.notificationService.success(_(`customer.remove-customers-from-group-success`), {\n                    customerCount: customerIds.length,\n                    groupName: group.name,\n                });\n                this.refreshActiveGroupMembers$.next();\n                this.selectedCustomerIds = [];\n            },\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Customer, DataService, GetCustomerGroupWithCustomers } from '@vendure/admin-ui/core';\nimport { ZoneMember } from '@vendure/admin-ui/settings';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, startWith, takeUntil, tap } from 'rxjs/operators';\n\nexport interface CustomerGroupMemberFetchParams {\n    skip: number;\n    take: number;\n    filterTerm: string;\n}\n\n@Component({\n    selector: 'vdr-customer-group-member-list',\n    templateUrl: './customer-group-member-list.component.html',\n    styleUrls: ['./customer-group-member-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerGroupMemberListComponent implements OnInit, OnDestroy {\n    @Input() members: Array<\n        Pick<Customer, 'id' | 'createdAt' | 'updatedAt' | 'title' | 'firstName' | 'lastName' | 'emailAddress'>\n    >;\n    @Input() totalItems: number;\n    @Input() route: ActivatedRoute;\n    @Input() selectedMemberIds: string[] = [];\n    @Output() selectionChange = new EventEmitter<string[]>();\n    @Output() fetchParamsChange = new EventEmitter<CustomerGroupMemberFetchParams>();\n\n    membersItemsPerPage$: Observable<number>;\n    membersCurrentPage$: Observable<number>;\n    filterTermControl = new FormControl('');\n    private refresh$ = new BehaviorSubject<boolean>(true);\n    private destroy$ = new Subject<void>();\n\n    constructor(private router: Router, private dataService: DataService) {}\n\n    ngOnInit() {\n        this.membersCurrentPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPage')),\n            map((page) => (!page ? 1 : +page)),\n            startWith(1),\n            distinctUntilChanged(),\n        );\n\n        this.membersItemsPerPage$ = this.route.paramMap.pipe(\n            map((qpm) => qpm.get('membersPerPage')),\n            map((perPage) => (!perPage ? 10 : +perPage)),\n            startWith(10),\n            distinctUntilChanged(),\n        );\n\n        const filterTerm$ = this.filterTermControl.valueChanges.pipe(\n            debounceTime(250),\n            tap(() => this.setContentsPageNumber(1)),\n            startWith(''),\n        );\n\n        combineLatest(this.membersCurrentPage$, this.membersItemsPerPage$, filterTerm$, this.refresh$)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(([currentPage, itemsPerPage, filterTerm]) => {\n                const take = itemsPerPage;\n                const skip = (currentPage - 1) * itemsPerPage;\n                this.fetchParamsChange.emit({\n                    filterTerm,\n                    skip,\n                    take,\n                });\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    setContentsPageNumber(page: number) {\n        this.setParam('membersPage', page);\n    }\n\n    setContentsItemsPerPage(perPage: number) {\n        this.setParam('membersPerPage', perPage);\n    }\n\n    refresh() {\n        this.refresh$.next(true);\n    }\n\n    private setParam(key: string, value: any) {\n        this.router.navigate(['./', { ...this.route.snapshot.params, [key]: value }], {\n            relativeTo: this.route,\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    areAllSelected(): boolean {\n        if (this.members) {\n            return this.selectedMemberIds.length === this.members.length;\n        } else {\n            return false;\n        }\n    }\n\n    toggleSelectAll() {\n        if (this.areAllSelected()) {\n            this.selectionChange.emit([]);\n        } else {\n            this.selectionChange.emit(this.members.map((v) => v.id));\n        }\n    }\n\n    toggleSelectMember(member: ZoneMember) {\n        if (this.selectedMemberIds.includes(member.id)) {\n            this.selectionChange.emit(this.selectedMemberIds.filter((id) => id !== member.id));\n        } else {\n            this.selectionChange.emit([...this.selectedMemberIds, member.id]);\n        }\n    }\n\n    isMemberSelected = (member: ZoneMember): boolean => {\n        return -1 < this.selectedMemberIds.indexOf(member.id);\n    };\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    Customer,\n    GetCustomerHistory,\n    HistoryEntry,\n    HistoryEntryType,\n    TimelineDisplayType,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-history',\n    templateUrl: './customer-history.component.html',\n    styleUrls: ['./customer-history.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerHistoryComponent {\n    @Input() customer: Customer.Fragment;\n    @Input() history: GetCustomerHistory.Items[];\n    @Output() addNote = new EventEmitter<{ note: string }>();\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\n    note = '';\n    readonly type = HistoryEntryType;\n\n    getDisplayType(entry: GetCustomerHistory.Items): TimelineDisplayType {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n            case HistoryEntryType.CUSTOMER_EMAIL_UPDATE_VERIFIED:\n            case HistoryEntryType.CUSTOMER_PASSWORD_RESET_VERIFIED:\n                return 'success';\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'muted';\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'error';\n            default:\n                return 'default';\n        }\n    }\n\n    getTimelineIcon(entry: GetCustomerHistory.Items): string | [string, string] | undefined {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n                return 'user';\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return ['assign-user', 'is-solid'];\n            case HistoryEntryType.CUSTOMER_NOTE:\n                return 'note';\n            case HistoryEntryType.CUSTOMER_ADDED_TO_GROUP:\n            case HistoryEntryType.CUSTOMER_REMOVED_FROM_GROUP:\n                return 'users';\n        }\n    }\n\n    isFeatured(entry: GetCustomerHistory.Items): boolean {\n        switch (entry.type) {\n            case HistoryEntryType.CUSTOMER_REGISTERED:\n            case HistoryEntryType.CUSTOMER_VERIFIED:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    getName(entry: GetCustomerHistory.Items): string {\n        const { administrator } = entry;\n        if (administrator) {\n            return `${administrator.firstName} ${administrator.lastName}`;\n        } else {\n            return `${this.customer.firstName} ${this.customer.lastName}`;\n        }\n    }\n\n    addNoteToCustomer() {\n        this.addNote.emit({ note: this.note });\n        this.note = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    BaseListComponent,\n    DataService,\n    GetCustomerList,\n    ModalService,\n    NotificationService,\n} from '@vendure/admin-ui/core';\nimport { SortOrder } from '@vendure/common/lib/generated-shop-types';\nimport { EMPTY, merge } from 'rxjs';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'vdr-customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.scss'],\n})\nexport class CustomerListComponent\n    extends BaseListComponent<GetCustomerList.Query, GetCustomerList.Items>\n    implements OnInit {\n    emailSearchTerm = new FormControl('');\n    lastNameSearchTerm = new FormControl('');\n    constructor(\n        private dataService: DataService,\n        router: Router,\n        route: ActivatedRoute,\n        private modalService: ModalService,\n        private notificationService: NotificationService,\n    ) {\n        super(router, route);\n        super.setQueryFn(\n            (...args: any[]) => this.dataService.customer.getCustomerList(...args).refetchOnChannelChange(),\n            data => data.customers,\n            (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        emailAddress: {\n                            contains: this.emailSearchTerm.value,\n                        },\n                        lastName: {\n                            contains: this.lastNameSearchTerm.value,\n                        },\n                    },\n                    sort: {\n                        createdAt: SortOrder.DESC,\n                    },\n                },\n            }),\n        );\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        merge(this.emailSearchTerm.valueChanges, this.lastNameSearchTerm.valueChanges)\n            .pipe(\n                filter(value => 2 < value.length || value.length === 0),\n                debounceTime(250),\n                takeUntil(this.destroy$),\n            )\n            .subscribe(() => this.refresh());\n    }\n\n    deleteCustomer(customer: GetCustomerList.Items) {\n        return this.modalService\n            .dialog({\n                title: _('catalog.confirm-delete-customer'),\n                body: `${customer.firstName} ${customer.lastName}`,\n                buttons: [\n                    { type: 'secondary', label: _('common.cancel') },\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\n                ],\n            })\n            .pipe(switchMap(res => (res ? this.dataService.customer.deleteCustomer(customer.id) : EMPTY)))\n            .subscribe(\n                () => {\n                    this.notificationService.success(_('common.notify-delete-success'), {\n                        entity: 'Customer',\n                    });\n                    this.refresh();\n                },\n                err => {\n                    this.notificationService.error(_('common.notify-delete-error'), {\n                        entity: 'Customer',\n                    });\n                },\n            );\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nimport { Customer } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-customer-status-label',\n    templateUrl: './customer-status-label.component.html',\n    styleUrls: ['./customer-status-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomerStatusLabelComponent {\n    @Input() customer: Customer.Fragment;\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\nimport { Customer } from '@vendure/admin-ui/core';\nimport { DataService } from '@vendure/admin-ui/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CustomerResolver extends BaseEntityResolver<Customer.Fragment> {\n    constructor(router: Router, dataService: DataService) {\n        super(\n            router,\n            {\n                __typename: 'Customer',\n                id: '',\n                createdAt: '',\n                updatedAt: '',\n                title: '',\n                firstName: '',\n                lastName: '',\n                emailAddress: '',\n                phoneNumber: null,\n                addresses: null,\n                user: null,\n            },\n            id => dataService.customer.getCustomer(id).mapStream(data => data.customer),\n        );\n    }\n}\n","import { Route } from '@angular/router';\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\nimport {\n    CanDeactivateDetailGuard,\n    createResolveData,\n    Customer,\n    detailBreadcrumb,\n} from '@vendure/admin-ui/core';\n\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerResolver } from './providers/routing/customer-resolver';\n\nexport const customerRoutes: Route[] = [\n    {\n        path: 'customers',\n        component: CustomerListComponent,\n        pathMatch: '',\n        data: {\n            breadcrumb: _('breadcrumb.customers'),\n        },\n    },\n    {\n        path: 'customers/:id',\n        component: CustomerDetailComponent,\n        resolve: createResolveData(CustomerResolver),\n        canDeactivate: [CanDeactivateDetailGuard],\n        data: {\n            breadcrumb: customerBreadcrumb,\n        },\n    },\n    {\n        path: 'groups',\n        component: CustomerGroupListComponent,\n        data: {\n            breadcrumb: _('breadcrumb.customer-groups'),\n        },\n    },\n];\n\nexport function customerBreadcrumb(data: any, params: any) {\n    return detailBreadcrumb<Customer.Fragment>({\n        entity: data.entity,\n        id: params.id,\n        breadcrumbKey: 'breadcrumb.customers',\n        getName: (customer) => `${customer.firstName} ${customer.lastName}`,\n        route: 'customers',\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\n\nimport { AddCustomerToGroupDialogComponent } from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nimport { AddressCardComponent } from './components/address-card/address-card.component';\nimport { AddressDetailDialogComponent } from './components/address-detail-dialog/address-detail-dialog.component';\nimport { CustomerDetailComponent } from './components/customer-detail/customer-detail.component';\nimport { CustomerGroupDetailDialogComponent } from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\nimport { CustomerGroupListComponent } from './components/customer-group-list/customer-group-list.component';\nimport { CustomerGroupMemberListComponent } from './components/customer-group-member-list/customer-group-member-list.component';\nimport { CustomerHistoryComponent } from './components/customer-history/customer-history.component';\nimport { CustomerListComponent } from './components/customer-list/customer-list.component';\nimport { CustomerStatusLabelComponent } from './components/customer-status-label/customer-status-label.component';\nimport { SelectCustomerGroupDialogComponent } from './components/select-customer-group-dialog/select-customer-group-dialog.component';\nimport { customerRoutes } from './customer.routes';\n\n@NgModule({\n    imports: [SharedModule, RouterModule.forChild(customerRoutes)],\n    declarations: [\n        CustomerListComponent,\n        CustomerDetailComponent,\n        CustomerStatusLabelComponent,\n        AddressCardComponent,\n        CustomerGroupListComponent,\n        CustomerGroupDetailDialogComponent,\n        AddCustomerToGroupDialogComponent,\n        CustomerGroupMemberListComponent,\n        SelectCustomerGroupDialogComponent,\n        CustomerHistoryComponent,\n        AddressDetailDialogComponent,\n    ],\n    exports: [AddressCardComponent],\n})\nexport class CustomerModule {}\n","// This file was generated by the build-public-api.ts script\nexport * from './components/add-customer-to-group-dialog/add-customer-to-group-dialog.component';\nexport * from './components/address-card/address-card.component';\nexport * from './components/address-detail-dialog/address-detail-dialog.component';\nexport * from './components/customer-detail/customer-detail.component';\nexport * from './components/customer-group-detail-dialog/customer-group-detail-dialog.component';\nexport * from './components/customer-group-list/customer-group-list.component';\nexport * from './components/customer-group-member-list/customer-group-member-list.component';\nexport * from './components/customer-history/customer-history.component';\nexport * from './components/customer-list/customer-list.component';\nexport * from './components/customer-status-label/customer-status-label.component';\nexport * from './components/select-customer-group-dialog/select-customer-group-dialog.component';\nexport * from './customer.module';\nexport * from './customer.routes';\nexport * from './providers/routing/customer-resolver';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["_","SortOrder","merge"],"mappings":"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"}